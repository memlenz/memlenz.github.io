


[{"content":" 🎮 Bagels – A Logic Game in Python # Hey everyone! Today, I’m sharing a fun little Python project: Bagels, a deductive logic game. 🧠💡\nThe goal? Guess a secret 3-digit number within 10 attempts.\nBut instead of getting direct hints, you receive clues to help you figure out the correct number:\n🟢 Game Rules:\nFermi → A digit is correct and in the right place ✅ Pico → A digit is correct but in the wrong place 🔄 Bagels → No correct digits ❌ Example:\nIf the secret number is \u0026ldquo;123\u0026rdquo; and you enter \u0026ldquo;132\u0026rdquo;, you’ll see:\nFermi Pico Pico (1 is correct and in the right place, while 3 and 2 are correct but misplaced).\n🚀 Source Code # Here’s the full implementation in Python:\n#!/usr/bin/env python3 # -*- coding: utf-8 -*- \u0026#34;\u0026#34;\u0026#34; Nom du fichier : bagels.py Description : Un jeu de déduction logique pour deviner un nombre secret à trois chiffres. Vous avez 10 chances pour deviner le nombre. - Pico -\u0026gt; Un chiffre correct, mauvaise position. - Fermi -\u0026gt; Un chiffre correct, bonne position. - Bagels -\u0026gt; Aucun chiffre correct. Auteur : ADEBI Ayedoun Châ-Fine achafine@gmail.com Date : 03/16/2025 \u0026#34;\u0026#34;\u0026#34; import random # Constante GUESSES = 10 # NOMBRE DE CHANCES DIGIT_LEN = 3 # NOMBRE DE CHIFFRES DU NOMBRE MENU = \u0026#34;\u0026#34;\u0026#34; Bagels, a deductive logic game. By ADEBI Ayedoun Châ-Fine achafine@gmail.com Je suis en train de penser à un nombre à 3 chiffres. Essais de deviner lequel. Voici quelques indices : Quand je dis: Voici ce à quoi je pense: Pico Un chiffre est correct mais à la mauvaise position Fermi Un chiffre est correct et à la bonne position Bagels Aucun des chiffres n\u0026#39;est correct Vous avez 10 essais : \u0026#34;\u0026#34;\u0026#34; def generer_nombre_secret(): \u0026#34;\u0026#34;\u0026#34; Générer un nombre secret unique à trois chiffres sous forme de liste. \u0026#34;\u0026#34;\u0026#34; chiffres = list(range(1, 10)) random.shuffle(chiffres) return [str(chiffres[i]) for i in range(DIGIT_LEN)] def obtenir_indices(input_list, guess_number): \u0026#34;\u0026#34;\u0026#34;Comparer l\u0026#39;entrée utilisateur avec le nombre secret et retourne des indices. \u0026#34;\u0026#34;\u0026#34; result = [] for i in range(len(input_list)): if input_list[i] == guess_number[i]: result.append(\u0026#34;Fermi\u0026#34;) elif input_list[i] in guess_number: result.append(\u0026#34;Pico\u0026#34;) return \u0026#34; \u0026#34;.join(result) if result else \u0026#34;Bagels\u0026#34; def valide_saisie(): \u0026#34;\u0026#34;\u0026#34;Gère l\u0026#39;entrée utilisateur, l\u0026#39;utilisateur doit entrer un nombre à trois chiffres\u0026#34;\u0026#34;\u0026#34; while True: saisie = input(\u0026#34;\u0026gt; \u0026#34;).strip() if len(saisie) == DIGIT_LEN and saisie.isdigit(): return list(saisie) print(\u0026#34;Entrée invalide, vous devez entrer un nombre à trois chiffres\u0026#34;) def main(): \u0026#34;\u0026#34;\u0026#34;Boucle principale du jeu\u0026#34;\u0026#34;\u0026#34; rejouer = \u0026#34;\u0026#34; while True: guess_number = generer_nombre_secret() for i in range(GUESSES): print(\u0026#34;Devine #\u0026#34;, i+1) input_nbre = valide_saisie() if input_nbre == guess_number: print(\u0026#34;Vous l\u0026#39;avez trouvé\u0026#34;) break else: print(obtenir_indices(input_nbre, guess_number)) else: print(\u0026#34;Game Over!\u0026#34;) print(\u0026#34;Voulez-vous encore jouer ?? (oui ou non)\u0026#34;) while True: rejouer = input(\u0026#34;\u0026gt; \u0026#34;).strip().lower() if rejouer in [\u0026#34;oui\u0026#34;, \u0026#34;non\u0026#34;]: break else: print(\u0026#34;Vous devez répondre par \u0026#39;oui\u0026#39; ou \u0026#39;non\u0026#39; \u0026#34;) if rejouer == \u0026#34;non\u0026#34;: print(\u0026#34;Merci d\u0026#39;avoir joué\u0026#34;) break if __name__ == \u0026#34;__main__\u0026#34;: print(MENU) main() 🔍 Code Breakdown # The program generates a random 3-digit secret number. The user enters a guess and receives a clue in return. The game loops for up to 10 attempts or until the player finds the correct number. At the end, the player can choose to replay or exit the game. 📌 How Can We Improve It? # I have a few ideas, but I’d love to hear your suggestions!\nFor example:\nAdd a hard mode where the secret number has no repeated digits. Create a graphical version using Tkinter or Pygame. Implement a multiplayer mode, where Player 1 sets a number and Player 2 tries to guess it. What do you think? Any other improvements you\u0026rsquo;d suggest? 🚀\n💬 Let me know in the comments if you tried the game or have any optimizations to propose!\n📌 Follow me for more Python and development content!\n👉 [Dev.to / GitHub / Twitter Profile]\n","date":"26 March 2025","externalUrl":null,"permalink":"/fr/blog/python/bagels/","section":"Langage","summary":"","title":"📝 Bagels : Un jeu de déduction logique en python","type":"blog"},{"content":"","date":"26 March 2025","externalUrl":null,"permalink":"/fr/categories/tp-python/","section":"Categories","summary":"","title":"TP Python","type":"categories"},{"content":" 👨‍💻 Welcome to Memlenz # Memlenz is a space where code meets efficiency. Here, I document my journey through:\n🚀 Linux \u0026amp; Customization – Mastering Void Linux, dotfiles, and ricing.\n🛠️ DevOps \u0026amp; Automation – CI/CD, Docker, Kubernetes, and system optimization.\n🧠 DSA \u0026amp; Problem-Solving – Deep-diving into Data Structures \u0026amp; Algorithms.\n🌍 Web Development – Django, Hugo, APIs, and modern web stacks.\n🔥 What You’ll Find Here # Tutorials \u0026amp; Guides – Step-by-step resources for developers. Dev Logs – My personal notes on Linux, coding, and optimizations. Project Showcases – A portfolio of my experiments and builds. DSA Learning Path – Structured learning for better coding habits. \u0026ldquo;Code is like a lens—focus defines clarity.\u0026rdquo;\n🚀 Ready to Explore? # 🔍 Check out the latest tutorials\n💾 Discover my projects\n📚 Read the blog\nLet’s build, break, and optimize. 🖥️\n","date":"4 March 2025","externalUrl":null,"permalink":"/","section":"Memlenz – Code, DevOps \u0026 Linux Chronicles","summary":"","title":"Memlenz – Code, DevOps \u0026 Linux Chronicles","type":"page"},{"content":"","date":"4 March 2025","externalUrl":null,"permalink":"/courses/python/try-except/","section":"Courses","summary":"","title":"Try Except","type":"courses"},{"content":"","date":"4 March 2025","externalUrl":null,"permalink":"/fr/categories/cours-python/","section":"Categories","summary":"","title":"Cours Python","type":"categories"},{"content":"","date":"4 March 2025","externalUrl":null,"permalink":"/fr/tags/exceptions/","section":"Tags","summary":"","title":"Exceptions","type":"tags"},{"content":"","date":"4 March 2025","externalUrl":null,"permalink":"/fr/tags/try-...-except/","section":"Tags","summary":"","title":"Try ... Except","type":"tags"},{"content":"","date":"4 March 2025","externalUrl":null,"permalink":"/fr/tags/pip/","section":"Tags","summary":"","title":"PIP","type":"tags"},{"content":"","date":"4 March 2025","externalUrl":null,"permalink":"/courses/python/pip/","section":"Courses","summary":"","title":"PIP","type":"courses"},{"content":"","date":"4 March 2025","externalUrl":null,"permalink":"/fr/tags/module/","section":"Tags","summary":"","title":"Module","type":"tags"},{"content":"","date":"4 March 2025","externalUrl":null,"permalink":"/fr/tags/regex/","section":"Tags","summary":"","title":"RegEx","type":"tags"},{"content":"","date":"4 March 2025","externalUrl":null,"permalink":"/courses/python/module-regex/","section":"Courses","summary":"","title":"Module RegEx","type":"courses"},{"content":"","date":"4 March 2025","externalUrl":null,"permalink":"/courses/python/module-json/","section":"Courses","summary":"","title":"Module JSON","type":"courses"},{"content":"","date":"4 March 2025","externalUrl":null,"permalink":"/fr/tags/json/","section":"Tags","summary":"","title":"JSON","type":"tags"},{"content":"","date":"4 March 2025","externalUrl":null,"permalink":"/fr/tags/math/","section":"Tags","summary":"","title":"Math","type":"tags"},{"content":"","date":"4 March 2025","externalUrl":null,"permalink":"/courses/python/module-math/","section":"Courses","summary":"","title":"Module Math","type":"courses"},{"content":"","date":"4 March 2025","externalUrl":null,"permalink":"/courses/python/dates/","section":"Courses","summary":"","title":"Dates","type":"courses"},{"content":"","date":"4 March 2025","externalUrl":null,"permalink":"/fr/tags/dates/","section":"Tags","summary":"","title":"Dates","type":"tags"},{"content":"","date":"4 March 2025","externalUrl":null,"permalink":"/fr/tags/modules/","section":"Tags","summary":"","title":"Modules","type":"tags"},{"content":"","date":"4 March 2025","externalUrl":null,"permalink":"/courses/python/modules/","section":"Courses","summary":"","title":"Modules","type":"courses"},{"content":"","date":"3 March 2025","externalUrl":null,"permalink":"/courses/python/portee/","section":"Courses","summary":"","title":"Portee","type":"courses"},{"content":"","date":"3 March 2025","externalUrl":null,"permalink":"/fr/tags/port%C3%A9e/","section":"Tags","summary":"","title":"Portée","type":"tags"},{"content":"","date":"3 March 2025","externalUrl":null,"permalink":"/fr/tags/polymorphisme/","section":"Tags","summary":"","title":"Polymorphisme","type":"tags"},{"content":"","date":"3 March 2025","externalUrl":null,"permalink":"/courses/python/polymorphisme/","section":"Courses","summary":"","title":"Polymorphisme","type":"courses"},{"content":"","date":"3 March 2025","externalUrl":null,"permalink":"/courses/python/heritage/","section":"Courses","summary":"","title":"Heritage","type":"courses"},{"content":"","date":"3 March 2025","externalUrl":null,"permalink":"/fr/tags/heritage/","section":"Tags","summary":"","title":"Heritage","type":"tags"},{"content":"","date":"3 March 2025","externalUrl":null,"permalink":"/fr/tags/classes/","section":"Tags","summary":"","title":"Classes","type":"tags"},{"content":"","date":"3 March 2025","externalUrl":null,"permalink":"/fr/tags/objets/","section":"Tags","summary":"","title":"Objets","type":"tags"},{"content":"","date":"3 March 2025","externalUrl":null,"permalink":"/courses/python/classes/","section":"Courses","summary":"","title":"Classes","type":"courses"},{"content":"","date":"3 March 2025","externalUrl":null,"permalink":"/courses/python/array/","section":"Courses","summary":"","title":"Array","type":"courses"},{"content":"","date":"3 March 2025","externalUrl":null,"permalink":"/fr/tags/array/","section":"Tags","summary":"","title":"Array","type":"tags"},{"content":"","date":"27 February 2025","externalUrl":null,"permalink":"/fr/tags/lambda/","section":"Tags","summary":"","title":"Lambda","type":"tags"},{"content":"","date":"27 February 2025","externalUrl":null,"permalink":"/courses/python/lambda/","section":"Courses","summary":"","title":"Lambda","type":"courses"},{"content":"","date":"27 February 2025","externalUrl":null,"permalink":"/courses/python/fonction/","section":"Courses","summary":"","title":"Fonction","type":"courses"},{"content":"","date":"27 February 2025","externalUrl":null,"permalink":"/fr/tags/fonctions/","section":"Tags","summary":"","title":"Fonctions","type":"tags"},{"content":"","date":"27 February 2025","externalUrl":null,"permalink":"/fr/tags/for/","section":"Tags","summary":"","title":"For","type":"tags"},{"content":"","date":"27 February 2025","externalUrl":null,"permalink":"/fr/tags/while/","section":"Tags","summary":"","title":"While","type":"tags"},{"content":"","date":"27 February 2025","externalUrl":null,"permalink":"/courses/python/boucles/","section":"Courses","summary":"","title":"Boucles","type":"courses"},{"content":"","date":"27 February 2025","externalUrl":null,"permalink":"/courses/python/conditions/","section":"Courses","summary":"","title":"Conditions","type":"courses"},{"content":"","date":"27 February 2025","externalUrl":null,"permalink":"/fr/tags/conditions/","section":"Tags","summary":"","title":"Conditions","type":"tags"},{"content":"","date":"27 February 2025","externalUrl":null,"permalink":"/fr/tags/elif/","section":"Tags","summary":"","title":"Elif","type":"tags"},{"content":"","date":"27 February 2025","externalUrl":null,"permalink":"/fr/tags/else/","section":"Tags","summary":"","title":"Else","type":"tags"},{"content":"","date":"27 February 2025","externalUrl":null,"permalink":"/fr/tags/if/","section":"Tags","summary":"","title":"If","type":"tags"},{"content":"","date":"27 February 2025","externalUrl":null,"permalink":"/fr/tags/dictionnaires/","section":"Tags","summary":"","title":"Dictionnaires","type":"tags"},{"content":"","date":"27 February 2025","externalUrl":null,"permalink":"/courses/python/dictionnaires/","section":"Courses","summary":"","title":"Dictionnaires","type":"courses"},{"content":"","date":"27 February 2025","externalUrl":null,"permalink":"/courses/python/sets/","section":"Courses","summary":"","title":"Sets","type":"courses"},{"content":"","date":"27 February 2025","externalUrl":null,"permalink":"/fr/tags/sets/","section":"Tags","summary":"","title":"Sets","type":"tags"},{"content":"","date":"27 February 2025","externalUrl":null,"permalink":"/fr/tags/tuples/","section":"Tags","summary":"","title":"Tuples","type":"tags"},{"content":"","date":"27 February 2025","externalUrl":null,"permalink":"/courses/python/tuples/","section":"Courses","summary":"","title":"Tuples","type":"courses"},{"content":"","date":"27 February 2025","externalUrl":null,"permalink":"/courses/python/list/","section":"Courses","summary":"","title":"List","type":"courses"},{"content":"","date":"27 February 2025","externalUrl":null,"permalink":"/fr/tags/listes/","section":"Tags","summary":"","title":"Listes","type":"tags"},{"content":"","date":"27 February 2025","externalUrl":null,"permalink":"/fr/tags/op%C3%A9rateurs/","section":"Tags","summary":"","title":"Opérateurs","type":"tags"},{"content":"","date":"27 February 2025","externalUrl":null,"permalink":"/courses/python/operateurs/","section":"Courses","summary":"","title":"Operateurs","type":"courses"},{"content":"","date":"27 February 2025","externalUrl":null,"permalink":"/courses/python/booleen/","section":"Courses","summary":"","title":"Booleen","type":"courses"},{"content":"","date":"27 February 2025","externalUrl":null,"permalink":"/fr/tags/bool%C3%A9en/","section":"Tags","summary":"","title":"Booléen","type":"tags"},{"content":"","date":"27 February 2025","externalUrl":null,"permalink":"/courses/python/casting/","section":"Courses","summary":"","title":"Casting","type":"courses"},{"content":"","date":"27 February 2025","externalUrl":null,"permalink":"/courses/python/nombres/","section":"Courses","summary":"","title":"Nombres","type":"courses"},{"content":"","date":"27 February 2025","externalUrl":null,"permalink":"/courses/python/type-donnee/","section":"Courses","summary":"","title":"Type Donnee","type":"courses"},{"content":"","date":"27 February 2025","externalUrl":null,"permalink":"/courses/python/variables/","section":"Courses","summary":"","title":"Variables","type":"courses"},{"content":"","date":"27 February 2025","externalUrl":null,"permalink":"/fr/tags/cha%C3%AEnes/","section":"Tags","summary":"","title":"Chaînes","type":"tags"},{"content":"","date":"27 February 2025","externalUrl":null,"permalink":"/courses/python/strings/","section":"Courses","summary":"","title":"Strings","type":"courses"},{"content":"","date":"27 February 2025","externalUrl":null,"permalink":"/fr/tags/casting/","section":"Tags","summary":"","title":"Casting","type":"tags"},{"content":"","date":"27 February 2025","externalUrl":null,"permalink":"/fr/tags/nombres/","section":"Tags","summary":"","title":"Nombres","type":"tags"},{"content":"","date":"27 February 2025","externalUrl":null,"permalink":"/fr/tags/type-de-donn%C3%A9e/","section":"Tags","summary":"","title":"Type De Donnée","type":"tags"},{"content":"","date":"27 February 2025","externalUrl":null,"permalink":"/categories/","section":"Categories","summary":"","title":"Categories","type":"categories"},{"content":"","date":"27 February 2025","externalUrl":null,"permalink":"/tags/python/","section":"Tags","summary":"","title":"Python","type":"tags"},{"content":"","date":"27 February 2025","externalUrl":null,"permalink":"/categories/python-course/","section":"Categories","summary":"","title":"Python Course","type":"categories"},{"content":"","date":"27 February 2025","externalUrl":null,"permalink":"/tags/syntax/","section":"Tags","summary":"","title":"Syntax","type":"tags"},{"content":" 2. Syntax and Basics of the Language # Python stands out for its simple and readable syntax. In this section, we will cover the fundamentals of writing Python code.\n1. Indentation: A Mandatory Rule # Unlike other languages that use curly braces {} or keywords (begin / end), Python uses indentation to structure code.\n❌ Bad Example (Indentation Error) # if 5 \u0026gt; 2 : print(\u0026#34;Five is greater than 2\u0026#34;) # Error: Missing indentation! ✅ Correct Example # if 5 \u0026gt; 2: print(\u0026#34;Five is greater than 2\u0026#34;) # Correct indentation 📌 Rule: Indentation is usually 4 spaces per level (avoid mixed tabs).\n2. Variables and Data Types # A variable is a memory location where a value is stored. Python is dynamically typed, meaning it automatically detects variable types.\n📌 Declaration and Assignment # name = \u0026#34;Alice\u0026#34; # String age = 25 # Integer pi = 3.14 # Float is_active = True # Boolean 📌 Main Data Types in Python # Type Example Description str (string) \u0026quot;Hello\u0026quot; Text int (integer) 42 Whole number float (floating point) 3.14 Decimal number bool (boolean) True, False True or False list (list) [1, 2, 3] Mutable collection tuple (tuple) (1, 2, 3) Immutable collection dict (dictionary) {\u0026quot;name\u0026quot;: \u0026quot;Alice\u0026quot;, \u0026quot;age\u0026quot;: 25} Key-Value pair set (set) {\u0026quot;apple\u0026quot;, \u0026quot;banana\u0026quot;} Unique values set 3. Output and Comments # 📌 The print() Function # It allows displaying text or variables on the screen.\nprint(\u0026#34;Hello, world!\u0026#34;) name = \u0026#34;Alice\u0026#34; print(\u0026#34;Hello\u0026#34;, name) 👉 Output:\nHello, world! Hello Alice 📌 Comments # Comments help explain the code without being executed.\n✅ Single-line comment\n# This is a comment print(\u0026#34;Hello\u0026#34;) # Displaying a message ✅ Multi-line comment\n\u0026#34;\u0026#34;\u0026#34; This is a comment spanning multiple lines. \u0026#34;\u0026#34;\u0026#34; print(\u0026#34;Python is awesome!\u0026#34;) 📌 Summary:\n✔️ Python uses indentation to structure code.\n✔️ Variables are dynamic and can store different data types.\n✔️ The print() function allows displaying text.\n✔️ Comments help document code.\n💡 Ready for the next step? Let\u0026rsquo;s dive into operations and expressions in section 3! 🚀\n","date":"27 February 2025","externalUrl":null,"permalink":"/courses/python/syntaxe/","section":"Courses","summary":"","title":"Syntax and Basics of Python Language","type":"courses"},{"content":"","date":"27 February 2025","externalUrl":null,"permalink":"/tags/","section":"Tags","summary":"","title":"Tags","type":"tags"},{"content":"","date":"27 February 2025","externalUrl":null,"permalink":"/tags/variables/","section":"Tags","summary":"","title":"Variables","type":"tags"},{"content":"","date":"26 February 2025","externalUrl":null,"permalink":"/fr/tags/syntaxe/","section":"Tags","summary":"","title":"Syntaxe","type":"tags"},{"content":"","date":"25 February 2025","externalUrl":null,"permalink":"/tags/beginner/","section":"Tags","summary":"","title":"Beginner","type":"tags"},{"content":"","date":"25 February 2025","externalUrl":null,"permalink":"/fr/tags/d%C3%A9butant/","section":"Tags","summary":"","title":"Débutant","type":"tags"},{"content":"","date":"25 February 2025","externalUrl":null,"permalink":"/tags/introduction/","section":"Tags","summary":"","title":"Introduction","type":"tags"},{"content":" Introduction to Python # 1. What is Python? # Python is a high-level programming language known for its simplicity and readability. It is used in various fields:\n✅ Web development\n✅ Data Science and Machine Learning\n✅ Automation and scripting\n✅ Cybersecurity, etc.\nSome key characteristics of Python:\nInterpreted: The code runs line by line. Multi-paradigm: Supports procedural, object-oriented, and functional programming. Rich ecosystem: A vast collection of libraries (Django, NumPy, etc.). 👉 Recommended reading:\nThe Zen of Python 📜 Official Documentation 📚 2. Installing Python # Check if Python is already installed\nOpen a terminal and type: python --version Or, depending on your system: python3 --version Install Python\n📌 Windows/Mac: Download Python 📌 Linux (Debian/Ubuntu): sudo apt update \u0026amp;\u0026amp; sudo apt install python3 📌 Linux (Void Linux): sudo xbps-install -S python3 3. Testing the Python Interpreter # Once installed, let\u0026rsquo;s test the interpreter:\npython3 An interactive prompt appears:\n\u0026gt;\u0026gt;\u0026gt; print(\u0026#34;Hello, World!\u0026#34;) Hello, World! 💡 The Python interpreter allows real-time command execution, making it useful for quickly testing code.\n","date":"25 February 2025","externalUrl":null,"permalink":"/courses/python/introduction/","section":"Courses","summary":"","title":"Introduction to Python","type":"courses"},{"content":"","date":"16 February 2025","externalUrl":null,"permalink":"/fr/categories/blog-python/","section":"Categories","summary":"","title":"Blog Python","type":"categories"},{"content":"","date":"16 February 2025","externalUrl":null,"permalink":"/fr/blog/python/","section":"Langage","summary":"","title":"Blog Python","type":"blog"},{"content":" Pourquoi Python est un excellent premier langage ? # Je me souviens encore de mes premiers pas en programmation. J\u0026rsquo;avais ouvert un éditeur de code, prêt à écrire mes premières lignes\u0026hellip; et BAM ! Je suis tombé sur un bout de code en C plein d’accolades, de points-virgules et de trucs incompréhensibles. J\u0026rsquo;ai essayé de comprendre, mais j\u0026rsquo;avais l\u0026rsquo;impression de déchiffrer un langage alien.\nPuis, j’ai découvert Python.\nC’était simple, lisible, et surtout, ça fonctionnait direct sans prise de tête. Un vrai game-changer. Si t’es en train de chercher ton premier langage de programmation, laisse-moi t’expliquer pourquoi Python est LE meilleur choix.\n1. Une syntaxe qui ne te prend pas la tête # Quand tu débutes, t’as pas envie de te battre avec des syntaxes compliquées. Python, c\u0026rsquo;est littéralement du pseudo-code que même un humain normal peut lire. Pas besoin de gérer les accolades ou les déclarations de types à rallonge.\nRegarde ce bout de code en Python :\ndef dire_bonjour(nom): print(f\u0026#34;Salut, {nom}!\u0026#34;) dire_bonjour(\u0026#34;Toi\u0026#34;) C’est propre, net et sans fioritures. Maintenant, fais la même chose en Java ou C et prépare-toi à pleurer.\n2. Un couteau suisse pour tout faire # Quand t’apprends un langage, autant qu’il serve à quelque chose, non ? Python, tu peux l’utiliser pour tout :\nDéveloppement web (Django, Flask) Automatisation de tâches (scripts pour gagner du temps) Data science et machine learning (Pandas, TensorFlow) Cybersécurité (Pentesting, analyse de logs) Bref, c’est pas juste un langage \u0026ldquo;pour apprendre\u0026rdquo;, c’est un vrai outil que tu pourras utiliser longtemps.\n3. Une commu qui assure tes arrières # Un autre gros point fort de Python, c’est sa communauté. T’es bloqué ? Y’a forcément un mec qui a eu le même problème avant toi et qui a posté la réponse sur Stack Overflow.\nEt justement, sur memlenz, j’ai mis en place une section Cours où tu peux apprendre Python tranquillement, sans partir dans tous les sens.\n4. T’apprends les bases sans galérer # Quand tu commences à coder, t’as besoin d’un langage qui te laisse apprendre la logique avant de t’embrouiller avec les détails techniques.\nAvec Python, tu peux te concentrer sur l’essentiel :\n✅ Les variables, conditions, boucles\n✅ Les fonctions, la programmation orientée objet\n✅ La gestion des fichiers et des exceptions\nEt comme c’est un langage interprété, pas besoin de compiler à chaque test. Tu lances ton code et tu vois direct ce qui marche (ou ce qui casse).\n5. Python, c’est pas juste pour débuter # Certains pensent que Python, c’est juste pour les débutants. Faux ! Des boîtes comme Google, Netflix ou Tesla l’utilisent pour du dev sérieux. Ça veut dire que si tu deviens bon en Python, y’a moyen de l’utiliser dans des jobs hyper variés :\n🚀 Développeur Web\n📊 Data Scientist\n🔐 Expert en cybersécurité\n🤖 Ingénieur en intelligence artificielle\nDonc ouais, apprendre Python, c’est pas juste \u0026ldquo;pour commencer\u0026rdquo;, c’est aussi un investissement pour l’avenir.\nConclusion : Aller, il faut apprendre Python # Si j’avais dû commencer avec un autre langage, j’aurais peut-être abandonné en cours de route. Heureusement, Python m’a montré que coder pouvait être simple et fun.\nEt toi, si tu veux apprendre Python avec un cours structuré et bien expliqué, je t’ai préparé tout ça dans la section Cours du blog :\n👉 Accédez au cours Python ici\nAllez, à toi de jouer ! 🚀\n","date":"15 February 2025","externalUrl":null,"permalink":"/fr/blog/python/pourquoi-python/","section":"Langage","summary":"","title":"Pourquoi Python est un excellent premier langage ?","type":"blog"},{"content":"","date":"15 February 2025","externalUrl":null,"permalink":"/fr/categories/tutoriels/","section":"Categories","summary":"","title":"Tutoriels","type":"categories"},{"content":"","date":"15 February 2025","externalUrl":null,"permalink":"/tags/c++/","section":"Tags","summary":"","title":"C++","type":"tags"},{"content":"","date":"15 February 2025","externalUrl":null,"permalink":"/tags/java/","section":"Tags","summary":"","title":"Java","type":"tags"},{"content":"Dans ce coin du blog, nous allons plonger dans l\u0026rsquo;univers fascinant des langages de programmation. Découvrez les dernières tendances, les meilleures pratiques et les secrets des langages tels que : Python, Java, JavaScript et bien d\u0026rsquo;autres. Que vous soyez débutant ou expert, cette section est faite pour vous aider à améliorer vos compétences en programmation et à rester à jour avec les dernières évolutions du monde de la technologie.\n","date":"15 February 2025","externalUrl":null,"permalink":"/blog/","section":"Langage","summary":"","title":"Langage","type":"blog"},{"content":"","date":"15 February 2025","externalUrl":null,"permalink":"/fr/tags/d%C3%A9veloppement/","section":"Tags","summary":"","title":"Développement","type":"tags"},{"content":"","date":"15 February 2025","externalUrl":null,"permalink":"/fr/categories/exp%C3%A9rience-personnelle/","section":"Categories","summary":"","title":"Expérience Personnelle","type":"categories"},{"content":"","date":"15 February 2025","externalUrl":null,"permalink":"/fr/categories/informatique/","section":"Categories","summary":"","title":"Informatique","type":"categories"},{"content":"","date":"15 February 2025","externalUrl":null,"permalink":"/fr/tags/productivit%C3%A9/","section":"Tags","summary":"","title":"Productivité","type":"tags"},{"content":"","date":"15 February 2025","externalUrl":null,"permalink":"/categories/computer-science/","section":"Categories","summary":"","title":"Computer Science","type":"categories"},{"content":"","date":"15 February 2025","externalUrl":null,"permalink":"/tags/development/","section":"Tags","summary":"","title":"Development","type":"tags"},{"content":"","date":"15 February 2025","externalUrl":null,"permalink":"/tags/linux/","section":"Tags","summary":"","title":"Linux","type":"tags"},{"content":"","date":"15 February 2025","externalUrl":null,"permalink":"/categories/linux--open-source/","section":"Categories","summary":"","title":"Linux \u0026 Open Source","type":"categories"},{"content":"","date":"15 February 2025","externalUrl":null,"permalink":"/tags/open-source/","section":"Tags","summary":"","title":"Open Source","type":"tags"},{"content":"","date":"15 February 2025","externalUrl":null,"permalink":"/categories/personal-experience/","section":"Categories","summary":"","title":"Personal Experience","type":"categories"},{"content":"","date":"15 February 2025","externalUrl":null,"permalink":"/tags/productivity/","section":"Tags","summary":"","title":"Productivity","type":"tags"},{"content":" 1. The Turning Point: How I Won with Linux 🚀 # I didn’t switch to Linux because it was trendy. I switched because I was fed up with limitations.\nIt all started in my first year of computer science at the IUT of Parakou. A classmate had an insane desktop setup. It looked like a hacker\u0026rsquo;s dream. When I asked, he casually said,\n💬 \u0026ldquo;Oh, that\u0026rsquo;s just Kali Linux.\u0026rdquo;\nThat was the first time I saw an OS that wasn’t Windows. Back in 2023, Windows 10 was the standard, and I never questioned it. But after that encounter, my curiosity kicked in.\nI installed Kali Linux on VirtualBox and started tinkering. The command line immediately hooked me it was powerful, direct, efficient. I even avoided the GUI, trying to do everything in CLI. It felt like hacking the system, but for real.\nBut I had a problem:\n🛑 I was still stuck on Windows for coding, testing, and studying.\nThen, one day, Windows broke me.\nI was working on a C project, but I couldn\u0026rsquo;t type \u0026lt; and \u0026gt; properly. Instead of just pressing two keys, I had to either open the on-screen keyboard or memorize awkward combinations (Alt+60, Alt+62). Ridiculous.\nFrustrated, I searched for solutions and came across a Linux dev’s tutorial. Out of curiosity, I tested his setup and discovered:\nShift + Alt + W for \u0026lt; and Shift + Alt + X for \u0026gt;.\nThat was it.\n💥 The moment I decided I would never code on Windows again.\nI started using WSL (Windows Subsystem for Linux), then dual-booted Linux, until I finally wiped Windows completely. And I’ve never looked back.\n2. The Frustrations I Left Behind ❌ # ❌ No control – Windows and macOS dictate how you use your system. I wanted freedom.\n❌ Performance issues – Windows slows down with every update. Linux stays fast and efficient.\n❌ Bloatware \u0026amp; background processes – I hated unnecessary software eating up resources.\n❌ Forced updates – Windows decides when to restart. Linux lets me be in control.\nSwitching to Linux wasn’t just about the OS. It was about taking full ownership of my computing experience.\n3. What I Gained with Linux 🏆 # ✅ Speed \u0026amp; efficiency – My system runs like a dream. No lag, no random slowdowns.\n✅ Total customization – Everything is built to fit my workflow perfectly.\n✅ Privacy \u0026amp; security – No forced telemetry. No hidden data collection.\n✅ A hacker mindset – Learning Linux taught me how computers actually work.\nLinux didn’t just change my OS. It changed how I think about technology.\n4. My Linux Journey: From Chaos to Mastery 🛤️ # I didn’t master Linux overnight. I broke my system countless times, reinstalled everything, and experimented like crazy.\nHere’s how my Linux evolution went:\nKali Linux – My first experience, but too niche for daily use. Ubuntu WSL \u0026amp; MX Linux – First real steps into the Linux world. Linux Mint – User-friendly, but too bloated for me. Arch Linux – Full control, but installation was brutal. Void Linux – My final choice: fast, minimal, and powerful. Every mistake I made taught me something new.\n5. The Game-Changing Discoveries 💡 # 💡 Tiling Window Managers (i3, bspwm) → My workflow became lightning fast.\n💡 Package Management – Learning Pacman (Arch), APT (Debian), XBPS (Void).\n💡 Dotfiles \u0026amp; Minimalist Configs – Customizing my environment to perfection.\nEach of these boosted my productivity and efficiency beyond what I thought was possible.\n6. Why Void Linux Won Me Over 🏆 # 💨 Super lightweight – No unnecessary services slowing me down.\n⚡ XBPS package manager – Faster and simpler than APT or Pacman.\n🚀 No systemd – More control over my init system.\n🔄 Rolling release – Always up to date without breaking my setup.\nVoid Linux isn’t for everyone. But for power users who want simplicity and speed, it’s unbeatable.\n7. Why You Should Consider Linux in 2025 📅 # 💡 Stop depending on Big Tech companies controlling your system.\n💡 Get real performance gains – No forced obsolescence.\n💡 Own your data – No background tracking, telemetry, or forced cloud sync.\n💡 Join an open-source revolution – A community built on collaboration.\nWindows and macOS are products.\nLinux is a philosophy.\n8. My Advice for Linux Newcomers 🎯 # 🟢 Start with the right distro – Ubuntu/Mint if you\u0026rsquo;re new, Arch/Void if you love tinkering.\n🟢 Learn the terminal – cd, ls, mv, grep will change your life.\n🟢 Break things \u0026amp; learn – Don\u0026rsquo;t be afraid to experiment.\n🟢 Join a community – Reddit, Discord, Linux forums are goldmines of knowledge.\n🟢 Optimize your workflow – Neovim, Tmux, Fish/Zsh, and dotfiles will take you to the next level.\n9. Conclusion: More Than Just an OS 🔥 # Linux isn’t just software it’s a way of thinking. It forces you to understand your system, customize it, and push it to its full potential.\n💡 If you’re tired of closed ecosystems, slow performance, and restrictions, Linux is your way out.\n🔥 Follow my journey as I share tutorials, configurations, and deep dives into the Linux world.\n🚀 Ready to break free? Let’s hack the system! 🚀\n","date":"15 February 2025","externalUrl":null,"permalink":"/blog/why-linux/why-linux-made-me-win/","section":"Langage","summary":"","title":"Why Linux","type":"blog"},{"content":"","date":"15 February 2025","externalUrl":null,"permalink":"/portfolio/project2/","section":"Portfolio","summary":"","title":"Project2","type":"portfolio"},{"content":"","date":"15 February 2025","externalUrl":null,"permalink":"/portfolio/project1/","section":"Portfolio","summary":"","title":"Project1","type":"portfolio"},{"content":"","date":"15 February 2025","externalUrl":null,"permalink":"/tags/portfolio/","section":"Tags","summary":"","title":"Portfolio","type":"tags"},{"content":" Châ-Fine Ayédoun ADEBI # IT Analyst\nPortfolio | GitHub | Email\nAbout Me # Hi! I\u0026rsquo;m Châ-Fine Ayedoun, a tech enthusiast with a strong passion for software development, performance optimization, and scalability. Currently pursuing a Bachelor\u0026rsquo;s degree in Computer Science, I am constantly looking for new challenges and opportunities to expand my skills and work on innovative projects.\nMy goal is to become a versatile developer, capable of contributing to complex back-end projects, improving system performance, and ensuring scalability. I am also deeply interested in open source and artificial intelligence.\nSkills # Programming Languages # Python, Java, C++, HTML/CSS Frameworks \u0026amp; Tools # Django, Hugo, Qt Creator Development Environments # Linux (Void Linux), Git, Wireshark, LazyVim, i3wm, Alacritty, Rofi, Picom Fields of Interest # Application Scalability Performance Optimization AI Development DevOps \u0026amp; Deployment Automation Languages # French (native) English (intermediate) Projects # Library Management System # Technologies: Java, C++, Qt Creator\nDescription:\nI designed and developed a comprehensive library management system, focusing on optimizing the structure and performance compared to existing solutions. This project helped me deepen my knowledge in database management, search algorithms, and cross-platform development.\nView Project on GitHub\nBlog with Hugo \u0026amp; GitHub Pages # Technologies: Hugo, GitHub Pages\nDescription:\nThis blog was created to share resources, tutorials, and my thoughts on technology. Through this project, I explored static site generators, code modularity, and web performance optimization. It also serves as a great personal project where I strengthened my web development skills.\nVisit the Blog\nArtificial Intelligence with AIMA Python # Technologies: Python, AIMA Python\nDescription:\nThis project allowed me to explore various artificial intelligence algorithms using the AIMA Python library, focusing on techniques like informed search, neural networks, and automated planning. I deepened my skills in algorithms and complex problem-solving through this project.\nView Project on GitHub\nExperience # Although I am still a student, I have participated in various academic and personal projects that have given me a solid understanding of software development fundamentals. I am always looking for opportunities to apply these skills in real-world professional contexts.\nTestimonials # \u0026ldquo;Châ-Fine is an extremely skilled and autonomous developer. His work on the library management project exceeded our expectations in terms of performance and modularity.\u0026rdquo;\n– Project Lead, Computer Science Department\n\u0026ldquo;His rigor and passion for open source make him a valuable asset to any development team. He solves problems in an innovative and efficient way.\u0026rdquo;\n– Project Teammate, Web Development\nContact # If you’d like to discuss my projects, ask questions, or collaborate on new challenges, feel free to contact me.\nEmail: achafine@gmail.com\nGitHub: memlenz\nPortfolio: https://memlenz.github.io/\n","date":"15 February 2025","externalUrl":null,"permalink":"/portfolio/","section":"Portfolio","summary":"","title":"Portfolio","type":"portfolio"},{"content":"","date":"15 February 2025","externalUrl":null,"permalink":"/tutorials/hugo-setup/","section":"Tutorials","summary":"","title":"Hugo Setup","type":"tutorials"},{"content":"","date":"15 February 2025","externalUrl":null,"permalink":"/tutorials/git-workflows/","section":"Tutorials","summary":"","title":"Git Workflows","type":"tutorials"},{"content":"","date":"15 February 2025","externalUrl":null,"permalink":"/tutorials/git-workflows/git-commands/","section":"Tutorials","summary":"","title":"Git Commands","type":"tutorials"},{"content":"","date":"15 February 2025","externalUrl":null,"permalink":"/tutorials/","section":"Tutorials","summary":"","title":"Tutorials","type":"tutorials"},{"content":"","date":"15 February 2025","externalUrl":null,"permalink":"/parcours/","section":"Parcours","summary":"","title":"Parcours","type":"parcours"},{"content":" 📚 Courses # Welcome to the Courses section of memlenz! Here, you will find detailed and structured courses to learn and deepen your knowledge in computer science.\n📌 Objective # The goal of this section is to provide a progressive and rigorous learning experience covering:\nProgramming fundamentals: Understanding the basics of languages and paradigms. Data structures and algorithms: Developing solid reflexes to efficiently solve problems. Web development and DevOps: Mastering modern tools and best practices to build and deploy applications. 🏆 Who is this section for? # Whether you are a beginner or an experienced developer, these courses will guide you with a clear and educational approach while deepening essential technical aspects.\n📖 Content # The courses are organized by categories and levels and include:\nDetailed and illustrated explanations. Concrete examples and practical code. Exercises and challenges to test your skills. 🚀 Start Your Learning Journey # Browse through the different categories and find the course that matches your level and goals. Happy learning! 🔥\n","date":"15 February 2025","externalUrl":null,"permalink":"/courses/","section":"Courses","summary":"","title":"Courses","type":"courses"},{"content":"","date":"15 February 2025","externalUrl":null,"permalink":"/blog/dsa-guide/dsa-intro/","section":"Langage","summary":"","title":"DSA","type":"blog"},{"content":"","externalUrl":null,"permalink":"/authors/","section":"Authors","summary":"","title":"Authors","type":"authors"},{"content":"","externalUrl":null,"permalink":"/series/","section":"Series","summary":"","title":"Series","type":"series"}]