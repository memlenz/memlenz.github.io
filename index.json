


[{"content":" Cr√©er un Gestionnaire de Mots de Passe en CLI avec Python # Dans un monde o√π la s√©curit√© de nos informations personnelles est devenue incontournable, j\u0026rsquo;ai voulu r√©aliser un projet simple mais efficace : un gestionnaire de mots de passe en ligne de commande (CLI). Cet outil, d√©velopp√© en Python, permet de g√©n√©rer des mots de passe robustes, de les sauvegarder dans un fichier JSON et de les manipuler via une interface textuelle intuitive. Dans cet article, je vous montre comment quelques dizaines de lignes de code bien structur√©es peuvent mettre en ≈ìuvre des concepts avanc√©s en programmation et en s√©curit√©.\nLe Contexte et le Probl√®me # Nous utilisons quotidiennement de nombreux mots de passe pour prot√©ger nos comptes et nos donn√©es sensibles. Il devient alors crucial de disposer d‚Äôun outil qui aide √† :\nG√©n√©rer des mots de passe s√©curis√©s : En combinant al√©atoirement des lettres, des chiffres et des caract√®res sp√©ciaux. G√©rer et stocker ces mots de passe : Afin d‚Äô√©viter la r√©utilisation de mots de passe faibles ou la perte de ceux-ci. Faciliter l‚Äôacc√®s : En permettant de r√©cup√©rer rapidement le mot de passe associ√© √† un compte via une interface en ligne de commande. Traditionnellement, les solutions existantes peuvent √™tre lourdes ou complexes pour un usage personnel. C‚Äôest l√† qu‚Äôintervient notre gestionnaire de mots de passe en CLI : il est l√©ger, personnalisable et enti√®rement r√©alis√© en Python.\nLa Solution : passwordManager.py # Le script passwordManager.py propose une solution compl√®te en offrant les fonctionnalit√©s suivantes :\nG√©n√©ration de mots de passe s√©curis√©s\nGr√¢ce au module secrets, le programme cr√©e des mots de passe forts en combinant lettres, chiffres et caract√®res sp√©ciaux.\nSauvegarde et chargement via JSON\nLes mots de passe sont stock√©s dans un fichier JSON. Le code g√®re intelligemment les erreurs li√©es √† la lecture du fichier (fichier inexistant ou corrompu) pour assurer une robustesse accrue.\nInterface en Ligne de Commande avec argparse\nUne interface intuitive permet √† l‚Äôutilisateur d‚Äôenregistrer, r√©cup√©rer, supprimer et lister les mots de passe gr√¢ce √† des commandes claires (save, get, del, gen, list).\nUtilisation du Presse-papiers\nL‚Äôint√©gration du module pyperclip permet de copier automatiquement le mot de passe r√©cup√©r√© dans le presse-papiers, ce qui simplifie son utilisation.\nVoici un extrait de la structure du code :\ndef generate_password(): \u0026#34;\u0026#34;\u0026#34;G√©n√©rer un mot de passe s√©curis√©\u0026#34;\u0026#34;\u0026#34; characters = \u0026#39;\u0026#39; if NEED_STRING: characters += string.ascii_letters if NEED_DIGITS: characters += string.digits if NEED_SPECIAL_CHARACTERS: characters += string.punctuation return \u0026#39;\u0026#39;.join(secrets.choice(characters) for _ in range(PASSWORD_LENGTH)) Ce passage montre la fa√ßon dont la g√©n√©ration de mot de passe est r√©alis√©e en tirant profit de la s√©curit√© offerte par le module secrets.\nComp√©tences Python D√©montr√©es # 1. Programmation modulaire et proc√©durale # Organisation claire du code : Chaque fonctionnalit√© (g√©n√©ration, sauvegarde, chargement, suppression) est impl√©ment√©e dans une fonction d√©di√©e, facilitant la maintenance et l\u0026rsquo;√©volution du projet. Point d\u0026rsquo;entr√©e principal : La fonction main() centralise l\u0026rsquo;ex√©cution du script en s\u0026rsquo;appuyant sur le module argparse pour g√©rer diff√©rentes commandes. 2. Gestion des Exceptions et Robustesse du Code # Anticipation des erreurs : La fonction load_passwords() int√®gre des blocs try-except pour g√©rer les erreurs li√©es √† la manipulation de fichiers JSON, assurant la continuit√© de l‚Äôex√©cution m√™me en cas de probl√®mes. 3. Manipulation de fichiers avec JSON # Stockage des donn√©es : La s√©rialisation et la d√©s√©rialisation des mots de passe dans un fichier JSON permettent une persistance simple des donn√©es, tout en restant facilement consultables et modifiables. 4. S√©curit√© et G√©n√©ration de Mots de Passe # Utilisation du module secrets : Cette m√©thode offre une robustesse in√©gal√©e dans la g√©n√©ration de cha√Ænes al√©atoires, essentielles pour la s√©curit√© des comptes. Configuration flexible : Les constantes en haut du script permettent d‚Äôajuster rapidement la longueur des mots de passe et le type de caract√®res utilis√©s, pour r√©pondre √† divers besoins de s√©curit√©. 5. Interface en Ligne de Commande # Convivialit√© : Gr√¢ce √† argparse, l‚Äôutilisateur peut interagir avec le programme en utilisant des commandes simples et explicites, rendant l‚Äôoutil accessible m√™me aux d√©butants. Applications et Perspectives # Ce gestionnaire de mots de passe en CLI repr√©sente bien plus qu‚Äôun exercice de programmation. En le d√©veloppant, j\u0026rsquo;ai pu approfondir ma ma√Ætrise de la s√©curit√© appliqu√©e, de la gestion d\u0026rsquo;erreurs et des techniques de manipulation de donn√©es en Python.\nDans un contexte professionnel ou personnel, un tel outil peut servir de base √† des projets plus ambitieux, par exemple :\nInt√©grer un chiffrement du fichier JSON pour renforcer la protection des donn√©es sensibles. Mettre en place un syst√®me de logging pour mieux diagnostiquer et r√©soudre d\u0026rsquo;√©ventuels probl√®mes en production. D√©velopper une interface graphique pour rendre l‚Äôoutil accessible √† un public non technique. Conclusion # R√©ussir √† cr√©er un gestionnaire de mots de passe en CLI avec Python est une belle d√©monstration de l\u0026rsquo;application concr√®te de diverses comp√©tences en programmation. Ce projet prouve qu\u0026rsquo;avec une bonne architecture de code et une attention particuli√®re port√©e √† la s√©curit√© et √† la robustesse, il est tout √† fait possible de d√©velopper des outils efficaces et utiles pour notre quotidien num√©rique.\nQuelles fonctionnalit√©s ajouteriez-vous √† ce gestionnaire de mots de passe ? Partagez vos id√©es et vos retours dans les commentaires. Ensemble, continuons √† repousser les limites de ce que nous pouvons r√©aliser avec Python !\nüìå Suivez-moi pour plus de contenus sur Python et le d√©veloppement logiciel !\nüëâ Dev.to / GitHub / Twitter\n","date":"13 April 2025","externalUrl":null,"permalink":"/blog/python/passwordmanager/","section":"Langage","summary":"","title":"üîí Cr√©er un Gestionnaire de Mots de Passe en CLI avec Python","type":"blog"},{"content":"","date":"13 April 2025","externalUrl":null,"permalink":"/categories/","section":"Categories","summary":"","title":"Categories","type":"categories"},{"content":"","date":"13 April 2025","externalUrl":null,"permalink":"/tags/cli/","section":"Tags","summary":"","title":"CLI","type":"tags"},{"content":"","date":"13 April 2025","externalUrl":null,"permalink":"/tags/gestion-de-mots-de-passe/","section":"Tags","summary":"","title":"Gestion De Mots De Passe","type":"tags"},{"content":" üë®‚Äçüíª Welcome to Memlenz # Memlenz is a space where code meets efficiency. Here, I document my journey through:\nüöÄ Linux \u0026amp; Customization ‚Äì Mastering Void Linux, dotfiles, and ricing.\nüõ†Ô∏è DevOps \u0026amp; Automation ‚Äì CI/CD, Docker, Kubernetes, and system optimization.\nüß† DSA \u0026amp; Problem-Solving ‚Äì Deep-diving into Data Structures \u0026amp; Algorithms.\nüåç Web Development ‚Äì Django, Hugo, APIs, and modern web stacks.\nüî• What You‚Äôll Find Here # Tutorials \u0026amp; Guides ‚Äì Step-by-step resources for developers. Dev Logs ‚Äì My personal notes on Linux, coding, and optimizations. Project Showcases ‚Äì A portfolio of my experiments and builds. DSA Learning Path ‚Äì Structured learning for better coding habits. \u0026ldquo;Code is like a lens‚Äîfocus defines clarity.\u0026rdquo;\nüöÄ Ready to Explore? # Let‚Äôs build, break, and optimize. üñ•Ô∏è\n","date":"13 April 2025","externalUrl":null,"permalink":"/","section":"Memlenz ‚Äì Code, DevOps \u0026 Linux Chronicles","summary":"","title":"Memlenz ‚Äì Code, DevOps \u0026 Linux Chronicles","type":"page"},{"content":"","date":"13 April 2025","externalUrl":null,"permalink":"/categories/projets-python/","section":"Categories","summary":"","title":"Projets Python","type":"categories"},{"content":"","date":"13 April 2025","externalUrl":null,"permalink":"/tags/python/","section":"Tags","summary":"","title":"Python","type":"tags"},{"content":"","date":"13 April 2025","externalUrl":null,"permalink":"/tags/","section":"Tags","summary":"","title":"Tags","type":"tags"},{"content":"","date":"10 April 2025","externalUrl":null,"permalink":"/fr/categories/blog-python/","section":"Categories","summary":"","title":"Blog Python","type":"categories"},{"content":"","date":"10 April 2025","externalUrl":null,"permalink":"/fr/tags/installation/","section":"Tags","summary":"","title":"Installation","type":"tags"},{"content":" Pourquoi installer Python ? # Avant de se lancer dans la programmation avec Python, il faut d\u0026rsquo;abord l\u0026rsquo;avoir sur sa machine. Contrairement √† certains langages qui viennent d√©j√† int√©gr√©s aux syst√®mes d‚Äôexploitation, Python doit √™tre install√© manuellement sur Windows, et parfois mis √† jour sur Linux et macOS.\nInstaller Python sur Windows üñ•Ô∏è # Sur Windows, Python n\u0026rsquo;est pas install√© par d√©faut. Voici comment l\u0026rsquo;obtenir :\n1. T√©l√©charger Python # Rendez-vous sur le site officiel : python.org. Prenez la derni√®re version stable (√©vitez les versions en b√™ta). T√©l√©chargez l‚Äôinstallateur Windows Installer (64-bit). 2. Lancer l‚Äôinstallation # Cochez l‚Äôoption \u0026ldquo;Add Python to PATH\u0026rdquo; avant d‚Äôinstaller.\n(C\u0026rsquo;est crucial pour pouvoir ex√©cuter python dans le terminal sans gal√®re.) Cliquez sur \u0026ldquo;Install Now\u0026rdquo; et laissez faire. 3. V√©rifier l‚Äôinstallation # Ouvrez une invite de commande (Win + R ‚Üí tapez cmd ‚Üí Entr√©e).\nTapez :\npython --version Si √ßa affiche une version comme Python 3.x.x, tout est bon ! üéâ\nSi √ßa ne marche pas, votre terminal ne trouve pas Python. Dans ce cas, red√©marrez votre PC ou ajoutez manuellement Python au PATH.\nInstaller Python sur Linux üêß # La plupart des distributions Linux viennent avec Python pr√©install√©. Pour v√©rifier :\npython3 --version Si Python n\u0026rsquo;est pas install√© ou si vous voulez la derni√®re version :\nDebian / Ubuntu # sudo apt update \u0026amp;\u0026amp; sudo apt install python3 Arch Linux # sudo pacman -S python Void Linux # sudo xbps-install -S python3 Une fois install√©, testez avec python3 --version.\nInstaller Python sur macOS üçè # Sur Mac, Python est d√©j√† install√©, mais souvent en version ancienne. Mieux vaut utiliser Homebrew pour une version √† jour :\n1. Installer Homebrew (si ce n\u0026rsquo;est pas fait) # /bin/bash -c \u0026#34;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\u0026#34; 2. Installer Python # brew install python V√©rifiez ensuite avec :\npython3 --version Conclusion üèÅ # ‚úÖ Windows ‚Üí T√©l√©chargement manuel + \u0026ldquo;Add to PATH\u0026rdquo;.\n‚úÖ Linux ‚Üí V√©rifier puis installer via apt, pacman ou xbps-install.\n‚úÖ Mac ‚Üí Homebrew pour g√©rer les versions.\nSi tout est bon, vous √™tes pr√™t √† coder ! üöÄ\n","date":"10 April 2025","externalUrl":null,"permalink":"/fr/blog/python/installation-python/","section":"Langage","summary":"","title":"Installer Python sur Windows, Linux et Mac","type":"blog"},{"content":"","date":"10 April 2025","externalUrl":null,"permalink":"/fr/tags/mac/","section":"Tags","summary":"","title":"Mac","type":"tags"},{"content":"","date":"10 April 2025","externalUrl":null,"permalink":"/fr/tags/windows/","section":"Tags","summary":"","title":"Windows","type":"tags"},{"content":" Mastering Text Manipulation with Python: Building a Bullet Point Formatter # In today\u0026rsquo;s digital workplace, formatting text quickly and efficiently can save precious time. As a Python developer, I recently created a utility tool that demonstrates how a few lines of Python code can streamline everyday tasks. Let me walk you through my bullet point formatter script and highlight the Python skills it showcases.\nThe Problem # We\u0026rsquo;ve all been there - copying text from various sources that needs reformatting before use. Perhaps you\u0026rsquo;re extracting items from an email, document, or webpage and need to transform them into a clean, bulleted list. Doing this manually is tedious, especially with longer texts.\nThe Solution: bulletPointAdder.py # My solution is a simple yet powerful Python script that takes text from your clipboard, formats each line with bullet points, and places the result back in your clipboard - ready to paste wherever you need it.\n#!/usr/bin/env python3 # -*- coding: utf-8 -*- \u0026#34;\u0026#34;\u0026#34; Nom du fichier : bulletPointAdder.py Description : Formate du texte pour obtenir une liste √† puce Auteur : ADEBI Ch√¢-Fine Ay√©doun achafine@gmail.com Date : 2025-04-08 \u0026#34;\u0026#34;\u0026#34; Python Skills Demonstrated # 1. Working with External Libraries # The script uses pyperclip, a third-party library that provides cross-platform clipboard functionality:\nimport pyperclip This demonstrates knowledge of Python\u0026rsquo;s ecosystem and how to leverage existing libraries to extend functionality without reinventing the wheel.\n2. Regular Expressions Mastery # One of the most powerful features of the script is its text processing capability using regular expressions:\nREGEX = r\u0026#39;^[\\d\\.\\)\\s\\-_]+\u0026#39; # Pattern to match various numbering formats line = re.sub(REGEX, \u0026#39;\u0026#39;, line) This regex pattern identifies and removes different types of numbering or bullet formats that might already exist in the text. It handles numbered lists (like \u0026ldquo;1. Item\u0026rdquo;), parenthetical numbering (like \u0026ldquo;1) Item\u0026rdquo;), and various bullet styles.\n3. Constants for Configuration # The script uses constants to make configuration changes easy and centralized:\n# Constantes BULLET = \u0026#39;.\u0026#39; # Vos nouvelles lignes peuvent commencer par: \u0026#39;‚Ä¢\u0026#39;, \u0026#39;-\u0026#39;, \u0026#39;*\u0026#39;, \u0026#39;‚Üí\u0026#39; REGEX = r\u0026#39;^[\\d\\.\\)\\s\\-_]+\u0026#39; # Vous pouvez changer le la logique des lignes This approach follows the principle of separating configuration from logic, making the code more maintainable.\n4. Function Decomposition and Clean Code Principles # The script is divided into clear, single-purpose functions:\ndef paste_from_clipboard() -\u0026gt; str: \u0026#34;\u0026#34;\u0026#34;On r√©cup√®re le contenu du clipboard\u0026#34;\u0026#34;\u0026#34; def bullet_point_adder() -\u0026gt; str: \u0026#34;\u0026#34;\u0026#34;On modifie chaque ligne pour en faire des listes √† puces\u0026#34;\u0026#34;\u0026#34; def paste_to_clipboard() -\u0026gt; None: \u0026#34;\u0026#34;\u0026#34;On copie le contenu dans le clipboard\u0026#34;\u0026#34;\u0026#34; Each function has a clear responsibility, making the code easier to understand, test, and maintain.\n5. Type Hints # The code uses Python\u0026rsquo;s type hints to indicate function return types:\ndef paste_from_clipboard() -\u0026gt; str: This makes the code more self-documenting and allows for better tooling support and error detection.\n6. String Manipulation and Formatting # The script demonstrates proficiency with string operations:\nline = f\u0026#39;{BULLET} {line}\u0026#39; # f-strings for clean string formatting return \u0026#39;\\n\u0026#39;.join(formated_lines) # Joining lists into strings welcome.center(len(welcome) + 5, \u0026#39;*\u0026#39;) # String alignment and padding These techniques show knowledge of Python\u0026rsquo;s rich string manipulation capabilities.\n7. List Comprehension and Iteration # While not using list comprehensions directly, the code effectively processes lists through iteration:\nformated_lines = [] for line in list_content: # Processing logic formated_lines.append(line) 8. Error Handling # The main execution block includes proper exception handling:\ntry: # Main processing except Exception as e: print(f\u0026#34;Erreur : {str(e)}\u0026#34;) This ensures the script gracefully handles potential errors rather than crashing.\n9. Docstrings and Documentation # Every function includes proper docstrings explaining its purpose:\ndef bullet_point_adder() -\u0026gt; str: \u0026#34;\u0026#34;\u0026#34;On modifie chaque ligne pour en faire des listes √† puces\u0026#34;\u0026#34;\u0026#34; Additionally, the script header provides metadata about the author, purpose, and date.\n10. Proper Program Structure # The script follows the Python convention of using the if __name__ == \u0026quot;__main__\u0026quot;: guard to separate executable code from importable modules:\nif __name__ == \u0026#34;__main__\u0026#34;: # Execution code here This allows the script to be imported as a module without executing the main functionality.\nReal-World Application # This script may be simple, but it demonstrates how Python can be used to automate routine tasks. For example, if you\u0026rsquo;re preparing a presentation and need to format a list of items, or if you\u0026rsquo;re taking notes and want to quickly convert them to a bulleted format, this tool saves time and ensures consistency.\nConclusion # Building small utility scripts like bulletPointAdder.py is an excellent way to sharpen your Python skills while creating tools that make your daily workflow more efficient. The script showcases a range of Python techniques from basic string manipulation to regular expressions, all wrapped in a clean, well-structured program.\nWhat everyday tasks do you automate with Python? I\u0026rsquo;d love to hear about your utility scripts in the comments!\n#!/usr/bin/env python3 # -*- coding: utf-8 -*- \u0026#34;\u0026#34;\u0026#34; Nom du fichier : bulletPointAdder.py Description : Formate du texte pour obtenir une liste √† puce Auteur : ADEBI Ch√¢-Fine Ay√©doun achafine@gmail.com Date : 2025-04-08 \u0026#34;\u0026#34;\u0026#34; import re import pyperclip # Constantes BULLET = \u0026#39;.\u0026#39; # Vos nouvelles lignes peuvent commencer par: \u0026#39;‚Ä¢\u0026#39;, \u0026#39;-\u0026#39;, \u0026#39;*\u0026#39;, \u0026#39;‚Üí\u0026#39; REGEX = r\u0026#39;^[\\d\\.\\)\\s\\-_]+\u0026#39; # Vous pouvez changer le la logique des lignes def paste_from_clipboard() -\u0026gt; str: \u0026#34;\u0026#34;\u0026#34;On r√©cup√®re le contenu du clipboard\u0026#34;\u0026#34;\u0026#34; return pyperclip.paste() def bullet_point_adder() -\u0026gt; str: \u0026#34;\u0026#34;\u0026#34;On modifie chaque ligne pour en faire des listes √† puces\u0026#34;\u0026#34;\u0026#34; content = paste_from_clipboard().strip() # On convertis le contenu en liste list_content = content.split(\u0026#39;\\n\u0026#39;) # Formatage des lignes formated_lines = [] for line in list_content: line = line.strip() # Gestion des lignes vides if not line: formated_lines.append(line) continue # Gestion des lignes qui commencent par des chiffres line = re.sub(REGEX, \u0026#39;\u0026#39;, line) # Ajout des puces if not line.startswith(BULLET): line = f\u0026#39;{BULLET} {line}\u0026#39; formated_lines.append(line) return \u0026#39;\\n\u0026#39;.join(formated_lines) def paste_to_clipboard() -\u0026gt; None: \u0026#34;\u0026#34;\u0026#34;On copie le contenu dans le clipboard\u0026#34;\u0026#34;\u0026#34; pyperclip.copy(bullet_point_adder()) if __name__ == \u0026#34;__main__\u0026#34;: welcome = \u0026#34;Welcome to the Bullet Point Adder\u0026#34; print(welcome.center(len(welcome) + 5, \u0026#39;*\u0026#39;)) try: print(\u0026#34;Processing\u0026#34;.ljust(len(welcome)+5, \u0026#39;.\u0026#39;)) paste_to_clipboard() print(\u0026#34;successfully paste\u0026#34;.center(len(welcome) + 5, \u0026#39;*\u0026#39;)) except Exception as e: print(f\u0026#34;Erreur : {str(e)}\u0026#34;) üìå Follow me for more Python and dev content!\nüëâ [Dev.to / GitHub / Twitter Profile]\n","date":"9 April 2025","externalUrl":null,"permalink":"/blog/python/bulletpointadder/","section":"Langage","summary":"","title":"üéØ Impl√©mentation d'un foramateur de texte en python","type":"blog"},{"content":"","date":"9 April 2025","externalUrl":null,"permalink":"/tags/algorithmie/","section":"Tags","summary":"","title":"Algorithmie","type":"tags"},{"content":"","date":"5 April 2025","externalUrl":null,"permalink":"/fr/tags/d%C3%A9butant/","section":"Tags","summary":"","title":"D√©butant","type":"tags"},{"content":"","date":"5 April 2025","externalUrl":null,"permalink":"/fr/tags/interpr%C3%A9teur/","section":"Tags","summary":"","title":"Interpr√©teur","type":"tags"},{"content":" Pourquoi Python doit √™tre install√© pour fonctionner ? # Quand tu t√©l√©charges un jeu, tu cliques sur un .exe et √ßa marche direct. Mais si tu t√©l√©charges un script Python (.py), double-cliquer dessus ne fonctionne pas toujours comme pr√©vu. Pourquoi ? Parce que Python n\u0026rsquo;est pas un logiciel comme les autres.\nUn ordinateur ne comprend pas Python # Ton processeur parle binaire (du 0 et du 1), et il ne comprend que des instructions en langage machine.\nLe probl√®me, c\u0026rsquo;est que Python est √©crit en texte lisible par un humain.\nDonc, si tu donnes directement un fichier .py √† ton ordinateur, il ne sait pas quoi en faire. Il faut un interm√©diaire pour traduire le code Python en instructions compr√©hensibles pour la machine.\nLangages compil√©s vs interpr√©t√©s : la cl√© du probl√®me # Il existe deux grandes familles de langages de programmation :\n1. Les langages compil√©s (C, C++, Rust, etc.) # üëâ Tu √©cris ton code\nüëâ Tu le compiles avec un compilateur (ex : gcc pour C)\nüëâ √áa te donne un fichier .exe ou un binaire que ton ordi peut ex√©cuter directement\nUne fois compil√©, ton programme tourne sans d√©pendre du langage de programmation d‚Äôorigine.\n2. Les langages interpr√©t√©s (Python, JavaScript, Bash, etc.) # üëâ Pas de compilation pr√©alable\nüëâ √Ä chaque ex√©cution, un interpr√©teur lit ton code et le traduit en direct en instructions machine\nC‚Äôest plus souple, mais √ßa veut dire qu‚Äôon a toujours besoin de l‚Äôinterpr√©teur install√© pour ex√©cuter un script Python.\nEt Python dans tout √ßa ? # Python est un langage interpr√©t√©, ce qui veut dire que tu as besoin de son interpr√©teur (python3) pour lire et ex√©cuter ton code.\nSans Python install√©, ton syst√®me ne sait pas comment comprendre et ex√©cuter ton fichier .py. C‚Äôest comme si tu voulais lire un livre en japonais sans avoir appris la langue.\nComment savoir si Python est install√© ? # Si tu tapes :\npython --version et que ton terminal te r√©pond avec une version (Python 3.x.x), c‚Äôest bon, l‚Äôinterpr√©teur est bien l√†.\nSinon, il faudra l‚Äôinstaller avant de pouvoir ex√©cuter tes scripts Python.\nConclusion : Python ‚â† Application autonome # Un fichier .py, c‚Äôest juste un texte qui contient du code.\nCe n‚Äôest pas un programme autonome comme un .exe.\nSi tu veux ex√©cuter du Python, tu as besoin de l‚Äôinterpr√©teur Python install√© sur ton syst√®me.\nD\u0026rsquo;o√π la r√®gle simple : Pas d‚Äôinterpr√©teur = pas de Python.\n","date":"5 April 2025","externalUrl":null,"permalink":"/fr/blog/python/pourquoi-installer-python/","section":"Langage","summary":"","title":"Pourquoi Python doit √™tre install√© pour fonctionner ?","type":"blog"},{"content":" Manipulation des fichiers JSON en Python : Ma√Ætrisez l\u0026rsquo;Art du Stockage de Donn√©es # Les fichiers JSON, c‚Äôest le format incontournable pour stocker et √©changer des donn√©es. Ultra flexible, il est utilis√© partout : API, configurations, logs, bases de donn√©es NoSQL‚Ä¶ Bref, vous allez bosser avec.\nDans cet article, on va voir comment manipuler les fichiers JSON en Python :\n‚úÖ Lire et √©crire des fichiers JSON\n‚úÖ Modifier et mettre √† jour les donn√©es\n‚úÖ G√©rer les erreurs et √©viter les pi√®ges classiques\n‚úÖ Exercices pratiques pour tester vos skills\n1. Lire un Fichier JSON (json.load) # L‚Äô√©tape de base : charger un fichier JSON dans Python.\nExemple : Lire un fichier JSON # Imaginons un fichier data.json contenant :\n{ \u0026#34;nom\u0026#34;: \u0026#34;Alice\u0026#34;, \u0026#34;age\u0026#34;: 30, \u0026#34;ville\u0026#34;: \u0026#34;Paris\u0026#34; } On peut le charger avec :\nimport json with open(\u0026#34;data.json\u0026#34;, \u0026#34;r\u0026#34;) as fichier: data = json.load(fichier) print(data[\u0026#34;nom\u0026#34;]) # Affiche : Alice üîπ Explications :\nopen(\u0026quot;data.json\u0026quot;, \u0026quot;r\u0026quot;) ouvre le fichier en lecture (r). json.load(fichier) transforme le JSON en dictionnaire Python. On acc√®de ensuite aux donn√©es normalement. üí° Pi√®ge √† √©viter : Si le fichier est mal form√©, json.load() va lever une erreur. On g√®re √ßa juste apr√®s.\n2. √âcrire un Fichier JSON (json.dump) # Si vous voulez sauvegarder des donn√©es dans un fichier JSON, utilisez json.dump().\nExemple : √âcrire un JSON dans un fichier # import json data = { \u0026#34;nom\u0026#34;: \u0026#34;Bob\u0026#34;, \u0026#34;age\u0026#34;: 25, \u0026#34;ville\u0026#34;: \u0026#34;Lyon\u0026#34; } with open(\u0026#34;output.json\u0026#34;, \u0026#34;w\u0026#34;) as fichier: json.dump(data, fichier, indent=4) print(\u0026#34;Donn√©es enregistr√©es !\u0026#34;) üîπ Explications :\nopen(\u0026quot;output.json\u0026quot;, \u0026quot;w\u0026quot;) ouvre le fichier en √©criture (w). json.dump(data, fichier, indent=4) √©crit les donn√©es dans le fichier, en format lisible (indent=4). üí° Bonus : Formattage lisible avec sort_keys\njson.dump(data, fichier, indent=4, sort_keys=True) Cela trie les cl√©s du JSON par ordre alphab√©tique.\n3. Modifier un JSON (Mise √† Jour de Donn√©es) # üîπ Ajouter une nouvelle cl√© au JSON et sauvegarder # import json with open(\u0026#34;data.json\u0026#34;, \u0026#34;r\u0026#34;) as fichier: data = json.load(fichier) data[\u0026#34;email\u0026#34;] = \u0026#34;alice@example.com\u0026#34; # Ajout d\u0026#39;une nouvelle cl√© with open(\u0026#34;data.json\u0026#34;, \u0026#34;w\u0026#34;) as fichier: json.dump(data, fichier, indent=4) print(\u0026#34;Mise √† jour effectu√©e !\u0026#34;) üîπ Explications :\nOn charge le JSON On ajoute/modifie une cl√© On r√©√©crit tout le JSON dans le fichier üí° Bonus : Ajouter un √©l√©ment dans une liste JSON\nSi data.json contient :\n{ \u0026#34;users\u0026#34;: [\u0026#34;Alice\u0026#34;, \u0026#34;Bob\u0026#34;] } On peut ajouter \u0026quot;Charlie\u0026quot; dans la liste :\ndata[\u0026#34;users\u0026#34;].append(\u0026#34;Charlie\u0026#34;) with open(\u0026#34;data.json\u0026#34;, \u0026#34;w\u0026#34;) as fichier: json.dump(data, fichier, indent=4) 4. G√©rer les Erreurs JSON comme un Pro # Manipuler des fichiers JSON peut planter si :\n‚ùå Le fichier n‚Äôexiste pas\n‚ùå Le JSON est mal form√©\n‚ùå Une cl√© est absente\nüìå S√©curisation avec try-except\nimport json try: with open(\u0026#34;data.json\u0026#34;, \u0026#34;r\u0026#34;) as fichier: data = json.load(fichier) print(\u0026#34;Fichier charg√© avec succ√®s !\u0026#34;) except FileNotFoundError: print(\u0026#34;Erreur : Fichier non trouv√© !\u0026#34;) except json.JSONDecodeError: print(\u0026#34;Erreur : Le fichier JSON est mal form√© !\u0026#34;) ‚úÖ Toujours pr√©voir des exceptions pour √©viter les crashs inutiles.\n5. Exercices Pratiques üöÄ # üí° Exercice 1 : √âcrire une fonction sauvegarder_json(nom_fichier, data) # üëâ Cr√©ez une fonction qui prend un dictionnaire Python et l‚Äôenregistre dans un fichier JSON.\nExemple d‚Äôutilisation :\ndata = {\u0026#34;nom\u0026#34;: \u0026#34;John\u0026#34;, \u0026#34;score\u0026#34;: 42} sauvegarder_json(\u0026#34;score.json\u0026#34;, data) üí° Exercice 2 : Lire une liste d‚Äôobjets JSON et l‚Äôafficher # Cr√©ez un fichier users.json avec :\n[ { \u0026#34;nom\u0026#34;: \u0026#34;Alice\u0026#34;, \u0026#34;age\u0026#34;: 30 }, { \u0026#34;nom\u0026#34;: \u0026#34;Bob\u0026#34;, \u0026#34;age\u0026#34;: 25 }, { \u0026#34;nom\u0026#34;: \u0026#34;Charlie\u0026#34;, \u0026#34;age\u0026#34;: 27 } ] √âcrivez un script qui charge ce JSON et affiche chaque utilisateur ainsi :\nNom: Alice, √Çge: 30 Nom: Bob, √Çge: 25 Nom: Charlie, √Çge: 27 üìå Indice : json.load() retourne une liste !\nüí° Exercice 3 : Ajouter un utilisateur dans le fichier users.json # √âcrivez une fonction ajouter_utilisateur(nom, age) qui ajoute un nouvel utilisateur √† la liste JSON.\nExemple d‚Äôutilisation :\najouter_utilisateur(\u0026#34;David\u0026#34;, 22) üí° V√©rifiez que users.json contient bien le nouvel utilisateur !\nConclusion : JSON en Python, un Incontournable # Vous avez maintenant toutes les bases pour manipuler des fichiers JSON comme un pro. ‚úÖ\nComp√©tences acquises :\n‚úÖ Lire et √©crire des fichiers JSON\n‚úÖ Modifier et mettre √† jour les donn√©es\n‚úÖ G√©rer les erreurs et exceptions\n‚úÖ Travailler avec des listes d‚Äôobjets JSON\nüöÄ Prochain d√©fi : Impl√©mentez une mini-base de donn√©es JSON pour g√©rer une liste de contacts (nom, t√©l√©phone, email).\nAllez, √† vous de jouer ! üòéüî•\n","date":"4 April 2025","externalUrl":null,"permalink":"/fr/courses/python/json-en-python/","section":"Cours","summary":"","title":"Comprendre et ma√Ætriser with et open en Python","type":"courses"},{"content":"","date":"4 April 2025","externalUrl":null,"permalink":"/fr/categories/cours-python/","section":"Categories","summary":"","title":"Cours Python","type":"categories"},{"content":"","date":"4 April 2025","externalUrl":null,"permalink":"/fr/tags/open/","section":"Tags","summary":"","title":"Open","type":"tags"},{"content":"","date":"4 April 2025","externalUrl":null,"permalink":"/fr/tags/with/","section":"Tags","summary":"","title":"With","type":"tags"},{"content":" with open() en Python : G√©rer les fichiers comme un pro # Quand on bosse avec des fichiers en Python, la m√©thode classique c‚Äôest d‚Äôouvrir le fichier, lire ou √©crire dedans, puis le refermer. Mais soyons honn√™tes, qui pense toujours √† fermer proprement son fichier ? ü§®\nC‚Äôest l√† que with open() entre en sc√®ne :\nPlus besoin de se soucier de close() Moins de bugs li√©s aux fichiers non ferm√©s Code plus propre et plus lisible C‚Äôest parti pour une exploration rapide et efficace. üöÄ\n1. Lire un fichier avec with open() # üîπ M√©thode classique (√† √©viter) # f = open(\u0026#34;mon_fichier.txt\u0026#34;, \u0026#34;r\u0026#34;) contenu = f.read() f.close() # Oubli√© = fuite de ressources ! print(contenu) Si le script plante avant close(), le fichier reste ouvert et peut causer des soucis.\nüîπ M√©thode propre avec with open() # with open(\u0026#34;mon_fichier.txt\u0026#34;, \u0026#34;r\u0026#34;) as fichier: contenu = fichier.read() print(contenu) # Le fichier est ferm√© automatiquement apr√®s le bloc `with` ‚úÖ Avantages :\nLe fichier se ferme automatiquement, m√™me en cas d‚Äôerreur. Pas besoin d‚Äôappeler close(), Python le fait pour nous. 2. Lire un fichier ligne par ligne # Lire tout le fichier avec read() peut √™tre inefficace si c‚Äôest un gros fichier.\n‚û°Ô∏è Solution : lire ligne par ligne\nwith open(\u0026#34;mon_fichier.txt\u0026#34;, \u0026#34;r\u0026#34;) as fichier: for ligne in fichier: print(ligne.strip()) # `strip()` pour enlever les sauts de ligne inutiles 3. √âcrire dans un fichier (\u0026quot;w\u0026quot;) # Le mode \u0026quot;w\u0026quot; √©crase le fichier s‚Äôil existe d√©j√†.\nwith open(\u0026#34;nouveau_fichier.txt\u0026#34;, \u0026#34;w\u0026#34;) as fichier: fichier.write(\u0026#34;Hello, world !\\n\u0026#34;) fichier.write(\u0026#34;Ligne 2 du fichier.\\n\u0026#34;) üìå Attention : Tout contenu pr√©c√©dent sera effac√©.\n4. Ajouter du texte (\u0026quot;a\u0026quot;) # Le mode \u0026quot;a\u0026quot; ajoute du texte sans √©craser le fichier existant.\nwith open(\u0026#34;nouveau_fichier.txt\u0026#34;, \u0026#34;a\u0026#34;) as fichier: fichier.write(\u0026#34;Une nouvelle ligne ajout√©e !\\n\u0026#34;) 5. Lire et √©crire (\u0026quot;r+\u0026quot;) # Le mode \u0026quot;r+\u0026quot; permet de lire et √©crire dans un fichier existant.\nwith open(\u0026#34;nouveau_fichier.txt\u0026#34;, \u0026#34;r+\u0026#34;) as fichier: contenu = fichier.read() fichier.write(\u0026#34;\\nAjout d\u0026#39;une ligne en mode lecture/√©criture.\u0026#34;) üìå Pi√®ge ! L‚Äô√©criture commence √† la fin de la derni√®re lecture.\nExercice Pratique : Cr√©ation d‚Äôun journal de logs # üî• Objectif : √âcrire un programme qui enregistre chaque action dans un fichier log.txt avec un horodatage.\nüõ† Instructions : # √Ä chaque ex√©cution du script, une nouvelle ligne est ajout√©e au fichier log.txt. La ligne doit contenir la date et l‚Äôheure actuelle + un message. Utiliser with open() pour g√©rer l‚Äô√©criture du fichier. üí° Solution : # from datetime import datetime # G√©n√©rer le message de log timestamp = datetime.now().strftime(\u0026#34;%Y-%m-%d %H:%M:%S\u0026#34;) message = f\u0026#34;{timestamp} - Script ex√©cut√© avec succ√®s.\\n\u0026#34; # √âcrire dans le fichier log with open(\u0026#34;log.txt\u0026#34;, \u0026#34;a\u0026#34;) as fichier: fichier.write(message) print(\u0026#34;Log enregistr√© !\u0026#34;) üìå √Ä tester : Ex√©cutez plusieurs fois le script et regardez le contenu de log.txt. üßê\nConclusion # ‚úî with open() simplifie la gestion des fichiers et √©vite les oublis de close().\n‚úî C‚Äôest plus s√©curis√© et plus propre qu‚Äôun simple open().\n‚úî On peut lire, √©crire et ajouter du contenu selon le mode choisi (\u0026quot;r\u0026quot;, \u0026quot;w\u0026quot;, \u0026quot;a\u0026quot;, \u0026quot;r+\u0026quot; ‚Ä¶).\nüöÄ Prochain challenge : cr√©ez un script qui stocke les scores d‚Äôun jeu et affiche le meilleur score √† chaque ex√©cution ! üí°\n","date":"3 April 2025","externalUrl":null,"permalink":"/fr/courses/python/with-open/","section":"Cours","summary":"","title":"Comprendre et ma√Ætriser with et open en Python","type":"courses"},{"content":"","date":"31 March 2025","externalUrl":null,"permalink":"/fr/tags/argparse/","section":"Tags","summary":"","title":"Argparse","type":"tags"},{"content":" üöÄ Ma√Ætriser argparse en Python : Guide complet # üî• Pourquoi ce tuto ?\nTu veux faire des scripts en ligne de commande propres et puissants ? Marre de sys.argv et du parsing manuel des arguments ? Tu veux des options, des flags, de l\u0026rsquo;aide automatique, et m√™me des sous-commandes ? üìå Pourquoi argparse et pas sys.argv ? # üî• Comment un script Python r√©cup√®re-t-il des arguments en ligne de commande ?\nSi tu fais juste :\nimport sys print(sys.argv) et que tu lances :\npython3 script.py hello world Tu obtiens :\n[\u0026#39;script.py\u0026#39;, \u0026#39;hello\u0026#39;, \u0026#39;world\u0026#39;] ü§î Probl√®mes avec sys.argv :\nTout est en str (tu dois tout convertir √† la main) Pas de validation automatique (si on attend un int et que l\u0026rsquo;utilisateur entre hello, √ßa plante) Aucune aide (--help n\u0026rsquo;existe pas) Difficile √† maintenir (si tu rajoutes plein d‚Äôoptions, c\u0026rsquo;est vite le chaos) üî• Solution : argparse, qui g√®re tout √ßa automatiquement !\nüöÄ 1. Ton premier script avec argparse # On commence simple : un script qui prend un nom et un flag --verbose.\nimport argparse parser = argparse.ArgumentParser(description=\u0026#34;Un script simple avec argparse\u0026#34;) parser.add_argument(\u0026#34;nom\u0026#34;, help=\u0026#34;Votre nom\u0026#34;) parser.add_argument(\u0026#34;-v\u0026#34;, \u0026#34;--verbose\u0026#34;, action=\u0026#34;store_true\u0026#34;, help=\u0026#34;Mode verbeux\u0026#34;) args = parser.parse_args() print(f\u0026#34;Salut {args.nom} !\u0026#34;) if args.verbose: print(\u0026#34;Mode verbeux activ√©.\u0026#34;) üî• Teste avec :\npython3 script.py Alice # ‚Üí Salut Alice ! python3 script.py Bob --verbose # ‚Üí Salut Bob ! # ‚Üí Mode verbeux activ√©. ‚öôÔ∏è 2. Ajouter des options avec valeurs (type, default, choices) # On veut un script qui prend :\nUn nom (obligatoire) Un √¢ge (optionnel, mais doit √™tre un int) Une ville (optionnelle, par d√©faut \u0026quot;Inconnue\u0026quot;) Un niveau (optionnel, parmi \u0026quot;d√©butant\u0026quot;, \u0026quot;interm√©diaire\u0026quot;, \u0026quot;expert\u0026quot;) import argparse parser = argparse.ArgumentParser(description=\u0026#34;Un script am√©lior√© avec argparse\u0026#34;) parser.add_argument(\u0026#34;nom\u0026#34;, help=\u0026#34;Votre nom\u0026#34;) parser.add_argument(\u0026#34;-a\u0026#34;, \u0026#34;--age\u0026#34;, type=int, help=\u0026#34;Votre √¢ge\u0026#34;) parser.add_argument(\u0026#34;--ville\u0026#34;, default=\u0026#34;Inconnue\u0026#34;, help=\u0026#34;Votre ville\u0026#34;) parser.add_argument(\u0026#34;--niveau\u0026#34;, choices=[\u0026#34;d√©butant\u0026#34;, \u0026#34;interm√©diaire\u0026#34;, \u0026#34;expert\u0026#34;], help=\u0026#34;Votre niveau\u0026#34;) args = parser.parse_args() print(f\u0026#34;Salut {args.nom} !\u0026#34;) if args.age: print(f\u0026#34;Tu as {args.age} ans.\u0026#34;) print(f\u0026#34;Tu es √† {args.ville}.\u0026#34;) if args.niveau: print(f\u0026#34;Niveau : {args.niveau}\u0026#34;) üî• Teste avec :\npython3 script.py Alice -a 25 --ville Paris --niveau expert # ‚Üí Salut Alice ! # ‚Üí Tu as 25 ans. # ‚Üí Tu es √† Paris. # ‚Üí Niveau : expert. üõ†Ô∏è 3. Ajouter plusieurs sous-commandes (subparsers) # On veut un script multi-fonction avec :\najouter ‚Üí pour ajouter un utilisateur supprimer ‚Üí pour supprimer un utilisateur On va utiliser les subparsers, qui permettent de cr√©er des sous-commandes comme git commit, git push, etc.\nimport argparse parser = argparse.ArgumentParser(description=\u0026#34;Gestion des utilisateurs\u0026#34;) subparsers = parser.add_subparsers(dest=\u0026#34;commande\u0026#34;, help=\u0026#34;Commandes disponibles\u0026#34;) # Commande \u0026#34;ajouter\u0026#34; ajouter_parser = subparsers.add_parser(\u0026#34;ajouter\u0026#34;, help=\u0026#34;Ajouter un utilisateur\u0026#34;) ajouter_parser.add_argument(\u0026#34;nom\u0026#34;, help=\u0026#34;Nom de l\u0026#39;utilisateur\u0026#34;) ajouter_parser.add_argument(\u0026#34;-a\u0026#34;, \u0026#34;--age\u0026#34;, type=int, help=\u0026#34;√Çge de l\u0026#39;utilisateur\u0026#34;) # Commande \u0026#34;supprimer\u0026#34; supprimer_parser = subparsers.add_parser(\u0026#34;supprimer\u0026#34;, help=\u0026#34;Supprimer un utilisateur\u0026#34;) supprimer_parser.add_argument(\u0026#34;nom\u0026#34;, help=\u0026#34;Nom de l\u0026#39;utilisateur √† supprimer\u0026#34;) args = parser.parse_args() if args.commande == \u0026#34;ajouter\u0026#34;: print(f\u0026#34;Ajout de {args.nom}\u0026#34;) if args.age: print(f\u0026#34;√Çge : {args.age}\u0026#34;) elif args.commande == \u0026#34;supprimer\u0026#34;: print(f\u0026#34;Suppression de {args.nom}\u0026#34;) üî• Teste avec :\npython3 script.py ajouter Alice -a 30 # ‚Üí Ajout de Alice # ‚Üí √Çge : 30 python3 script.py supprimer Alice # ‚Üí Suppression de Alice python3 script.py --help # ‚Üí Affiche les commandes disponibles üî• Pourquoi subparsers ?\nPermet de structurer plus proprement les scripts complexes. Fonctionne comme git add, git commit, etc. G√®re l‚Äôaide --help automatiquement pour chaque sous-commande. üìú 4. G√©n√©rer une aide automatique # üî• Un gros avantage d\u0026rsquo;argparse ? Il g√©n√®re une aide automatique avec --help !\nTeste simplement :\npython3 script.py --help Ou pour une sous-commande :\npython3 script.py ajouter --help √áa affiche tous les arguments disponibles sans que tu aies √† √©crire la doc √† la main. üèÜ\nüî• 5. R√©capitulatif et bonnes pratiques # ‚úÖ Utilise argparse.ArgumentParser(description=\u0026quot;...\u0026quot;) ‚Üí Pour bien d√©crire ton script.\n‚úÖ Utilise des options -f, --flag, type, default, choices ‚Üí Pour plus de flexibilit√©.\n‚úÖ Ajoute parser.add_subparsers(dest=\u0026quot;commande\u0026quot;) ‚Üí Pour g√©rer des sous-commandes.\n‚úÖ Toujours tester --help ‚Üí C\u0026rsquo;est g√©n√©r√© automatiquement et √ßa aide l\u0026rsquo;utilisateur.\nüéØ TL;DR : Le script ultime avec argparse # import argparse parser = argparse.ArgumentParser(description=\u0026#34;Gestion des utilisateurs\u0026#34;) subparsers = parser.add_subparsers(dest=\u0026#34;commande\u0026#34;, help=\u0026#34;Commandes disponibles\u0026#34;) ajouter_parser = subparsers.add_parser(\u0026#34;ajouter\u0026#34;, help=\u0026#34;Ajouter un utilisateur\u0026#34;) ajouter_parser.add_argument(\u0026#34;nom\u0026#34;, help=\u0026#34;Nom de l\u0026#39;utilisateur\u0026#34;) ajouter_parser.add_argument(\u0026#34;-a\u0026#34;, \u0026#34;--age\u0026#34;, type=int, help=\u0026#34;√Çge de l\u0026#39;utilisateur\u0026#34;) supprimer_parser = subparsers.add_parser(\u0026#34;supprimer\u0026#34;, help=\u0026#34;Supprimer un utilisateur\u0026#34;) supprimer_parser.add_argument(\u0026#34;nom\u0026#34;, help=\u0026#34;Nom de l\u0026#39;utilisateur √† supprimer\u0026#34;) args = parser.parse_args() if args.commande == \u0026#34;ajouter\u0026#34;: print(f\u0026#34;Ajout de {args.nom}, √¢ge : {args.age or \u0026#39;Non sp√©cifi√©\u0026#39;}\u0026#34;) elif args.commande == \u0026#34;supprimer\u0026#34;: print(f\u0026#34;Suppression de {args.nom}\u0026#34;) üî• Maintenant, tes scripts Python sont pr√™ts pour la production ! üöÄ\n","date":"31 March 2025","externalUrl":null,"permalink":"/fr/courses/python/argparse-en-python/","section":"Cours","summary":"","title":"Comprendre et ma√Ætriser argparse en Python","type":"courses"},{"content":"","date":"31 March 2025","externalUrl":null,"permalink":"/fr/categories/python/","section":"Categories","summary":"","title":"Python","type":"categories"},{"content":"","date":"31 March 2025","externalUrl":null,"permalink":"/fr/categories/tutoriels/","section":"Categories","summary":"","title":"Tutoriels","type":"categories"},{"content":" üñ§ Bienvenue dans le Void ! # Ce tutoriel va te guider pas √† pas dans l‚Äôinstallation de Void Linux, une distribution l√©g√®re et flexible qui te donne un contr√¥le total sur ton syst√®me. Pr√™t √† relever le d√©fi ? üöÄ\nüéØ Pourquoi Void Linux ? # XBPS : Un gestionnaire de paquets unique, rapide et efficace. Runit : Un syst√®me d\u0026rsquo;init ultra-l√©ger pour des d√©marrages rapides. Minimalisme : Pas de logiciels superflus, juste ce dont tu as besoin. üõ†Ô∏è Pr√©requis # Un PC 64 bits. Une cl√© USB (4 Go minimum). Une connexion Internet fiable. Un esprit curieux et aventureux. üòé üåü √âtape 1 : T√©l√©charger l‚ÄôISO de Void Linux # Rendez-vous sur Void Linux Downloads. Choisis la version Base Live ISO pour ton architecture (g√©n√©ralement x86_64). Astuce : Si tu es incertain, opte pour la version x86_64.\nüíæ √âtape 2 : Cr√©er une cl√© USB bootable # Utilise Etcher, Rufus, ou la ligne de commande : sudo dd if=void-live-x86_64-*.iso of=/dev/sdX bs=4M status=progress Remplace /dev/sdX par le nom de ta cl√© USB. Attention : dd n\u0026rsquo;a pas de bouton \u0026ldquo;annuler\u0026rdquo; ! V√©rifie bien avant d\u0026rsquo;ex√©cuter. üò±\nüöÄ √âtape 3 : D√©marrer sur Void Linux # Ins√®re ta cl√© USB et red√©marre ton PC. Acc√®de au BIOS/UEFI et choisis de d√©marrer sur la cl√© USB. S√©lectionne l‚Äôoption Void Linux dans le menu de d√©marrage. üñ•Ô∏è √âtape 4 : Partitionner le disque # Lance cfdisk : cfdisk /dev/sdX Exemple de partitionnement : 1 Go pour /boot (EFI si besoin). Espace swap (optionnel, 2 Go+). Reste pour /. Formate les partitions : mkfs.ext4 /dev/sdX1 # Partition principale mkfs.vfat -F 32 /dev/sdX2 # Pour EFI mkswap /dev/sdX3 # Si swap üì¶ √âtape 5 : Installer Void Linux # Monte tes partitions : mount /dev/sdX1 /mnt mkdir -p /mnt/boot/efi mount /dev/sdX2 /mnt/boot/efi swapon /dev/sdX3 Lance l‚Äôinstalleur : void-installer Suis les instructions pour configurer : Disposition du clavier. Configuration r√©seau. Nom d\u0026rsquo;h√¥te et cr√©ation d\u0026rsquo;utilisateur. Syst√®me de fichiers. ‚öôÔ∏è √âtape 6 : Installer le bootloader # Choisis GRUB pendant l\u0026rsquo;installation. Ex√©cute ensuite : grub-install --target=x86_64-efi --efi-directory=/mnt/boot/efi --bootloader-id=void_grub grub-mkconfig -o /mnt/boot/grub/grub.cfg üéâ √âtape 7 : Red√©marrer et profiter # Quitte l‚Äôinstallateur et d√©monte les partitions : umount -R /mnt reboot Retire ta cl√© USB pendant le red√©marrage. Bienvenue dans le Void ! üåå\nü§ì Astuces post-installation # Mets √† jour ton syst√®me : sudo xbps-install -Syu Installe les outils de base : sudo xbps-install -S vim git base-devel Exp√©rimente et personnalise ton environnement (WM, dotfiles, etc.). üìö Ressources utiles # Void Linux Handbook Forum Void Linux Si tu rencontres un souci, n‚Äôh√©site pas √† demander de l‚Äôaide ou partager ton exp√©rience ! üé©\n","date":"30 March 2025","externalUrl":null,"permalink":"/fr/blog/linux-tweaks/voidlinux-installation/","section":"Langage","summary":"","title":"Bienvenue dans le Void : Installer Void Linux pas √† pas","type":"blog"},{"content":"","date":"30 March 2025","externalUrl":null,"permalink":"/fr/categories/blog-linux/","section":"Categories","summary":"","title":"Blog Linux","type":"categories"},{"content":"","date":"30 March 2025","externalUrl":null,"permalink":"/fr/tags/minimalisme/","section":"Tags","summary":"","title":"Minimalisme","type":"tags"},{"content":"","date":"30 March 2025","externalUrl":null,"permalink":"/fr/tags/void-linux/","section":"Tags","summary":"","title":"Void Linux","type":"tags"},{"content":" 1. Installer Neovim et Git # LazyVim repose sur Neovim, donc on l‚Äôinstalle :\nPour Ubuntu/Debian : # sudo apt update \u0026amp;\u0026amp; sudo apt install -y neovim git Pour Arch Linux : # sudo pacman -S neovim git Pour Void Linux : # sudo xbps-install -S neovim git V√©rifie l‚Äôinstallation :\nnvim --version 2. Installer LazyVim # On clone LazyVim dans le dossier de config Neovim : Pour plus sur Lazyvim\ngit clone https://github.com/LazyVim/starter ~/.config/nvim Ensuite, on lance Neovim :\nnvim LazyVim est pr√™t ! üéâ\n3. Activer les Extras pour Python # LazyVim propose des extras pour faciliter la config Python. Active lang#python en modifiant ~/.config/nvim/lua/config/lazy.lua :\n{ \u0026#34;LazyVim/LazyVim\u0026#34;, opts = { colorscheme = \u0026#34;tokyonight\u0026#34;, extras = { \u0026#34;lang#python\u0026#34;, }, }, } Recharge LazyVim avec :\nnvim --headless \u0026#34;+Lazy! sync\u0026#34; +qa 4. Installer les outils pour Python # Dans Neovim :\nOuvre Neovim : nvim Appuie sur Espace pour ouvrir le menu. Tape c pour \u0026ldquo;Code\u0026rdquo;. Tape m pour ouvrir Mason. Appuie sur Ctrl + f et installe tape dans la barre python puis entrer, tu positionne le curseur devant ou sur chacun des √©l√©ments suivant et tu appuie i pour installer: python-lsp-server (LSP Python) flake8 (Linting) black (Formatage) autopep8 (Formatage alternatif) debugpy (Debugging) ast-grep (Recherche avanc√©e) 5. Ex√©cuter son premier script Python # Cr√©er un fichier Python # Ouvre Neovim et cr√©e un fichier main.py :\nnvim main.py Ajoute ce code :\nprint(\u0026#34;Hello, LazyVim!\u0026#34;) Ex√©cuter le script depuis Neovim # Tape :\n!python3 main.py Ou, mappe une touche pour ex√©cuter plus vite :\nvim.api.nvim_set_keymap(\u0026#34;n\u0026#34;, \u0026#34;\u0026lt;leader\u0026gt;r\u0026#34;, \u0026#34;:w\u0026lt;CR\u0026gt;:!python3 %\u0026lt;CR\u0026gt;\u0026#34;, { noremap = true, silent = true }) Maintenant, Leader + r (souvent \u0026lt;Space\u0026gt;r) ex√©cute ton script en un clic.\nConclusion # Tu es maintenant pr√™t √† coder en Python sous Linux avec un environnement puissant ! Tu peux maintenant explorer le d√©veloppement Python avec un setup optimis√© et l√©ger. üöÄ\n","date":"30 March 2025","externalUrl":null,"permalink":"/fr/blog/linux-tweaks/lazyvim/","section":"Langage","summary":"","title":"De LazyVim √† l'ex√©cution de son premier script Python","type":"blog"},{"content":"","date":"30 March 2025","externalUrl":null,"permalink":"/fr/tags/lazyvim/","section":"Tags","summary":"","title":"LazyVim","type":"tags"},{"content":"","date":"30 March 2025","externalUrl":null,"permalink":"/fr/tags/lsp/","section":"Tags","summary":"","title":"LSP","type":"tags"},{"content":"","date":"30 March 2025","externalUrl":null,"permalink":"/fr/tags/neovim/","section":"Tags","summary":"","title":"Neovim","type":"tags"},{"content":"Une section pour partarger tout ce que je fais sur linux, ricing, utilisation d\u0026rsquo;outils ou encore m√™me test et avis sur des solutions. Bref beaucoup de critiques.\n","date":"30 March 2025","externalUrl":null,"permalink":"/fr/blog/linux-tweaks/","section":"Langage","summary":"","title":"Linux Tweaks","type":"blog"},{"content":"","date":"30 March 2025","externalUrl":null,"permalink":"/fr/tags/ricing/","section":"Tags","summary":"","title":"Ricing","type":"tags"},{"content":" Choisir son environnement de travail # Avant d\u0026rsquo;√©crire une seule ligne de code en Python, il faut comprendre o√π et comment coder. Tu as peut-√™tre entendu parler de VSCode, PyCharm, Jupyter Notebook ou encore Vim. Mais lequel choisir et pourquoi ?\nCe guide va t‚Äôaider √† comprendre les diff√©rentes options et trouver celle qui te correspond le mieux.\n1. √âditeur de texte vs IDE : Quelle diff√©rence ? # Un environnement de travail en programmation se divise en deux grandes cat√©gories :\nLes √©diteurs de texte : outils l√©gers qui permettent d‚Äô√©crire du code sans fonctionnalit√©s avanc√©es. Les IDE (Environnements de D√©veloppement Int√©gr√©s) : outils complets avec des fonctionnalit√©s pour √©crire, tester et d√©boguer ton code facilement. üìú √âditeurs de texte # Ce sont des outils minimalistes, mais ultra-flexibles. Parfaits si tu aimes le contr√¥le total sur ton environnement.\n√âditeur Points forts Pour qui ? Notepad++ Simple, rapide, colorisation syntaxique D√©butants sur Windows Vim L√©ger, personnalisable, super rapide D√©veloppeurs avanc√©s Nano Ultra-simple, pr√©install√© sur Linux D√©pannage rapide en terminal üî• IDE : Tout-en-un pour coder plus vite # Si tu veux un environnement cl√© en main avec des outils int√©gr√©s, un IDE est souvent un bon choix.\nIDE Points forts Pour qui ? VSCode L√©ger, extensible, supporte plein de langages D√©butants et confirm√©s PyCharm Sp√©cialis√© en Python, super complet D√©veloppeurs Python s√©rieux Jupyter Notebook Id√©al pour tester du code par blocs Data scientists, chercheurs 2. Quel environnement choisir pour d√©buter en Python ? # Si tu d√©butes, voici trois options simples et efficaces :\n1Ô∏è‚É£ VSCode : Polyvalent, bonne auto-compl√©tion, installation rapide.\n2Ô∏è‚É£ Jupyter Notebook : Id√©al si tu veux voir les r√©sultats ligne par ligne.\n3Ô∏è‚É£ L‚Äô√©diteur int√©gr√© de Python (IDLE) : Basique mais suffisant pour tester du code.\nSi tu es sur Linux et que tu veux coder directement dans un terminal : Vim ou Nano sont des choix solides.\n3. Comment bien configurer son environnement ? # Peu importe ton choix, voici quelques bonnes pratiques pour bien commencer :\n‚úÖ Installer Python et s‚Äôassurer qu‚Äôil fonctionne (python --version)\n‚úÖ Activer la coloration syntaxique dans ton √©diteur pour mieux lire le code\n‚úÖ Configurer un environnement virtuel (venv) pour √©viter les conflits entre projets\n‚úÖ Utiliser un terminal int√©gr√© (VSCode et PyCharm l‚Äôont par d√©faut)\n4. De l\u0026rsquo;installation de VSCode √† l‚Äôex√©cution de ton premier script Python # 1. Installer VSCode et Python # Avant tout, il te faut :\n‚úÖ VSCode ‚Üí T√©l√©charge ici et installe-le.\n‚úÖ Python ‚Üí T√©l√©charge ici et coche \u0026ldquo;Add Python to PATH\u0026rdquo; pendant l\u0026rsquo;installation.\nV√©rifie que Python est bien install√© en tapant dans un terminal :\npython --version ou\npython3 --version Si tu vois quelque chose comme Python 3.x.x, c‚Äôest bon ! ‚úÖ\n2. Installer l‚Äôextension Python dans VSCode # Ouvre VSCode, puis :\nVa dans l‚Äôonglet Extensions (Ctrl + Shift + X). Cherche Python et installe l‚Äôextension officielle de Microsoft. √áa te permettra d‚Äôavoir :\n‚úîÔ∏è La coloration syntaxique\n‚úîÔ∏è L‚Äôauto-compl√©tion\n‚úîÔ∏è Un d√©bogueur int√©gr√©\n3. Configurer l‚Äôenvironnement Python dans VSCode # VSCode doit savoir quelle version de Python utiliser.\n1Ô∏è‚É£ Ouvre la palette de commandes (Ctrl + Shift + P).\n2Ô∏è‚É£ Tape \u0026ldquo;Python: Select Interpreter\u0026rdquo; et choisis la version de Python install√©e sur ton PC.\nSi tu ne la trouves pas, clique sur \u0026ldquo;Enter interpreter path\u0026rdquo; et s√©lectionne le fichier python.exe ou python3.\n4. √âcrire ton premier script Python # 1Ô∏è‚É£ Cr√©e un dossier pour ton projet (ex: MonPremierCode).\n2Ô∏è‚É£ Ouvre ce dossier dans VSCode (File ‚Üí Open Folder).\n3Ô∏è‚É£ Cr√©e un nouveau fichier Python : premier_script.py.\n4Ô∏è‚É£ √âcris du code dedans :\nprint(\u0026#34;Hello, world!\u0026#34;) 5Ô∏è‚É£ Enregistre (Ctrl + S).\n5. Ex√©cuter le script Python # üìå M√©thode 1 : Avec le terminal int√©gr√©\nOuvre le terminal (Ctrl +)\nTape :\npython premier_script.py ou\npython3 premier_script.py Tu devrais voir Hello, world! s\u0026rsquo;afficher. ‚úÖ\nüìå M√©thode 2 : Avec le bouton Run\nSi tu as bien install√© l‚Äôextension Python, tu devrais voir un petit bouton \u0026ldquo;Run\u0026rdquo; en haut √† droite du fichier.\n‚û° Clique dessus et le script s‚Äôex√©cutera directement.\n6. Debugger son code (Optionnel mais utile) # Si ton code ne fonctionne pas :\nüîπ Lis les messages d‚Äôerreur (ex: SyntaxError = probl√®me de syntaxe).\nüîπ V√©rifie que tu ex√©cutes le bon fichier avec python nom_du_fichier.py.\nüîπ Teste avec le terminal interactif (python puis entre print(\u0026quot;Test\u0026quot;)).\nConclusion # üéØ En suivant ces √©tapes, tu passes de l‚Äôinstallation de VSCode √† l‚Äôex√©cution de ton premier programme Python en quelques minutes.\nTu peux maintenant :\n‚úÖ √âcrire et tester du code facilement.\n‚úÖ Ajouter d‚Äôautres fichiers et organiser tes projets.\n‚úÖ Explorer les fonctionnalit√©s avanc√©es de VSCode (d√©bogage, extensions).\nPr√™t √† coder ? üöÄ\nConclusion # Pas besoin de choisir l‚Äôoutil parfait d√®s le d√©but. Teste plusieurs environnements et vois ce qui te convient le mieux.\nSi tu veux un conseil simple : VSCode est un excellent compromis entre un √©diteur l√©ger et un IDE puissant.\n","date":"30 March 2025","externalUrl":null,"permalink":"/fr/blog/python/environnement-de-travail/","section":"Langage","summary":"","title":"Comprendre les diff√©rentes options pour coder en Python et choisir l'environnement qui convient le mieux.","type":"blog"},{"content":"","date":"30 March 2025","externalUrl":null,"permalink":"/fr/tags/%C3%A9diteur-de-texte/","section":"Tags","summary":"","title":"√âditeur De Texte","type":"tags"},{"content":"","date":"30 March 2025","externalUrl":null,"permalink":"/fr/tags/ide/","section":"Tags","summary":"","title":"IDE","type":"tags"},{"content":"Quand on commence avec Python, une des premi√®res confusions vient du fait qu‚Äôon peut taper des commandes dans un terminal et voir imm√©diatement un r√©sultat, mais aussi √©crire du code dans un fichier .py. Pourquoi ces deux modes existent-ils ? Et surtout, quand utiliser l‚Äôun ou l‚Äôautre ?\n1. L‚Äôinterpr√©teur Python : le mode interactif # L‚Äôinterpr√©teur Python, aussi appel√© Shell interactif, est une interface o√π on peut taper directement du code Python et voir le r√©sultat imm√©diatement.\nüí° Pour le lancer, il suffit d‚Äôouvrir un terminal et de taper :\npython (Sous certaines installations, il faudra peut-√™tre taper python3 au lieu de python.)\nUne fois lanc√©, l‚Äôinterpr√©teur affiche une invite comme celle-ci :\nPython 3.11.2 (default, Feb 8 2023, 10:50:25) [GCC 11.3.0] on linux Type \u0026#34;help\u0026#34;, \u0026#34;copyright\u0026#34;, \u0026#34;credits\u0026#34; or \u0026#34;license\u0026#34; for more information. \u0026gt;\u0026gt;\u0026gt; √Ä partir de l√†, on peut entrer des instructions Python et voir leur effet imm√©diatement :\n\u0026gt;\u0026gt;\u0026gt; print(\u0026#34;Hello, world!\u0026#34;) Hello, world! Chaque ligne est √©valu√©e instantan√©ment, ce qui est parfait pour :\n‚úÖ Tester rapidement une id√©e.\n‚úÖ Exp√©rimenter une fonction ou un bout de code sans cr√©er de fichier.\n‚úÖ D√©boguer un comportement pr√©cis.\nüìå Limites du Shell interactif : D√®s qu‚Äôon ferme l‚Äôinterpr√©teur, tout ce qu‚Äôon a tap√© est perdu. Ce n‚Äôest pas pratique pour √©crire un programme complet.\n2. Le fichier Python : ex√©cuter un script # Quand on veut √©crire un programme plus structur√©, on cr√©e un fichier Python (.py).\nPar exemple, on peut √©crire le contenu suivant dans un fichier mon_script.py :\nprint(\u0026#34;Hello, world!\u0026#34;) print(\u0026#34;Ce fichier Python est ex√©cut√© enti√®rement.\u0026#34;) Puis l‚Äôex√©cuter dans un terminal avec :\npython mon_script.py Cela affichera :\nHello, world! Ce fichier Python est ex√©cut√© enti√®rement. üîπ Pourquoi utiliser un fichier Python ?\n‚úÖ Pour √©crire un programme r√©utilisable.\n‚úÖ Pour organiser du code sur plusieurs lignes ou fonctions.\n‚úÖ Pour √©viter de retaper le m√™me code √† chaque fois.\nüìå Diff√©rence avec le mode interactif :\nDans un fichier, tout le code est ex√©cut√© d‚Äôun coup quand on lance le script. Il n‚Äôy a pas d‚Äô√©valuation imm√©diate ligne par ligne comme dans l‚Äôinterpr√©teur. 3. Quand utiliser l‚Äôun ou l‚Äôautre ? # Mode Avantages Inconv√©nients Interpr√©teur Python Rapide pour tester des id√©es, pas besoin d‚Äôenregistrer un fichier Tout est perdu √† la fermeture Fichier Python Permet de structurer et enregistrer du code r√©utilisable N√©cessite de relancer le script apr√®s chaque modification üí° R√®gle simple :\nSi c‚Äôest juste pour tester une ligne de code ‚ûù utilise l‚Äôinterpr√©teur. Si tu veux cr√©er un vrai programme ‚ûù √©cris un fichier Python. Conclusion # L‚Äôinterpr√©teur Python et les fichiers .py servent des objectifs diff√©rents mais compl√©mentaires. L‚Äôinterpr√©teur est parfait pour des tests rapides, tandis que les fichiers sont indispensables pour √©crire un vrai programme. En comprenant cette diff√©rence d√®s le d√©but, on √©vite pas mal de confusions et on apprend √† coder plus efficacement. üöÄ\n","date":"29 March 2025","externalUrl":null,"permalink":"/fr/blog/python/interpreteur-vs-fichier/","section":"Langage","summary":"","title":"Diff√©rence entre l‚Äôinterpr√©teur Python (Shell interactif) et un fichier Python","type":"blog"},{"content":"","date":"29 March 2025","externalUrl":null,"permalink":"/fr/tags/organisation/","section":"Tags","summary":"","title":"Organisation","type":"tags"},{"content":"","date":"29 March 2025","externalUrl":null,"permalink":"/fr/tags/compilation/","section":"Tags","summary":"","title":"Compilation","type":"tags"},{"content":" Langage interpr√©t√© vs langage compil√© : Quelle est la diff√©rence ? # Quand on commence √† apprendre la programmation, on entend souvent parler de langages interpr√©t√©s et langages compil√©s, mais la distinction entre les deux n\u0026rsquo;est pas toujours claire. Pourquoi doit-on compiler un programme en C alors que Python fonctionne imm√©diatement apr√®s l‚Äôavoir √©crit ? Dans cet article, on va d√©construire cette diff√©rence et voir comment elle impacte l‚Äôex√©cution des programmes.\n1. D√©finition simple # Un langage interpr√©t√© ex√©cute le code ligne par ligne gr√¢ce √† un programme sp√©cial appel√© interpr√©teur.\nUn langage compil√© transforme tout le code source en un fichier ex√©cutable avant de pouvoir l‚Äôex√©cuter.\n2. Comment √ßa fonctionne ? # üîπ Langage interpr√©t√© (Python, JavaScript, Bash, Ruby, PHP\u0026hellip;) # üí° Le code est ex√©cut√© directement sans passer par une phase de compilation.\nTu √©cris un fichier .py contenant du code Python. L‚Äôinterpr√©teur Python lit et ex√©cute le code ligne par ligne. Il n‚Äôy a pas de compilation pr√©alable, mais l‚Äôex√©cution est plus lente qu‚Äôun programme compil√©. üìå Exemple en Python :\nprint(\u0026#34;Hello, world!\u0026#34;) ‚û° Tu peux taper ce code directement dans le terminal Python (python), et il s‚Äôex√©cute imm√©diatement.\nüîπ Langage compil√© (C, C++, Rust, Go\u0026hellip;) # üí° Le code est transform√© en un fichier ex√©cutable avant d‚Äô√™tre lanc√©.\nTu √©cris un fichier .c (par exemple en C). Un compilateur traduit tout le code en un fichier ex√©cutable (ex : mon_programme.exe sous Windows ou a.out sous Linux). Tu peux ex√©cuter ce fichier sans avoir besoin du langage install√© sur la machine. üìå Exemple en C :\n#include \u0026lt;stdio.h\u0026gt; int main() { printf(\u0026#34;Hello, world!\\n\u0026#34;); return 0; } ‚û° Compilation du programme :\ngcc mon_programme.c -o mon_programme ‚û° Ex√©cution :\n./mon_programme 3. Principales diff√©rences # üîπ Crit√®re ‚ö° Langage interpr√©t√© (Python) üöÄ Langage compil√© (C) üìú Ex√©cution Ligne par ligne avec un interpr√©teur Tout le code est traduit en une seule fois üèéÔ∏è Vitesse Plus lent car chaque ligne est analys√©e en temps r√©el Plus rapide car le programme est d√©j√† transform√© en code machine üíª Portabilit√© Fonctionne sur toutes les machines o√π Python est install√© Peut n√©cessiter une recompilation pour chaque syst√®me (Windows, Linux, Mac) üõ†Ô∏è Facilit√© de d√©veloppement Plus simple pour d√©buter, pas besoin de compilation Plus complexe, il faut compiler et g√©rer les erreurs avant l‚Äôex√©cution 4. Cas particulier : Java (Compil√© et interpr√©t√© ?) # Java est un cas un peu sp√©cial :\nIl est compil√© en un format interm√©diaire appel√© bytecode (.class). Ce bytecode est ensuite interpr√©t√© par la JVM (Java Virtual Machine) sur chaque ordinateur. ‚úÖ Avantage : Un seul fichier .class peut fonctionner sur toutes les machines disposant d‚Äôune JVM, sans recompilation.\n5. En r√©sum√© : Quel impact pour toi ? # Si tu veux coder vite et tester imm√©diatement ton code, un langage interpr√©t√© comme Python est id√©al. Si tu cherches de la performance et un ex√©cutable autonome, un langage compil√© comme C ou Rust sera plus adapt√©. En Python, on ne se soucie pas de compilation : il suffit d‚Äô√©crire et d‚Äôex√©cuter imm√©diatement. C‚Äôest pourquoi c‚Äôest un langage souvent recommand√© aux d√©butants.\nüéØ Et toi, tu pr√©f√®res coder en langage interpr√©t√© ou compil√© ? Partage ton avis en commentaire ! üöÄ\n","date":"29 March 2025","externalUrl":null,"permalink":"/fr/blog/python/difference-interpr%C3%A9t%C3%A9-compil%C3%A9/","section":"Langage","summary":"","title":"Diff√©rence entre un langage interpr√©t√© et un langage compil√©","type":"blog"},{"content":"","date":"29 March 2025","externalUrl":null,"permalink":"/fr/categories/introduction-%C3%A0-python/","section":"Categories","summary":"","title":"Introduction √Ä Python","type":"categories"},{"content":" Diff√©rence entre un langage de programmation et un logiciel classique # Un d√©butant peut facilement confondre un langage de programmation et un logiciel classique, car dans les deux cas, il y a une installation et une interface √† utiliser. Pourtant, ce sont deux choses tr√®s diff√©rentes.\n1. Un logiciel classique : un outil fini que l\u0026rsquo;on utilise # Un logiciel classique (ou application) est un programme d√©j√† √©crit qui ex√©cute des t√¢ches sp√©cifiques pour l\u0026rsquo;utilisateur. Il est g√©n√©ralement con√ßu pour √™tre utilis√© sans avoir besoin de comprendre son fonctionnement interne.\nüìå Exemples de logiciels classiques :\nNavigateur web (Chrome, Firefox) ‚Üí permet de naviguer sur Internet. Traitement de texte (Word, LibreOffice) ‚Üí permet d‚Äô√©crire et de formater du texte. Lecteur vid√©o (VLC, Windows Media Player) ‚Üí permet de lire des vid√©os. Caract√©ristiques d\u0026rsquo;un logiciel classique :\n‚úÖ Interface graphique (boutons, menus, fen√™tres).\n‚úÖ Con√ßu pour √™tre utilis√© sans connaissances techniques.\n‚úÖ Ne permet pas de cr√©er de nouveaux logiciels.\nüí° Une analogie :\nUn logiciel classique, c\u0026rsquo;est comme une voiture : on peut l\u0026rsquo;utiliser pour se d√©placer sans avoir besoin de comprendre comment elle fonctionne √† l‚Äôint√©rieur.\n2. Un langage de programmation : un outil pour cr√©er des logiciels # Un langage de programmation est un outil qui permet de donner des instructions √† un ordinateur pour cr√©er des logiciels, des scripts ou des automatisations. Ce n‚Äôest pas un logiciel en soi, mais plut√¥t un moyen de dire √† l‚Äôordinateur quoi faire.\nüìå Exemples de langages de programmation :\nPython ‚Üí utilis√© pour cr√©er des applications, des scripts, de l‚ÄôIA, du web‚Ä¶ C / C++ ‚Üí utilis√© pour des syst√®mes d‚Äôexploitation, des logiciels performants. JavaScript ‚Üí utilis√© pour le d√©veloppement web. Caract√©ristiques d‚Äôun langage de programmation :\n‚úÖ Permet de cr√©er des logiciels et des applications.\n‚úÖ N√©cessite d‚Äô√©crire du code pour donner des instructions.\n‚úÖ Peut √™tre utilis√© via un simple √©diteur de texte.\nüí° Une analogie :\nUn langage de programmation, c\u0026rsquo;est comme une recette de cuisine : tu √©cris les √©tapes √† suivre, et l‚Äôordinateur ex√©cute ces √©tapes pour produire un r√©sultat.\n3. Python est-il un logiciel ou un langage de programmation ? # Python est un langage de programmation, mais pour pouvoir l‚Äôutiliser, il faut un interpr√©teur Python qui est un logiciel.\n‚û°Ô∏è Quand tu installes Python, tu installes un programme (l‚Äôinterpr√©teur) qui comprend le code Python et l‚Äôex√©cute.\nüìå Diff√©rence cl√© :\nPython (le langage) = ensemble de r√®gles et de syntaxes pour √©crire du code. L‚Äôinterpr√©teur Python (le logiciel) = le programme qui lit et ex√©cute le code Python. C‚Äôest comme si tu avais une langue (Python) et un traducteur (l‚Äôinterpr√©teur) qui transforme ce que tu dis en actions que l‚Äôordinateur comprend.\n4. Conclusion # Crit√®re Langage de programmation Logiciel classique But √âcrire du code pour donner des instructions √† un ordinateur R√©aliser une t√¢che sp√©cifique pour l‚Äôutilisateur Utilisation N√©cessite d‚Äôapprendre √† programmer Peut √™tre utilis√© sans connaissances techniques Exemples Python, C, JavaScript Chrome, Word, VLC Cr√©ation Sert √† cr√©er des logiciels Est un produit fini pr√™t √† l\u0026rsquo;emploi R√©sum√© rapide : # Un logiciel classique est un outil pr√™t √† l‚Äôemploi. Un langage de programmation est un moyen de cr√©er des logiciels. Tu veux que j‚Äôajoute des illustrations ou des exercices pour tester la compr√©hension apr√®s cette explication ?\n","date":"29 March 2025","externalUrl":null,"permalink":"/fr/blog/python/difference-logiciel-langage/","section":"Langage","summary":"","title":"üñ•Ô∏è Diff√©rence entre un langage de programmation et un logiciel classique","type":"blog"},{"content":"","date":"29 March 2025","externalUrl":null,"permalink":"/fr/categories/d%C3%A9butant/","section":"Categories","summary":"","title":"D√©butant","type":"categories"},{"content":" C\u0026rsquo;est quoi un fichier .py par rapport √† une application .exe ? # Quand on d√©bute en programmation, on peut penser qu‚Äôun fichier .py (lorsque notre fichier contient du code python) est une application comme un .exe. En r√©alit√©, ils sont tr√®s diff√©rents ! Voici une explication claire pour bien comprendre.\nüìå Un fichier .py, c‚Äôest juste du code source # Un fichier .py contient du texte √©crit en Python. Seul l‚Äôinterpr√©teur Python sait lire et ex√©cuter ce fichier.\nüí° Exemple : # Si tu cr√©es un fichier script.py contenant :\nprint(\u0026#34;Hello, world!\u0026#34;) Ce fichier ne peut pas s\u0026rsquo;ex√©cuter tout seul. Il faut utiliser Python pour l\u0026rsquo;ex√©cuter :\npython script.py # ou python3 script..py Le .py n\u0026rsquo;est donc pas un programme autonome, mais juste un script qui doit √™tre interpr√©t√©.\nüìå Un fichier .exe, c\u0026rsquo;est un programme ex√©cutable autonome # Un .exe est un fichier qui peut √™tre ex√©cut√© directement sans d√©pendre d‚Äôun autre logiciel. Il contient du code machine que ton ordinateur peut comprendre et ex√©cuter tout seul.\nüí° Exemple : # Si tu t√©l√©charges notepad.exe, tu peux double-cliquer dessus et √ßa s‚Äôouvre directement. Il n‚Äôa pas besoin d‚Äôun autre programme pour fonctionner.\nUn .exe est donc un fichier compil√© √† partir d\u0026rsquo;un code source (ex: C, C++, Python compil√©) pour qu‚Äôil tourne tout seul.\nüìå Diff√©rences principales # üìÇ Fichier .py ‚öôÔ∏è Fichier .exe Contient du code Python (lisible par un humain). Contient du code binaire (illisible). Besoin d\u0026rsquo;un interpr√©teur Python pour s‚Äôex√©cuter. Peut √™tre ex√©cut√© directement sans d√©pendance. Facile √† modifier (juste du texte). Modifiable seulement avec un d√©compilateur. Multi-plateforme (Windows, Linux, Mac). Sp√©cifique √† un OS (Windows .exe, Linux .elf). üìå Peut-on transformer un .py en .exe ? # Oui ! Tu peux \u0026ldquo;convertir\u0026rdquo; un script Python en .exe pour qu‚Äôil soit utilisable sans installer Python. On appelle √ßa un binaire compil√©.\nüí° Exemple avec pyinstaller : # pip install pyinstaller pyinstaller --onefile script.py Cela g√©n√®re un fichier script.exe que tu peux ex√©cuter sans Python install√© sur la machine.\nüö® Attention : Le .exe g√©n√©r√© reste d√©pendant de l‚ÄôOS (Windows/Linux/Mac).\nConclusion # Un fichier .py est du code source Python, non ex√©cutable directement. Un .exe est un fichier compil√©, ex√©cutable sans Python. Pour transformer un .py en .exe, on utilise un outil comme pyinstaller. Maintenant, tu sais pourquoi un fichier .py ne fonctionne pas comme un .exe et comment les rendre autonomes ! üöÄ\n","date":"29 March 2025","externalUrl":null,"permalink":"/fr/blog/python/difference-exe-py/","section":"Langage","summary":"","title":"Diff√©rence entre un fichier .py et un ex√©cutable .exe","type":"blog"},{"content":"","date":"29 March 2025","externalUrl":null,"permalink":"/fr/tags/ex%C3%A9cutable/","section":"Tags","summary":"","title":"Ex√©cutable","type":"tags"},{"content":" üéÆ Bagels ‚Äì A Logic Game in Python # Hey everyone! Today, I‚Äôm sharing a fun little Python project: Bagels, a deductive logic game. üß†üí°\nThe goal? Guess a secret 3-digit number within 10 attempts.\nBut instead of direct hints, you receive clues to help you figure out the correct number:\nüü¢ Game Rules:\nFermi ‚Üí A digit is correct and in the correct position ‚úÖ Pico ‚Üí A digit is correct but in the wrong position üîÑ Bagels ‚Üí No correct digits ‚ùå Example:\nIf the secret number is \u0026ldquo;123\u0026rdquo; and you enter \u0026ldquo;132\u0026rdquo;, you‚Äôll see:\nFermi Pico Pico (1 is correct and in the right place, 3 and 2 are correct but misplaced).\nüöÄ Source Code # Here‚Äôs the full implementation in Python:\n#!/usr/bin/env python3 # -*- coding: utf-8 -*- \u0026#34;\u0026#34;\u0026#34; File name: bagels.py Description: A deductive logic game where the player must guess a secret 3-digit number within 10 tries. - Pico -\u0026gt; One correct digit, wrong position. - Fermi -\u0026gt; One correct digit, right position. - Bagels -\u0026gt; No correct digits. Author: ADEBI Ayedoun Ch√¢-Fine achafine@gmail.com Date: 03/16/2025 \u0026#34;\u0026#34;\u0026#34; import random # Constants GUESSES = 10 # NUMBER OF TRIES DIGIT_LEN = 3 # LENGTH OF THE SECRET NUMBER MENU = \u0026#34;\u0026#34;\u0026#34; Bagels, a deductive logic game. By ADEBI Ayedoun Ch√¢-Fine achafine@gmail.com I am thinking of a 3-digit number. Try to guess what it is. Here are some clues: When I say: That means: Pico One digit is correct but in the wrong place Fermi One digit is correct and in the right place Bagels No digit is correct You have 10 attempts: \u0026#34;\u0026#34;\u0026#34; def generate_secret_number(): \u0026#34;\u0026#34;\u0026#34;Generate a unique 3-digit secret number as a list of digits. \u0026#34;\u0026#34;\u0026#34; digits = list(range(1, 10)) random.shuffle(digits) return [str(digits[i]) for i in range(DIGIT_LEN)] def get_clues(input_list, secret_number): \u0026#34;\u0026#34;\u0026#34;Compare user input to the secret number and return the appropriate clues. \u0026#34;\u0026#34;\u0026#34; result = [] for i in range(len(input_list)): if input_list[i] == secret_number[i]: result.append(\u0026#34;Fermi\u0026#34;) elif input_list[i] in secret_number: result.append(\u0026#34;Pico\u0026#34;) return \u0026#34; \u0026#34;.join(result) if result else \u0026#34;Bagels\u0026#34; def get_valid_input(): \u0026#34;\u0026#34;\u0026#34;Handles user input; the player must enter a 3-digit number. \u0026#34;\u0026#34;\u0026#34; while True: guess = input(\u0026#34;\u0026gt; \u0026#34;).strip() if len(guess) == DIGIT_LEN and guess.isdigit(): return list(guess) print(\u0026#34;Invalid input. Please enter a 3-digit number.\u0026#34;) def main(): \u0026#34;\u0026#34;\u0026#34;Main game loop\u0026#34;\u0026#34;\u0026#34; play_again = \u0026#34;\u0026#34; while True: secret_number = generate_secret_number() for i in range(GUESSES): print(\u0026#34;Guess #\u0026#34;, i + 1) user_guess = get_valid_input() if user_guess == secret_number: print(\u0026#34;You got it!\u0026#34;) break else: print(get_clues(user_guess, secret_number)) else: print(\u0026#34;Game Over!\u0026#34;) print(\u0026#34;Do you want to play again? (yes or no)\u0026#34;) while True: play_again = input(\u0026#34;\u0026gt; \u0026#34;).strip().lower() if play_again in [\u0026#34;yes\u0026#34;, \u0026#34;no\u0026#34;]: break else: print(\u0026#34;Please answer with \u0026#39;yes\u0026#39; or \u0026#39;no\u0026#39;\u0026#34;) if play_again == \u0026#34;no\u0026#34;: print(\u0026#34;Thanks for playing!\u0026#34;) break if __name__ == \u0026#34;__main__\u0026#34;: print(MENU) main() üîç Code Breakdown # The program generates a random 3-digit secret number. The user makes a guess and receives a clue. The game loops for up to 10 tries, or until the correct number is guessed. At the end, the player can choose to replay or quit. üìå How Can We Improve It? # I‚Äôve got a few ideas, but I‚Äôd love to hear yours!\nFor example:\nAdd a hard mode where the secret number has no repeating digits. Create a GUI version using Tkinter or Pygame. Add a multiplayer mode, where Player 1 sets the number and Player 2 guesses. What do you think? Got any other ideas to improve it? üöÄ\nüí¨ Let me know in the comments if you tried the game or have optimizations to suggest!\nüìå Follow me for more Python and dev content!\nüëâ [Dev.to / GitHub / Twitter Profile]\n","date":"26 March 2025","externalUrl":null,"permalink":"/blog/python/bagels/","section":"Langage","summary":"","title":"üéØ Implementing the Bagels Game in Python: A Deductive Logic Challenge","type":"blog"},{"content":"","date":"26 March 2025","externalUrl":null,"permalink":"/tags/algorithms/","section":"Tags","summary":"","title":"Algorithms","type":"tags"},{"content":"","date":"26 March 2025","externalUrl":null,"permalink":"/tags/game/","section":"Tags","summary":"","title":"Game","type":"tags"},{"content":"","date":"26 March 2025","externalUrl":null,"permalink":"/categories/games-and-algorithms/","section":"Categories","summary":"","title":"Games and Algorithms","type":"categories"},{"content":"","date":"26 March 2025","externalUrl":null,"permalink":"/fr/tags/jeu/","section":"Tags","summary":"","title":"Jeu","type":"tags"},{"content":"","date":"26 March 2025","externalUrl":null,"permalink":"/fr/categories/jeux-et-algorithmes/","section":"Categories","summary":"","title":"Jeux Et Algorithmes","type":"categories"},{"content":"","date":"26 March 2025","externalUrl":null,"permalink":"/tags/logic/","section":"Tags","summary":"","title":"Logic","type":"tags"},{"content":"","date":"26 March 2025","externalUrl":null,"permalink":"/fr/tags/logique/","section":"Tags","summary":"","title":"Logique","type":"tags"},{"content":"","date":"26 March 2025","externalUrl":null,"permalink":"/categories/python-projects/","section":"Categories","summary":"","title":"Python Projects","type":"categories"},{"content":"","date":"4 March 2025","externalUrl":null,"permalink":"/courses/python/try-except/","section":"Courses","summary":"","title":"Try Except","type":"courses"},{"content":"","date":"4 March 2025","externalUrl":null,"permalink":"/fr/tags/exceptions/","section":"Tags","summary":"","title":"Exceptions","type":"tags"},{"content":"","date":"4 March 2025","externalUrl":null,"permalink":"/fr/tags/try-...-except/","section":"Tags","summary":"","title":"Try ... Except","type":"tags"},{"content":"","date":"4 March 2025","externalUrl":null,"permalink":"/fr/tags/pip/","section":"Tags","summary":"","title":"PIP","type":"tags"},{"content":"","date":"4 March 2025","externalUrl":null,"permalink":"/courses/python/pip/","section":"Courses","summary":"","title":"PIP","type":"courses"},{"content":"","date":"4 March 2025","externalUrl":null,"permalink":"/fr/tags/module/","section":"Tags","summary":"","title":"Module","type":"tags"},{"content":"","date":"4 March 2025","externalUrl":null,"permalink":"/fr/tags/regex/","section":"Tags","summary":"","title":"RegEx","type":"tags"},{"content":"","date":"4 March 2025","externalUrl":null,"permalink":"/courses/python/module-regex/","section":"Courses","summary":"","title":"Module RegEx","type":"courses"},{"content":"","date":"4 March 2025","externalUrl":null,"permalink":"/courses/python/module-json/","section":"Courses","summary":"","title":"Module JSON","type":"courses"},{"content":"","date":"4 March 2025","externalUrl":null,"permalink":"/fr/tags/json/","section":"Tags","summary":"","title":"JSON","type":"tags"},{"content":"","date":"4 March 2025","externalUrl":null,"permalink":"/fr/tags/math/","section":"Tags","summary":"","title":"Math","type":"tags"},{"content":"","date":"4 March 2025","externalUrl":null,"permalink":"/courses/python/module-math/","section":"Courses","summary":"","title":"Module Math","type":"courses"},{"content":"","date":"4 March 2025","externalUrl":null,"permalink":"/courses/python/dates/","section":"Courses","summary":"","title":"Dates","type":"courses"},{"content":"","date":"4 March 2025","externalUrl":null,"permalink":"/fr/tags/dates/","section":"Tags","summary":"","title":"Dates","type":"tags"},{"content":"","date":"4 March 2025","externalUrl":null,"permalink":"/fr/tags/modules/","section":"Tags","summary":"","title":"Modules","type":"tags"},{"content":"","date":"4 March 2025","externalUrl":null,"permalink":"/courses/python/modules/","section":"Courses","summary":"","title":"Modules","type":"courses"},{"content":"","date":"3 March 2025","externalUrl":null,"permalink":"/courses/python/portee/","section":"Courses","summary":"","title":"Portee","type":"courses"},{"content":"","date":"3 March 2025","externalUrl":null,"permalink":"/fr/tags/port%C3%A9e/","section":"Tags","summary":"","title":"Port√©e","type":"tags"},{"content":"","date":"3 March 2025","externalUrl":null,"permalink":"/fr/tags/polymorphisme/","section":"Tags","summary":"","title":"Polymorphisme","type":"tags"},{"content":"","date":"3 March 2025","externalUrl":null,"permalink":"/courses/python/polymorphisme/","section":"Courses","summary":"","title":"Polymorphisme","type":"courses"},{"content":"","date":"3 March 2025","externalUrl":null,"permalink":"/courses/python/heritage/","section":"Courses","summary":"","title":"Heritage","type":"courses"},{"content":"","date":"3 March 2025","externalUrl":null,"permalink":"/fr/tags/heritage/","section":"Tags","summary":"","title":"Heritage","type":"tags"},{"content":"","date":"3 March 2025","externalUrl":null,"permalink":"/fr/tags/classes/","section":"Tags","summary":"","title":"Classes","type":"tags"},{"content":"","date":"3 March 2025","externalUrl":null,"permalink":"/fr/tags/objets/","section":"Tags","summary":"","title":"Objets","type":"tags"},{"content":"","date":"3 March 2025","externalUrl":null,"permalink":"/courses/python/classes/","section":"Courses","summary":"","title":"Classes","type":"courses"},{"content":"","date":"3 March 2025","externalUrl":null,"permalink":"/courses/python/array/","section":"Courses","summary":"","title":"Array","type":"courses"},{"content":"","date":"3 March 2025","externalUrl":null,"permalink":"/fr/tags/array/","section":"Tags","summary":"","title":"Array","type":"tags"},{"content":"","date":"27 February 2025","externalUrl":null,"permalink":"/fr/tags/lambda/","section":"Tags","summary":"","title":"Lambda","type":"tags"},{"content":"","date":"27 February 2025","externalUrl":null,"permalink":"/courses/python/lambda/","section":"Courses","summary":"","title":"Lambda","type":"courses"},{"content":"","date":"27 February 2025","externalUrl":null,"permalink":"/courses/python/fonction/","section":"Courses","summary":"","title":"Fonction","type":"courses"},{"content":"","date":"27 February 2025","externalUrl":null,"permalink":"/fr/tags/fonctions/","section":"Tags","summary":"","title":"Fonctions","type":"tags"},{"content":"","date":"27 February 2025","externalUrl":null,"permalink":"/fr/tags/for/","section":"Tags","summary":"","title":"For","type":"tags"},{"content":"","date":"27 February 2025","externalUrl":null,"permalink":"/fr/tags/while/","section":"Tags","summary":"","title":"While","type":"tags"},{"content":"","date":"27 February 2025","externalUrl":null,"permalink":"/courses/python/boucles/","section":"Courses","summary":"","title":"Boucles","type":"courses"},{"content":"","date":"27 February 2025","externalUrl":null,"permalink":"/courses/python/conditions/","section":"Courses","summary":"","title":"Conditions","type":"courses"},{"content":"","date":"27 February 2025","externalUrl":null,"permalink":"/fr/tags/conditions/","section":"Tags","summary":"","title":"Conditions","type":"tags"},{"content":"","date":"27 February 2025","externalUrl":null,"permalink":"/fr/tags/elif/","section":"Tags","summary":"","title":"Elif","type":"tags"},{"content":"","date":"27 February 2025","externalUrl":null,"permalink":"/fr/tags/else/","section":"Tags","summary":"","title":"Else","type":"tags"},{"content":"","date":"27 February 2025","externalUrl":null,"permalink":"/fr/tags/if/","section":"Tags","summary":"","title":"If","type":"tags"},{"content":"","date":"27 February 2025","externalUrl":null,"permalink":"/fr/tags/dictionnaires/","section":"Tags","summary":"","title":"Dictionnaires","type":"tags"},{"content":"","date":"27 February 2025","externalUrl":null,"permalink":"/courses/python/dictionnaires/","section":"Courses","summary":"","title":"Dictionnaires","type":"courses"},{"content":"","date":"27 February 2025","externalUrl":null,"permalink":"/courses/python/sets/","section":"Courses","summary":"","title":"Sets","type":"courses"},{"content":"","date":"27 February 2025","externalUrl":null,"permalink":"/fr/tags/sets/","section":"Tags","summary":"","title":"Sets","type":"tags"},{"content":"","date":"27 February 2025","externalUrl":null,"permalink":"/fr/tags/tuples/","section":"Tags","summary":"","title":"Tuples","type":"tags"},{"content":"","date":"27 February 2025","externalUrl":null,"permalink":"/courses/python/tuples/","section":"Courses","summary":"","title":"Tuples","type":"courses"},{"content":"","date":"27 February 2025","externalUrl":null,"permalink":"/courses/python/list/","section":"Courses","summary":"","title":"List","type":"courses"},{"content":"","date":"27 February 2025","externalUrl":null,"permalink":"/fr/tags/listes/","section":"Tags","summary":"","title":"Listes","type":"tags"},{"content":"","date":"27 February 2025","externalUrl":null,"permalink":"/fr/tags/op%C3%A9rateurs/","section":"Tags","summary":"","title":"Op√©rateurs","type":"tags"},{"content":"","date":"27 February 2025","externalUrl":null,"permalink":"/courses/python/operateurs/","section":"Courses","summary":"","title":"Operateurs","type":"courses"},{"content":"","date":"27 February 2025","externalUrl":null,"permalink":"/courses/python/booleen/","section":"Courses","summary":"","title":"Booleen","type":"courses"},{"content":"","date":"27 February 2025","externalUrl":null,"permalink":"/fr/tags/bool%C3%A9en/","section":"Tags","summary":"","title":"Bool√©en","type":"tags"},{"content":"","date":"27 February 2025","externalUrl":null,"permalink":"/courses/python/casting/","section":"Courses","summary":"","title":"Casting","type":"courses"},{"content":"","date":"27 February 2025","externalUrl":null,"permalink":"/courses/python/nombres/","section":"Courses","summary":"","title":"Nombres","type":"courses"},{"content":"","date":"27 February 2025","externalUrl":null,"permalink":"/courses/python/type-donnee/","section":"Courses","summary":"","title":"Type Donnee","type":"courses"},{"content":"","date":"27 February 2025","externalUrl":null,"permalink":"/courses/python/variables/","section":"Courses","summary":"","title":"Variables","type":"courses"},{"content":"","date":"27 February 2025","externalUrl":null,"permalink":"/fr/tags/cha%C3%AEnes/","section":"Tags","summary":"","title":"Cha√Ænes","type":"tags"},{"content":"","date":"27 February 2025","externalUrl":null,"permalink":"/courses/python/strings/","section":"Courses","summary":"","title":"Strings","type":"courses"},{"content":"","date":"27 February 2025","externalUrl":null,"permalink":"/fr/tags/casting/","section":"Tags","summary":"","title":"Casting","type":"tags"},{"content":"","date":"27 February 2025","externalUrl":null,"permalink":"/fr/tags/nombres/","section":"Tags","summary":"","title":"Nombres","type":"tags"},{"content":"","date":"27 February 2025","externalUrl":null,"permalink":"/fr/tags/type-de-donn%C3%A9e/","section":"Tags","summary":"","title":"Type De Donn√©e","type":"tags"},{"content":"","date":"27 February 2025","externalUrl":null,"permalink":"/categories/python-course/","section":"Categories","summary":"","title":"Python Course","type":"categories"},{"content":"","date":"27 February 2025","externalUrl":null,"permalink":"/tags/syntax/","section":"Tags","summary":"","title":"Syntax","type":"tags"},{"content":" 2. Syntax and Basics of the Language # Python stands out for its simple and readable syntax. In this section, we will cover the fundamentals of writing Python code.\n1. Indentation: A Mandatory Rule # Unlike other languages that use curly braces {} or keywords (begin / end), Python uses indentation to structure code.\n‚ùå Bad Example (Indentation Error) # if 5 \u0026gt; 2 : print(\u0026#34;Five is greater than 2\u0026#34;) # Error: Missing indentation! ‚úÖ Correct Example # if 5 \u0026gt; 2: print(\u0026#34;Five is greater than 2\u0026#34;) # Correct indentation üìå Rule: Indentation is usually 4 spaces per level (avoid mixed tabs).\n2. Variables and Data Types # A variable is a memory location where a value is stored. Python is dynamically typed, meaning it automatically detects variable types.\nüìå Declaration and Assignment # name = \u0026#34;Alice\u0026#34; # String age = 25 # Integer pi = 3.14 # Float is_active = True # Boolean üìå Main Data Types in Python # Type Example Description str (string) \u0026quot;Hello\u0026quot; Text int (integer) 42 Whole number float (floating point) 3.14 Decimal number bool (boolean) True, False True or False list (list) [1, 2, 3] Mutable collection tuple (tuple) (1, 2, 3) Immutable collection dict (dictionary) {\u0026quot;name\u0026quot;: \u0026quot;Alice\u0026quot;, \u0026quot;age\u0026quot;: 25} Key-Value pair set (set) {\u0026quot;apple\u0026quot;, \u0026quot;banana\u0026quot;} Unique values set 3. Output and Comments # üìå The print() Function # It allows displaying text or variables on the screen.\nprint(\u0026#34;Hello, world!\u0026#34;) name = \u0026#34;Alice\u0026#34; print(\u0026#34;Hello\u0026#34;, name) üëâ Output:\nHello, world! Hello Alice üìå Comments # Comments help explain the code without being executed.\n‚úÖ Single-line comment\n# This is a comment print(\u0026#34;Hello\u0026#34;) # Displaying a message ‚úÖ Multi-line comment\n\u0026#34;\u0026#34;\u0026#34; This is a comment spanning multiple lines. \u0026#34;\u0026#34;\u0026#34; print(\u0026#34;Python is awesome!\u0026#34;) üìå Summary:\n‚úîÔ∏è Python uses indentation to structure code.\n‚úîÔ∏è Variables are dynamic and can store different data types.\n‚úîÔ∏è The print() function allows displaying text.\n‚úîÔ∏è Comments help document code.\nüí° Ready for the next step? Let\u0026rsquo;s dive into operations and expressions in section 3! üöÄ\n","date":"27 February 2025","externalUrl":null,"permalink":"/courses/python/syntaxe/","section":"Courses","summary":"","title":"Syntax and Basics of Python Language","type":"courses"},{"content":"","date":"27 February 2025","externalUrl":null,"permalink":"/tags/variables/","section":"Tags","summary":"","title":"Variables","type":"tags"},{"content":"","date":"26 February 2025","externalUrl":null,"permalink":"/fr/tags/syntaxe/","section":"Tags","summary":"","title":"Syntaxe","type":"tags"},{"content":"","date":"25 February 2025","externalUrl":null,"permalink":"/tags/beginner/","section":"Tags","summary":"","title":"Beginner","type":"tags"},{"content":"","date":"25 February 2025","externalUrl":null,"permalink":"/tags/introduction/","section":"Tags","summary":"","title":"Introduction","type":"tags"},{"content":" Introduction to Python # 1. What is Python? # Python is a high-level programming language known for its simplicity and readability. It is used in various fields:\n‚úÖ Web development\n‚úÖ Data Science and Machine Learning\n‚úÖ Automation and scripting\n‚úÖ Cybersecurity, etc.\nSome key characteristics of Python:\nInterpreted: The code runs line by line. Multi-paradigm: Supports procedural, object-oriented, and functional programming. Rich ecosystem: A vast collection of libraries (Django, NumPy, etc.). üëâ Recommended reading:\nThe Zen of Python üìú Official Documentation üìö 2. Installing Python # Check if Python is already installed\nOpen a terminal and type: python --version Or, depending on your system: python3 --version Install Python\nüìå Windows/Mac: Download Python üìå Linux (Debian/Ubuntu): sudo apt update \u0026amp;\u0026amp; sudo apt install python3 üìå Linux (Void Linux): sudo xbps-install -S python3 3. Testing the Python Interpreter # Once installed, let\u0026rsquo;s test the interpreter:\npython3 An interactive prompt appears:\n\u0026gt;\u0026gt;\u0026gt; print(\u0026#34;Hello, World!\u0026#34;) Hello, World! üí° The Python interpreter allows real-time command execution, making it useful for quickly testing code.\n","date":"25 February 2025","externalUrl":null,"permalink":"/courses/python/introduction/","section":"Courses","summary":"","title":"Introduction to Python","type":"courses"},{"content":" Qu\u0026rsquo;est-ce qu\u0026rsquo;un langage de programmation ? (D√©finition simple) # Un langage de programmation est un moyen de communication entre un humain et un ordinateur. Il permet de donner des instructions √† un ordinateur pour lui dire quoi faire et comment le faire.\nExemple simple # Imaginons que tu veuilles dire √† ton ordinateur :\nüëâ \u0026ldquo;Affiche le texte Bonjour !\u0026rdquo;\nEn fran√ßais, tu √©crirais :\nAffiche le texte \u0026#34;Bonjour !\u0026#34; En Python, √ßa devient :\nprint(\u0026#34;Bonjour !\u0026#34;) Le langage de programmation est donc une fa√ßon structur√©e et logique d‚Äôexprimer une id√©e, que l‚Äôordinateur peut comprendre et ex√©cuter.\nPourquoi en a-t-on besoin ? # Les ordinateurs ne comprennent que des instructions en binaire (des suites de 0 et 1). Or, il est impossible pour un humain de programmer directement en binaire. Un langage de programmation sert donc d‚Äôinterm√©diaire entre l‚Äôhumain et la machine.\nDiff√©rents types de langages de programmation # Langages de bas niveau (proches de la machine, ex : Assembleur, C) Langages de haut niveau (proches du langage humain, ex : Python, JavaScript) Python est un langage de haut niveau : il est con√ßu pour √™tre simple √† lire et √† √©crire.\nüí° Conclusion\nUn langage de programmation est une fa√ßon d‚Äô√©crire des instructions pour qu‚Äôun ordinateur les ex√©cute. Il permet de cr√©er des logiciels, des jeux, des sites web, des robots et bien plus encore !\nüî• Python est l\u0026rsquo;un des langages les plus simples pour d√©buter car il est tr√®s proche du langage naturel.\n","date":"16 February 2025","externalUrl":null,"permalink":"/fr/blog/python/","section":"Langage","summary":"","title":"Blog Python","type":"blog"},{"content":" Pourquoi Python est un excellent premier langage ? # Je me souviens encore de mes premiers pas en programmation. J\u0026rsquo;avais ouvert un √©diteur de code, pr√™t √† √©crire mes premi√®res lignes\u0026hellip; et BAM ! Je suis tomb√© sur un bout de code en C plein d‚Äôaccolades, de points-virgules et de trucs incompr√©hensibles. J\u0026rsquo;ai essay√© de comprendre, mais j\u0026rsquo;avais l\u0026rsquo;impression de d√©chiffrer un langage alien.\nPuis, j‚Äôai d√©couvert Python.\nC‚Äô√©tait simple, lisible, et surtout, √ßa fonctionnait direct sans prise de t√™te. Un vrai game-changer. Si t‚Äôes en train de chercher ton premier langage de programmation, laisse-moi t‚Äôexpliquer pourquoi Python est LE meilleur choix.\n1. Une syntaxe qui ne te prend pas la t√™te # Quand tu d√©butes, t‚Äôas pas envie de te battre avec des syntaxes compliqu√©es. Python, c\u0026rsquo;est litt√©ralement du pseudo-code que m√™me un humain normal peut lire. Pas besoin de g√©rer les accolades ou les d√©clarations de types √† rallonge.\nRegarde ce bout de code en Python :\ndef dire_bonjour(nom): print(f\u0026#34;Salut, {nom}!\u0026#34;) dire_bonjour(\u0026#34;Toi\u0026#34;) C‚Äôest propre, net et sans fioritures. Maintenant, fais la m√™me chose en Java ou C et pr√©pare-toi √† pleurer.\n2. Un couteau suisse pour tout faire # Quand t‚Äôapprends un langage, autant qu‚Äôil serve √† quelque chose, non ? Python, tu peux l‚Äôutiliser pour tout :\nD√©veloppement web (Django, Flask) Automatisation de t√¢ches (scripts pour gagner du temps) Data science et machine learning (Pandas, TensorFlow) Cybers√©curit√© (Pentesting, analyse de logs) Bref, c‚Äôest pas juste un langage \u0026ldquo;pour apprendre\u0026rdquo;, c‚Äôest un vrai outil que tu pourras utiliser longtemps.\n3. Une commu qui assure tes arri√®res # Un autre gros point fort de Python, c‚Äôest sa communaut√©. T‚Äôes bloqu√© ? Y‚Äôa forc√©ment un mec qui a eu le m√™me probl√®me avant toi et qui a post√© la r√©ponse sur Stack Overflow.\nEt justement, sur memlenz, j‚Äôai mis en place une section Cours o√π tu peux apprendre Python tranquillement, sans partir dans tous les sens.\n4. T‚Äôapprends les bases sans gal√©rer # Quand tu commences √† coder, t‚Äôas besoin d‚Äôun langage qui te laisse apprendre la logique avant de t‚Äôembrouiller avec les d√©tails techniques.\nAvec Python, tu peux te concentrer sur l‚Äôessentiel :\n‚úÖ Les variables, conditions, boucles\n‚úÖ Les fonctions, la programmation orient√©e objet\n‚úÖ La gestion des fichiers et des exceptions\nEt comme c‚Äôest un langage interpr√©t√©, pas besoin de compiler √† chaque test. Tu lances ton code et tu vois direct ce qui marche (ou ce qui casse).\n5. Python, c‚Äôest pas juste pour d√©buter # Certains pensent que Python, c‚Äôest juste pour les d√©butants. Faux ! Des bo√Ætes comme Google, Netflix ou Tesla l‚Äôutilisent pour du dev s√©rieux. √áa veut dire que si tu deviens bon en Python, y‚Äôa moyen de l‚Äôutiliser dans des jobs hyper vari√©s :\nüöÄ D√©veloppeur Web\nüìä Data Scientist\nüîê Expert en cybers√©curit√©\nü§ñ Ing√©nieur en intelligence artificielle\nDonc ouais, apprendre Python, c‚Äôest pas juste \u0026ldquo;pour commencer\u0026rdquo;, c‚Äôest aussi un investissement pour l‚Äôavenir.\nConclusion : Aller, il faut apprendre Python # Si j‚Äôavais d√ª commencer avec un autre langage, j‚Äôaurais peut-√™tre abandonn√© en cours de route. Heureusement, Python m‚Äôa montr√© que coder pouvait √™tre simple et fun.\nEt toi, si tu veux apprendre Python avec un cours structur√© et bien expliqu√©, je t‚Äôai pr√©par√© tout √ßa dans la section Cours du blog :\nüëâ Acc√©dez au cours Python ici\nAllez, √† toi de jouer ! üöÄ\n","date":"15 February 2025","externalUrl":null,"permalink":"/fr/blog/python/pourquoi-python/","section":"Langage","summary":"","title":"Pourquoi Python est un excellent premier langage ?","type":"blog"},{"content":"","date":"15 February 2025","externalUrl":null,"permalink":"/tags/c++/","section":"Tags","summary":"","title":"C++","type":"tags"},{"content":"","date":"15 February 2025","externalUrl":null,"permalink":"/tags/java/","section":"Tags","summary":"","title":"Java","type":"tags"},{"content":"Dans ce coin du blog, nous allons plonger dans l\u0026rsquo;univers fascinant des langages de programmation. D√©couvrez les derni√®res tendances, les meilleures pratiques et les secrets des langages tels que : Python, Java, JavaScript et bien d\u0026rsquo;autres. Que vous soyez d√©butant ou expert, cette section est faite pour vous aider √† am√©liorer vos comp√©tences en programmation et √† rester √† jour avec les derni√®res √©volutions du monde de la technologie.\n","date":"15 February 2025","externalUrl":null,"permalink":"/blog/","section":"Langage","summary":"","title":"Langage","type":"blog"},{"content":"","date":"15 February 2025","externalUrl":null,"permalink":"/fr/tags/d%C3%A9veloppement/","section":"Tags","summary":"","title":"D√©veloppement","type":"tags"},{"content":"","date":"15 February 2025","externalUrl":null,"permalink":"/fr/categories/exp%C3%A9rience-personnelle/","section":"Categories","summary":"","title":"Exp√©rience Personnelle","type":"categories"},{"content":"","date":"15 February 2025","externalUrl":null,"permalink":"/fr/categories/informatique/","section":"Categories","summary":"","title":"Informatique","type":"categories"},{"content":"","date":"15 February 2025","externalUrl":null,"permalink":"/fr/tags/productivit%C3%A9/","section":"Tags","summary":"","title":"Productivit√©","type":"tags"},{"content":"","date":"15 February 2025","externalUrl":null,"permalink":"/categories/computer-science/","section":"Categories","summary":"","title":"Computer Science","type":"categories"},{"content":"","date":"15 February 2025","externalUrl":null,"permalink":"/tags/development/","section":"Tags","summary":"","title":"Development","type":"tags"},{"content":"","date":"15 February 2025","externalUrl":null,"permalink":"/tags/linux/","section":"Tags","summary":"","title":"Linux","type":"tags"},{"content":"","date":"15 February 2025","externalUrl":null,"permalink":"/categories/linux--open-source/","section":"Categories","summary":"","title":"Linux \u0026 Open Source","type":"categories"},{"content":"","date":"15 February 2025","externalUrl":null,"permalink":"/tags/open-source/","section":"Tags","summary":"","title":"Open Source","type":"tags"},{"content":"","date":"15 February 2025","externalUrl":null,"permalink":"/categories/personal-experience/","section":"Categories","summary":"","title":"Personal Experience","type":"categories"},{"content":"","date":"15 February 2025","externalUrl":null,"permalink":"/tags/productivity/","section":"Tags","summary":"","title":"Productivity","type":"tags"},{"content":" 1. The Turning Point: How I Won with Linux üöÄ # I didn‚Äôt switch to Linux because it was trendy. I switched because I was fed up with limitations.\nIt all started in my first year of computer science at the IUT of Parakou. A classmate had an insane desktop setup. It looked like a hacker\u0026rsquo;s dream. When I asked, he casually said,\nüí¨ \u0026ldquo;Oh, that\u0026rsquo;s just Kali Linux.\u0026rdquo;\nThat was the first time I saw an OS that wasn‚Äôt Windows. Back in 2023, Windows 10 was the standard, and I never questioned it. But after that encounter, my curiosity kicked in.\nI installed Kali Linux on VirtualBox and started tinkering. The command line immediately hooked me it was powerful, direct, efficient. I even avoided the GUI, trying to do everything in CLI. It felt like hacking the system, but for real.\nBut I had a problem:\nüõë I was still stuck on Windows for coding, testing, and studying.\nThen, one day, Windows broke me.\nI was working on a C project, but I couldn\u0026rsquo;t type \u0026lt; and \u0026gt; properly. Instead of just pressing two keys, I had to either open the on-screen keyboard or memorize awkward combinations (Alt+60, Alt+62). Ridiculous.\nFrustrated, I searched for solutions and came across a Linux dev‚Äôs tutorial. Out of curiosity, I tested his setup and discovered:\nShift + Alt + W for \u0026lt; and Shift + Alt + X for \u0026gt;.\nThat was it.\nüí• The moment I decided I would never code on Windows again.\nI started using WSL (Windows Subsystem for Linux), then dual-booted Linux, until I finally wiped Windows completely. And I‚Äôve never looked back.\n2. The Frustrations I Left Behind ‚ùå # ‚ùå No control ‚Äì Windows and macOS dictate how you use your system. I wanted freedom.\n‚ùå Performance issues ‚Äì Windows slows down with every update. Linux stays fast and efficient.\n‚ùå Bloatware \u0026amp; background processes ‚Äì I hated unnecessary software eating up resources.\n‚ùå Forced updates ‚Äì Windows decides when to restart. Linux lets me be in control.\nSwitching to Linux wasn‚Äôt just about the OS. It was about taking full ownership of my computing experience.\n3. What I Gained with Linux üèÜ # ‚úÖ Speed \u0026amp; efficiency ‚Äì My system runs like a dream. No lag, no random slowdowns.\n‚úÖ Total customization ‚Äì Everything is built to fit my workflow perfectly.\n‚úÖ Privacy \u0026amp; security ‚Äì No forced telemetry. No hidden data collection.\n‚úÖ A hacker mindset ‚Äì Learning Linux taught me how computers actually work.\nLinux didn‚Äôt just change my OS. It changed how I think about technology.\n4. My Linux Journey: From Chaos to Mastery üõ§Ô∏è # I didn‚Äôt master Linux overnight. I broke my system countless times, reinstalled everything, and experimented like crazy.\nHere‚Äôs how my Linux evolution went:\nKali Linux ‚Äì My first experience, but too niche for daily use. Ubuntu WSL \u0026amp; MX Linux ‚Äì First real steps into the Linux world. Linux Mint ‚Äì User-friendly, but too bloated for me. Arch Linux ‚Äì Full control, but installation was brutal. Void Linux ‚Äì My final choice: fast, minimal, and powerful. Every mistake I made taught me something new.\n5. The Game-Changing Discoveries üí° # üí° Tiling Window Managers (i3, bspwm) ‚Üí My workflow became lightning fast.\nüí° Package Management ‚Äì Learning Pacman (Arch), APT (Debian), XBPS (Void).\nüí° Dotfiles \u0026amp; Minimalist Configs ‚Äì Customizing my environment to perfection.\nEach of these boosted my productivity and efficiency beyond what I thought was possible.\n6. Why Void Linux Won Me Over üèÜ # üí® Super lightweight ‚Äì No unnecessary services slowing me down.\n‚ö° XBPS package manager ‚Äì Faster and simpler than APT or Pacman.\nüöÄ No systemd ‚Äì More control over my init system.\nüîÑ Rolling release ‚Äì Always up to date without breaking my setup.\nVoid Linux isn‚Äôt for everyone. But for power users who want simplicity and speed, it‚Äôs unbeatable.\n7. Why You Should Consider Linux in 2025 üìÖ # üí° Stop depending on Big Tech companies controlling your system.\nüí° Get real performance gains ‚Äì No forced obsolescence.\nüí° Own your data ‚Äì No background tracking, telemetry, or forced cloud sync.\nüí° Join an open-source revolution ‚Äì A community built on collaboration.\nWindows and macOS are products.\nLinux is a philosophy.\n8. My Advice for Linux Newcomers üéØ # üü¢ Start with the right distro ‚Äì Ubuntu/Mint if you\u0026rsquo;re new, Arch/Void if you love tinkering.\nüü¢ Learn the terminal ‚Äì cd, ls, mv, grep will change your life.\nüü¢ Break things \u0026amp; learn ‚Äì Don\u0026rsquo;t be afraid to experiment.\nüü¢ Join a community ‚Äì Reddit, Discord, Linux forums are goldmines of knowledge.\nüü¢ Optimize your workflow ‚Äì Neovim, Tmux, Fish/Zsh, and dotfiles will take you to the next level.\n9. Conclusion: More Than Just an OS üî• # Linux isn‚Äôt just software it‚Äôs a way of thinking. It forces you to understand your system, customize it, and push it to its full potential.\nüí° If you‚Äôre tired of closed ecosystems, slow performance, and restrictions, Linux is your way out.\nüî• Follow my journey as I share tutorials, configurations, and deep dives into the Linux world.\nüöÄ Ready to break free? Let‚Äôs hack the system! üöÄ\n","date":"15 February 2025","externalUrl":null,"permalink":"/blog/why-linux/why-linux-made-me-win/","section":"Langage","summary":"","title":"Why Linux","type":"blog"},{"content":"","date":"15 February 2025","externalUrl":null,"permalink":"/portfolio/project2/","section":"Portfolio","summary":"","title":"Project2","type":"portfolio"},{"content":"","date":"15 February 2025","externalUrl":null,"permalink":"/portfolio/project1/","section":"Portfolio","summary":"","title":"Project1","type":"portfolio"},{"content":" Ch√¢-Fine Ay√©doun ADEBI # IT Analyst\nPortfolio | GitHub | Email\nAbout Me # Hi! I\u0026rsquo;m Ch√¢-Fine Ayedoun, a tech enthusiast with a strong passion for software development, performance optimization, and scalability. Currently pursuing a Bachelor\u0026rsquo;s degree in Computer Science, I am constantly looking for new challenges and opportunities to expand my skills and work on innovative projects.\nMy goal is to become a versatile developer, capable of contributing to complex back-end projects, improving system performance, and ensuring scalability. I am also deeply interested in open source and artificial intelligence.\nSkills # Programming Languages # Python, Java, C++, HTML/CSS Frameworks \u0026amp; Tools # Django, Hugo, Qt Creator Development Environments # Linux (Void Linux), Git, Wireshark, LazyVim, i3wm, Alacritty, Rofi, Picom Fields of Interest # Application Scalability Performance Optimization AI Development DevOps \u0026amp; Deployment Automation Languages # French (native) English (intermediate) Projects # Library Management System # Technologies: Java, C++, Qt Creator\nDescription:\nI designed and developed a comprehensive library management system, focusing on optimizing the structure and performance compared to existing solutions. This project helped me deepen my knowledge in database management, search algorithms, and cross-platform development.\nView Project on GitHub\nBlog with Hugo \u0026amp; GitHub Pages # Technologies: Hugo, GitHub Pages\nDescription:\nThis blog was created to share resources, tutorials, and my thoughts on technology. Through this project, I explored static site generators, code modularity, and web performance optimization. It also serves as a great personal project where I strengthened my web development skills.\nVisit the Blog\nArtificial Intelligence with AIMA Python # Technologies: Python, AIMA Python\nDescription:\nThis project allowed me to explore various artificial intelligence algorithms using the AIMA Python library, focusing on techniques like informed search, neural networks, and automated planning. I deepened my skills in algorithms and complex problem-solving through this project.\nView Project on GitHub\nExperience # Although I am still a student, I have participated in various academic and personal projects that have given me a solid understanding of software development fundamentals. I am always looking for opportunities to apply these skills in real-world professional contexts.\nTestimonials # \u0026ldquo;Ch√¢-Fine is an extremely skilled and autonomous developer. His work on the library management project exceeded our expectations in terms of performance and modularity.\u0026rdquo;\n‚Äì Project Lead, Computer Science Department\n\u0026ldquo;His rigor and passion for open source make him a valuable asset to any development team. He solves problems in an innovative and efficient way.\u0026rdquo;\n‚Äì Project Teammate, Web Development\nContact # If you‚Äôd like to discuss my projects, ask questions, or collaborate on new challenges, feel free to contact me.\nEmail: achafine@gmail.com\nGitHub: memlenz\nPortfolio: https://memlenz.github.io/\n","date":"15 February 2025","externalUrl":null,"permalink":"/portfolio/","section":"Portfolio","summary":"","title":"Portfolio","type":"portfolio"},{"content":"","date":"15 February 2025","externalUrl":null,"permalink":"/tags/portfolio/","section":"Tags","summary":"","title":"Portfolio","type":"tags"},{"content":"","date":"15 February 2025","externalUrl":null,"permalink":"/tutorials/hugo-setup/","section":"Tutorials","summary":"","title":"Hugo Setup","type":"tutorials"},{"content":"","date":"15 February 2025","externalUrl":null,"permalink":"/tutorials/git-workflows/","section":"Tutorials","summary":"","title":"Git Workflows","type":"tutorials"},{"content":"","date":"15 February 2025","externalUrl":null,"permalink":"/tutorials/git-workflows/git-commands/","section":"Tutorials","summary":"","title":"Git Commands","type":"tutorials"},{"content":"","date":"15 February 2025","externalUrl":null,"permalink":"/tutorials/","section":"Tutorials","summary":"","title":"Tutorials","type":"tutorials"},{"content":"","date":"15 February 2025","externalUrl":null,"permalink":"/parcours/","section":"Parcours","summary":"","title":"Parcours","type":"parcours"},{"content":" üìö Courses # Welcome to the Courses section of memlenz! Here, you will find detailed and structured courses to learn and deepen your knowledge in computer science.\nüìå Objective # The goal of this section is to provide a progressive and rigorous learning experience covering:\nProgramming fundamentals: Understanding the basics of languages and paradigms. Data structures and algorithms: Developing solid reflexes to efficiently solve problems. Web development and DevOps: Mastering modern tools and best practices to build and deploy applications. üèÜ Who is this section for? # Whether you are a beginner or an experienced developer, these courses will guide you with a clear and educational approach while deepening essential technical aspects.\nüìñ Content # The courses are organized by categories and levels and include:\nDetailed and illustrated explanations. Concrete examples and practical code. Exercises and challenges to test your skills. üöÄ Start Your Learning Journey # Browse through the different categories and find the course that matches your level and goals. Happy learning! üî•\n","date":"15 February 2025","externalUrl":null,"permalink":"/courses/","section":"Courses","summary":"","title":"Courses","type":"courses"},{"content":"","date":"15 February 2025","externalUrl":null,"permalink":"/blog/dsa-guide/dsa-intro/","section":"Langage","summary":"","title":"DSA","type":"blog"},{"content":"","externalUrl":null,"permalink":"/authors/","section":"Authors","summary":"","title":"Authors","type":"authors"},{"content":"","externalUrl":null,"permalink":"/series/","section":"Series","summary":"","title":"Series","type":"series"}]