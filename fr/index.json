


[{"content":"","date":"25 avril 2025","externalUrl":null,"permalink":"/fr/categories/blog-python/","section":"Categories","summary":"","title":"Blog Python","type":"categories"},{"content":"","date":"25 avril 2025","externalUrl":null,"permalink":"/fr/categories/","section":"Categories","summary":"","title":"Categories","type":"categories"},{"content":"","date":"25 avril 2025","externalUrl":null,"permalink":"/fr/tags/fichiers/","section":"Tags","summary":"","title":"Fichiers","type":"tags"},{"content":" 👨‍💻 Bienvenue sur Memlenz # Memlenz est un espace où le code rencontre l\u0026rsquo;efficacité. Ici, je documente mon parcours à travers :\n🚀 Linux \u0026amp; Personnalisation – Maîtriser Void Linux, les dotfiles et le ricing.\n🛠️ DevOps \u0026amp; Automatisation – CI/CD, Docker, Kubernetes et optimisation des systèmes.\n🧠 DSA \u0026amp; Résolution de Problèmes – Plongée approfondie dans les Structures de Données \u0026amp; Algorithmes.\n🌍 Développement Web – Django, Hugo, APIs et stacks web modernes.\n🔥 Ce que vous trouverez ici # Tutoriels \u0026amp; Guides – Ressources étape par étape pour les développeurs. Journaux de Développement – Mes notes personnelles sur Linux, le codage et les optimisations. Vitrines de Projets – Un portfolio de mes expériences et réalisations. Parcours d\u0026rsquo;Apprentissage DSA – Apprentissage structuré pour de meilleures habitudes de codage. \u0026ldquo;Le code est comme une lentille le focus définit la clarté.\u0026rdquo;\n🚀 Prêt à explorer ? # Construisons, décomposons et optimisons. 🖥️\n","date":"25 avril 2025","externalUrl":null,"permalink":"/fr/","section":"Memlenz – Chroniques de Code, DevOps \u0026 Linux","summary":"","title":"Memlenz – Chroniques de Code, DevOps \u0026 Linux","type":"page"},{"content":"","date":"25 avril 2025","externalUrl":null,"permalink":"/fr/tags/organisation/","section":"Tags","summary":"","title":"Organisation","type":"tags"},{"content":" Pourquoi organiser ses scripts Python ? # Quand on commence à coder en Python, on a souvent tendance à tout mettre en vrac sur le bureau ou dans Documents/. Mauvaise idée. Une bonne organisation des fichiers et dossiers évite le chaos et facilite la gestion des projets.\nChaque OS (Windows, Linux, macOS) a ses propres conventions pour structurer ses scripts Python proprement. Voyons comment faire ça bien.\n1. Organisation recommandée (indépendante de l\u0026rsquo;OS) # Peu importe le système, une bonne structure générale pourrait ressembler à ceci :\n📁 MesProjetsPython/ ├── 📁 projet1/ │ ├── main.py │ ├── utils.py │ ├── requirements.txt │ └── README.md ├── 📁 projet2/ ├── 📁 scripts_utiles/ │ ├── convertisseur.py │ ├── nettoyeur_logs.py ├── 📁 envs/ (environnements virtuels) ├── 📁 archives/ └── README.md Chaque projet a son propre dossier (projet1/, projet2/). Les scripts indépendants sont regroupés (scripts_utiles/). Les environnements virtuels sont isolés (envs/). Les anciens projets peuvent être archivés (archives/). 2. Où placer son dossier Python selon l’OS ? # 🔵 Sous Windows # Windows aime mettre les fichiers partout, mais voici la bonne pratique :\n📍 Chemin recommandé : C:\\Users\\TON_UTILISATEUR\\Documents\\Python\\\nC:\\Users\\TON_UTILISATEUR\\Documents\\Python\\ ✅ Avantages :\n✔️ Évite d’avoir du code éparpillé sur le bureau.\n✔️ Compatible avec les sauvegardes automatiques OneDrive (si activé).\n⚠️ Éviter :\n❌ C:\\Python\\ (trop générique, peut interférer avec les installations système).\n❌ C:\\Program Files\\ (demande des droits admin inutiles).\n🟢 Sous Linux # 📍 Chemin recommandé : ~/Documents/Python/ ou ~/dev/python/\n/home/ton_utilisateur/Documents/Python/ ✅ Avantages :\n✔️ Respecte la structure standard des dossiers utilisateur.\n✔️ Facile à gérer avec le terminal (cd ~/Documents/Python/).\n⚠️ Éviter :\n❌ /usr/bin/ ou /opt/ (ces dossiers sont pour les programmes système, pas pour ton code).\n❌ Mettre ses scripts directement dans ~/ (ça devient vite le bazar).\n🍏 Sous macOS # 📍 Chemin recommandé : ~/Documents/Python/ ou ~/Developer/Python/\n/Users/ton_utilisateur/Documents/Python/ ✅ Avantages :\n✔️ Aligné avec les conventions Mac.\n✔️ Compatible avec iCloud Drive si besoin.\n⚠️ Éviter :\n❌ /System/Library/ ou /Applications/ (ne touche pas à ces dossiers).\n❌ Mettre ses scripts dans ~/Desktop/ (ton bureau ne doit pas être une décharge 🚮).\n3. Comment exécuter un script proprement ? # Peu importe l\u0026rsquo;OS, une fois ton script organisé dans un bon dossier, exécute-le depuis le terminal :\ncd ~/Documents/Python/projet1 python3 main.py Si tu veux éviter de taper python3, crée un alias (Linux/macOS) ou modifie ton PATH sous Windows.\n4. Conclusion # Peu importe ton OS, une bonne organisation de tes scripts Python te facilitera la vie. Prends l’habitude de structurer tes fichiers dès le début, ça évitera le chaos plus tard.\nRègle d’or : un projet = un dossier. Un script indépendant = dans un dossier scripts_utiles/. Et surtout, évite de tout mettre sur ton bureau.\n🛠️ Maintenant, organise tes fichiers et commence à coder proprement ! 🚀\n","date":"25 avril 2025","externalUrl":null,"permalink":"/fr/blog/python/organiser-ses-scripts/","section":"Langage","summary":"","title":"Organiser ses scripts Python proprement sur chaque OS","type":"blog"},{"content":"","date":"25 avril 2025","externalUrl":null,"permalink":"/fr/tags/os/","section":"Tags","summary":"","title":"OS","type":"tags"},{"content":"","date":"25 avril 2025","externalUrl":null,"permalink":"/fr/tags/python/","section":"Tags","summary":"","title":"Python","type":"tags"},{"content":"","date":"25 avril 2025","externalUrl":null,"permalink":"/fr/tags/","section":"Tags","summary":"","title":"Tags","type":"tags"},{"content":"","date":"20 avril 2025","externalUrl":null,"permalink":"/fr/tags/chemins/","section":"Tags","summary":"","title":"Chemins","type":"tags"},{"content":" Introduction : Pourquoi les chemins système sont importants ? # Quand on installe Python et qu’on essaie de l’exécuter, on peut se retrouver face à un message frustrant du genre :\npython : commande introuvable Ou pire encore, sous Windows :\n\u0026#39;python\u0026#39; n’est pas reconnu en tant que commande interne ou externe, un programme exécutable ou un fichier de commandes. C’est là qu’interviennent les chemins système. Un chemin système, c’est simplement l’adresse d’un fichier ou d’un dossier sur ton disque dur. Et si ton terminal ne trouve pas Python, c\u0026rsquo;est probablement parce qu\u0026rsquo;il ne sait pas où le chercher.\n1. Comprendre les chemins sous Windows, Linux et macOS # Chaque système d\u0026rsquo;exploitation a sa propre façon de gérer les chemins et de retrouver un programme.\nWindows : Chemins absolus, relatifs et le PATH # Sous Windows, un chemin peut ressembler à ça :\nC:\\Users\\TonNom\\AppData\\Local\\Programs\\Python\\python.exe On distingue :\nLes chemins absolus : le chemin complet vers un fichier ou un programme. Les chemins relatifs : un chemin qui commence à partir du dossier où on se trouve (.\\monfichier.py). Le PATH : une liste d’endroits où Windows va chercher les programmes quand tu tapes une commande (python par exemple). 💡 Problème courant : Si python n’est pas reconnu, c’est que son chemin n’est pas dans le PATH.\nComment ajouter Python au PATH sous Windows ? # Ouvre une invite de commande (Win + R, tape cmd, et valide). Tape : echo %PATH% Ça affiche tous les répertoires où Windows cherche des programmes. Si le chemin de Python n\u0026rsquo;est pas dedans, ajoute-le manuellement : Rechercher \u0026ldquo;Variables d’environnement\u0026rdquo; dans le menu Démarrer. Modifier la variable Path et ajouter : C:\\Users\\TonNom\\AppData\\Local\\Programs\\Python\\ Redémarre le terminal et teste à nouveau : python --version Linux \u0026amp; macOS : Tout est un fichier # Sous Linux/macOS, les chemins ressemblent à ça :\n/home/tonnom/.local/bin/python3 Ou sur macOS :\n/Library/Frameworks/Python.framework/Versions/3.11/bin/python3 Ici, tout est un fichier, même les programmes.\nVérifier si Python est installé # Ouvre un terminal et tape :\nwhich python3 Si Python est installé, ça renverra son chemin. Sinon, il faut l’installer (sudo apt install python3 sur Debian/Ubuntu).\nLe PATH sous Linux/macOS # Linux/macOS utilisent une variable similaire à Windows pour savoir où chercher les programmes :\necho $PATH Si Python n’est pas détecté, on peut ajouter son chemin dans .bashrc ou .zshrc :\nexport PATH=\u0026#34;$HOME/.local/bin:$PATH\u0026#34; Ensuite, recharge le terminal :\nsource ~/.bashrc # ou source ~/.zshrc Conclusion # Les chemins système sont la clé pour exécuter des programmes correctement. Que tu sois sur Windows, Linux ou macOS, comprendre comment fonctionne PATH t’évitera bien des galères !\nSi tu as des erreurs, vérifie toujours : ✔️ Où Python est installé (where python sous Windows, which python3 sous Linux/macOS).\n✔️ Si son chemin est bien dans la variable PATH.\n✔️ Si ton terminal est bien redémarré après les changements.\n💡 Prochain article : Comment organiser ses scripts Python proprement sur chaque OS ?\n","date":"20 avril 2025","externalUrl":null,"permalink":"/fr/blog/python/les-chemins/","section":"Langage","summary":"","title":"Comprendre les chemins système sous Windows, Linux et macOS","type":"blog"},{"content":"","date":"20 avril 2025","externalUrl":null,"permalink":"/fr/tags/d%C3%A9butant/","section":"Tags","summary":"","title":"Débutant","type":"tags"},{"content":"","date":"20 avril 2025","externalUrl":null,"permalink":"/fr/tags/path/","section":"Tags","summary":"","title":"PATH","type":"tags"},{"content":"","date":"20 avril 2025","externalUrl":null,"permalink":"/fr/tags/terminal/","section":"Tags","summary":"","title":"Terminal","type":"tags"},{"content":"","date":"17 avril 2025","externalUrl":null,"permalink":"/fr/tags/interpr%C3%A9teur/","section":"Tags","summary":"","title":"Interpréteur","type":"tags"},{"content":" Python 2 vs Python 3 : Un duel dépassé ? # Si tu débutes en Python, tu as peut-être déjà vu des références à Python 2 et Python 3. Pourtant, la plupart des tutoriels d\u0026rsquo;aujourd\u0026rsquo;hui parlent uniquement de Python 3. Alors, c\u0026rsquo;est quoi cette histoire ? Pourquoi il y avait deux versions majeures ? Et surtout, est-ce que ça te concerne en 2025 ?\nUn peu d’histoire # Python a été créé en 1991 par Guido van Rossum, et pendant longtemps, Python 2 était la norme. Mais en 2008, une nouvelle version majeure est sortie : Python 3. Le problème ? Python 3 n\u0026rsquo;était pas rétrocompatible, c\u0026rsquo;est-à-dire qu\u0026rsquo;un programme écrit en Python 2 ne fonctionnait pas forcément en Python 3.\nPython 2 : Un dinosaure encore vivant ? # Pendant plus de 10 ans, beaucoup de développeurs ont refusé de passer à Python 3 parce que leurs projets étaient bloqués en Python 2. Mais en 2020, Python 2 est officiellement mort : plus de mises à jour, plus de support, plus de corrections de sécurité.\n👉 Si tu commences aujourd’hui, oublie Python 2.\nLes vraies différences entre Python 2 et 3 # Catégorie Python 2 Python 3 Support Abandonné en 2020 ⚠️ Actif et recommandé ✅ print print \u0026quot;Hello\u0026quot; ❌ print(\u0026quot;Hello\u0026quot;) ✅ input() raw_input() et input() 🤯 Juste input() ✅ Unicode Texte en ASCII par défaut ❌ Texte en UTF-8 par défaut ✅ Division (/) 5 / 2 = 2 ❌ (arrondi) 5 / 2 = 2.5 ✅ (correct) En gros, Python 3 corrige tous les défauts de Python 2 et apporte plein d\u0026rsquo;améliorations.\nPourquoi on en parle encore ? # Certains anciens projets sont encore en Python 2, donc si tu bosses sur un vieux code, tu pourrais y être confronté. Mais à 99%, tu peux ignorer Python 2.\nConclusion : Python 3, point final # Python 2 est mort, ne l’apprends pas. Python 3 est plus simple, plus puissant et mieux supporté. Si tu tombes sur du vieux code en Python 2, essaye de le convertir en Python 3. Bref, si quelqu’un te parle encore de Python 2 aujourd’hui\u0026hellip; réponds-lui juste : \u0026ldquo;C’est fini, frérot.\u0026rdquo; 😆\n","date":"17 avril 2025","externalUrl":null,"permalink":"/fr/blog/python/python2-vs-python3/","section":"Langage","summary":"","title":"Python 2 vs Python 3 : Pourquoi c’est important ?","type":"blog"},{"content":"","date":"17 avril 2025","externalUrl":null,"permalink":"/fr/tags/versions/","section":"Tags","summary":"","title":"Versions","type":"tags"},{"content":"","date":"16 avril 2025","externalUrl":null,"permalink":"/fr/tags/archlinux/","section":"Tags","summary":"","title":"Archlinux","type":"tags"},{"content":"","date":"16 avril 2025","externalUrl":null,"permalink":"/fr/categories/base-de-donn%C3%A9es/","section":"Categories","summary":"","title":"Base De Données","type":"categories"},{"content":"","date":"16 avril 2025","externalUrl":null,"permalink":"/fr/tags/base-de-donn%C3%A9es/","section":"Tags","summary":"","title":"Base De Données","type":"tags"},{"content":"","date":"16 avril 2025","externalUrl":null,"permalink":"/categories/database/","section":"Categories","summary":"","title":"Database","type":"categories"},{"content":"","date":"16 avril 2025","externalUrl":null,"permalink":"/fr/tags/database/","section":"Tags","summary":"","title":"Database","type":"tags"},{"content":"","date":"16 avril 2025","externalUrl":null,"permalink":"/fr/tags/debian/","section":"Tags","summary":"","title":"Debian","type":"tags"},{"content":"","date":"16 avril 2025","externalUrl":null,"permalink":"/fr/categories/devops/","section":"Categories","summary":"","title":"Devops","type":"categories"},{"content":" Pourquoi choisir MariaDB au lieu de MySQL ? # MariaDB est un fork open source de MySQL initié par les développeurs originaux de MySQL. Il a été créé en réponse aux inquiétudes concernant le rachat de MySQL par Oracle.\n✅ Pourquoi préférer MariaDB : # 100% libre et communautaire — Maintenu par la communauté et la fondation MariaDB. Compatible avec MySQL — Même syntaxe SQL, mêmes clients, migration simple. Performances solides et mises à jour fréquentes. Utilisé par Arch Linux par défaut au lieu de MySQL. En résumé : pour les développeurs open source et les utilisateurs Arch Linux, MariaDB est le choix naturel.\n🔧 Étapes d\u0026rsquo;installation de MariaDB # 1. 📦 Installation du paquet # sudo pacman -S mariadb # arch linux sudo xbps-install -S mariadb # void linux sudo apt install mariadb # debian/ubuntu 2. 🛠️ Initialiser la base de données # sudo mariadb-install-db --user=mysql --basedir=/usr --datadir=/var/lib/mysql Cette commande crée les fichiers nécessaires pour que le serveur fonctionne.\n3. 🚀 Activer et démarrer le service MariaDB # sudo systemctl enable --now mariadb # arch-linux/debian/ubuntu sudo ln -s /etc/sv/mariadb /var/service/ # void linux enable le démarre automatiquement au boot, --now le démarre immédiatement.\n4. 🔐 Sécuriser l\u0026rsquo;installation avec mariadb-secure-installation # Lance la commande suivante :\nsudo mariadb-secure-installation Voici les réponses recommandées :\nQuestion Réponse recommandée Explication Enter current password for root Entrée (vide) Aucun mot de passe par défaut Switch to unix_socket authentication? n Permet l\u0026rsquo;accès avec mot de passe (plus pratique pour le dev) Set root password? y Défini un mot de passe root Remove anonymous users? y Supprime les utilisateurs sans identifiants Disallow root login remotely? y Désactive les connexions root distantes (sécurité) Remove test database and access to it? y Supprime la base de test par défaut Reload privilege tables now? y Applique tous les changements ✅ Tester la connexion # mariadb -u root -p Entre ton mot de passe root défini précédemment.\n🧰 Bonus : créer un utilisateur et une base # CREATE DATABASE nom_de_ta_base; CREATE USER \u0026#39;nom_utilisateur\u0026#39;@\u0026#39;localhost\u0026#39; IDENTIFIED BY \u0026#39;motdepasse\u0026#39;; GRANT ALL PRIVILEGES ON nom_de_ta_base.* TO \u0026#39;nom_utilisateur\u0026#39;@\u0026#39;localhost\u0026#39;; FLUSH PRIVILEGES; 🎉 Conclusion # Tu as maintenant une base de données MariaDB propre, sécurisée et prête à l’emploi sur Arch Linux.\nMariaDB offre une alternative open source puissante à MySQL, sans compromis sur la compatibilité ni la performance.\nBesoin d’un outil graphique ? Essaie dbeaver ou mysql-workbench.\n","date":"16 avril 2025","externalUrl":null,"permalink":"/fr/blog/linux-tweaks/mysql-mariadb/","section":"Langage","summary":"","title":"Installer MariaDB sur Arch Linux, Void Linux, et Debian/Ubuntu","type":"blog"},{"content":" 🐘 Pourquoi PostgreSQL ? # PostgreSQL est un SGBD relationnel open source puissant, robuste et très utilisé dans les environnements de production modernes. Il est apprécié pour :\nSa conformité aux standards SQL Sa gestion avancée des types de données Son système d’extensions (comme PostGIS, pg_trgm, etc.) Sa stabilité et sa communauté active 🏗️ Installation par distribution # 📦 Arch Linux # 1. Installer PostgreSQL # sudo pacman -S postgresql 2. Initialiser la base # sudo -iu postgres initdb -D /var/lib/postgres/data 3. Activer et démarrer le service # sudo systemctl enable --now postgresql 4. Se connecter # sudo -iu postgres psql 📦 Void Linux # 1. Installer PostgreSQL # sudo xbps-install -S postgresql 2. Initialiser la base # sudo -u postgres initdb -D /var/lib/postgresql/data 3. Activer avec runit # sudo ln -s /etc/sv/postgresql /var/service/ 4. Vérifier que c’est actif # sv status postgresql 5. Se connecter # sudo -iu postgres psql 📦 Debian / Ubuntu # 1. Installer PostgreSQL # sudo apt update sudo apt install postgresql PostgreSQL est automatiquement initialisé et activé avec systemd.\n2. Vérifier que le service est actif # sudo systemctl status postgresql 3. Se connecter # sudo -iu postgres psql 🔐 Sécurisation et utilisateur # Par défaut, PostgreSQL utilise l’authentification \u0026ldquo;peer\u0026rdquo; : seul l’utilisateur Unix postgres peut se connecter sans mot de passe.\nPour créer un utilisateur SQL avec mot de passe (et une base associée) :\n-- connecté dans psql : CREATE USER dev WITH PASSWORD \u0026#39;motdepasse\u0026#39;; CREATE DATABASE projet OWNER dev; GRANT ALL PRIVILEGES ON DATABASE projet TO dev; Tu peux ensuite te connecter avec :\npsql -U dev -d projet -h localhost ⚙️ Configuration avancée (optionnelle) # Fichier pg_hba.conf pour configurer les méthodes d’authentification Fichier postgresql.conf pour tuning (écoute réseau, journalisation, etc.) Ces fichiers sont situés dans :\n/var/lib/postgres/data/ (Arch) /var/lib/postgresql/data/ (Void) /etc/postgresql/*/main/ (Debian/Ubuntu) 🎉 Conclusion # PostgreSQL est désormais installé et prêt à l’emploi sur ta distro Linux préférée.\nChaque distribution a ses petites particularités (init, services), mais la logique reste la même.\nAstuce : pense à installer pgcli pour une meilleure expérience en ligne de commande !\n","date":"16 avril 2025","externalUrl":null,"permalink":"/fr/blog/linux-tweaks/postgre-sql/","section":"Langage","summary":"","title":"Installer PostgreSQL sur Arch, Void Linux et Debian/Ubuntu","type":"blog"},{"content":"","date":"16 avril 2025","externalUrl":null,"permalink":"/fr/categories/linux/","section":"Categories","summary":"","title":"Linux","type":"categories"},{"content":"","date":"16 avril 2025","externalUrl":null,"permalink":"/fr/tags/linux/","section":"Tags","summary":"","title":"Linux","type":"tags"},{"content":"","date":"16 avril 2025","externalUrl":null,"permalink":"/fr/tags/linux-tweaks/","section":"Tags","summary":"","title":"Linux Tweaks","type":"tags"},{"content":"","date":"16 avril 2025","externalUrl":null,"permalink":"/fr/tags/mariadb/","section":"Tags","summary":"","title":"Mariadb","type":"tags"},{"content":"","date":"16 avril 2025","externalUrl":null,"permalink":"/fr/tags/mysql/","section":"Tags","summary":"","title":"Mysql","type":"tags"},{"content":"","date":"16 avril 2025","externalUrl":null,"permalink":"/fr/tags/postgresql/","section":"Tags","summary":"","title":"Postgresql","type":"tags"},{"content":"","date":"16 avril 2025","externalUrl":null,"permalink":"/tags/tutorial/","section":"Tags","summary":"","title":"Tutorial","type":"tags"},{"content":"","date":"16 avril 2025","externalUrl":null,"permalink":"/fr/tags/tutoriel/","section":"Tags","summary":"","title":"Tutoriel","type":"tags"},{"content":"","date":"16 avril 2025","externalUrl":null,"permalink":"/fr/tags/ubuntu/","section":"Tags","summary":"","title":"Ubuntu","type":"tags"},{"content":"","date":"16 avril 2025","externalUrl":null,"permalink":"/fr/tags/voidlinux/","section":"Tags","summary":"","title":"Voidlinux","type":"tags"},{"content":" Créer un Gestionnaire de Mots de Passe en CLI avec Python # Dans un monde où la sécurité de nos informations personnelles est devenue incontournable, j\u0026rsquo;ai voulu réaliser un projet simple mais efficace : un gestionnaire de mots de passe en ligne de commande (CLI). Cet outil, développé en Python, permet de générer des mots de passe robustes, de les sauvegarder dans un fichier JSON et de les manipuler via une interface textuelle intuitive. Dans cet article, je vous montre comment quelques dizaines de lignes de code bien structurées peuvent mettre en œuvre des concepts avancés en programmation et en sécurité.\nLe Contexte et le Problème # Nous utilisons quotidiennement de nombreux mots de passe pour protéger nos comptes et nos données sensibles. Il devient alors crucial de disposer d’un outil qui aide à :\nGénérer des mots de passe sécurisés : En combinant aléatoirement des lettres, des chiffres et des caractères spéciaux. Gérer et stocker ces mots de passe : Afin d’éviter la réutilisation de mots de passe faibles ou la perte de ceux-ci. Faciliter l’accès : En permettant de récupérer rapidement le mot de passe associé à un compte via une interface en ligne de commande. Traditionnellement, les solutions existantes peuvent être lourdes ou complexes pour un usage personnel. C’est là qu’intervient notre gestionnaire de mots de passe en CLI : il est léger, personnalisable et entièrement réalisé en Python.\nLa Solution : passwordManager.py # Le script passwordManager.py propose une solution complète en offrant les fonctionnalités suivantes :\nGénération de mots de passe sécurisés\nGrâce au module secrets, le programme crée des mots de passe forts en combinant lettres, chiffres et caractères spéciaux.\nSauvegarde et chargement via JSON\nLes mots de passe sont stockés dans un fichier JSON. Le code gère intelligemment les erreurs liées à la lecture du fichier (fichier inexistant ou corrompu) pour assurer une robustesse accrue.\nInterface en Ligne de Commande avec argparse\nUne interface intuitive permet à l’utilisateur d’enregistrer, récupérer, supprimer et lister les mots de passe grâce à des commandes claires (save, get, del, gen, list).\nUtilisation du Presse-papiers\nL’intégration du module pyperclip permet de copier automatiquement le mot de passe récupéré dans le presse-papiers, ce qui simplifie son utilisation.\nVoici un extrait de la structure du code :\ndef generate_password(): \u0026#34;\u0026#34;\u0026#34;Générer un mot de passe sécurisé\u0026#34;\u0026#34;\u0026#34; characters = \u0026#39;\u0026#39; if NEED_STRING: characters += string.ascii_letters if NEED_DIGITS: characters += string.digits if NEED_SPECIAL_CHARACTERS: characters += string.punctuation return \u0026#39;\u0026#39;.join(secrets.choice(characters) for _ in range(PASSWORD_LENGTH)) Ce passage montre la façon dont la génération de mot de passe est réalisée en tirant profit de la sécurité offerte par le module secrets.\nCompétences Python Démontrées # 1. Programmation modulaire et procédurale # Organisation claire du code : Chaque fonctionnalité (génération, sauvegarde, chargement, suppression) est implémentée dans une fonction dédiée, facilitant la maintenance et l\u0026rsquo;évolution du projet. Point d\u0026rsquo;entrée principal : La fonction main() centralise l\u0026rsquo;exécution du script en s\u0026rsquo;appuyant sur le module argparse pour gérer différentes commandes. 2. Gestion des Exceptions et Robustesse du Code # Anticipation des erreurs : La fonction load_passwords() intègre des blocs try-except pour gérer les erreurs liées à la manipulation de fichiers JSON, assurant la continuité de l’exécution même en cas de problèmes. 3. Manipulation de fichiers avec JSON # Stockage des données : La sérialisation et la désérialisation des mots de passe dans un fichier JSON permettent une persistance simple des données, tout en restant facilement consultables et modifiables. 4. Sécurité et Génération de Mots de Passe # Utilisation du module secrets : Cette méthode offre une robustesse inégalée dans la génération de chaînes aléatoires, essentielles pour la sécurité des comptes. Configuration flexible : Les constantes en haut du script permettent d’ajuster rapidement la longueur des mots de passe et le type de caractères utilisés, pour répondre à divers besoins de sécurité. 5. Interface en Ligne de Commande # Convivialité : Grâce à argparse, l’utilisateur peut interagir avec le programme en utilisant des commandes simples et explicites, rendant l’outil accessible même aux débutants. Applications et Perspectives # Ce gestionnaire de mots de passe en CLI représente bien plus qu’un exercice de programmation. En le développant, j\u0026rsquo;ai pu approfondir ma maîtrise de la sécurité appliquée, de la gestion d\u0026rsquo;erreurs et des techniques de manipulation de données en Python.\nDans un contexte professionnel ou personnel, un tel outil peut servir de base à des projets plus ambitieux, par exemple :\nIntégrer un chiffrement du fichier JSON pour renforcer la protection des données sensibles. Mettre en place un système de logging pour mieux diagnostiquer et résoudre d\u0026rsquo;éventuels problèmes en production. Développer une interface graphique pour rendre l’outil accessible à un public non technique. Conclusion # Réussir à créer un gestionnaire de mots de passe en CLI avec Python est une belle démonstration de l\u0026rsquo;application concrète de diverses compétences en programmation. Ce projet prouve qu\u0026rsquo;avec une bonne architecture de code et une attention particulière portée à la sécurité et à la robustesse, il est tout à fait possible de développer des outils efficaces et utiles pour notre quotidien numérique.\nQuelles fonctionnalités ajouteriez-vous à ce gestionnaire de mots de passe ? Partagez vos idées et vos retours dans les commentaires. Ensemble, continuons à repousser les limites de ce que nous pouvons réaliser avec Python !\n📌 Suivez-moi pour plus de contenus sur Python et le développement logiciel !\n👉 Dev.to / GitHub / Twitter\n","date":"13 avril 2025","externalUrl":null,"permalink":"/fr/blog/python/passwordmanager/","section":"Langage","summary":"","title":"🔒 Créer un Gestionnaire de Mots de Passe en CLI avec Python","type":"blog"},{"content":"","date":"13 avril 2025","externalUrl":null,"permalink":"/fr/tags/cli/","section":"Tags","summary":"","title":"Cli","type":"tags"},{"content":"","date":"13 avril 2025","externalUrl":null,"permalink":"/fr/tags/gestion-de-mots-de-passe/","section":"Tags","summary":"","title":"Gestion De Mots De Passe","type":"tags"},{"content":"","date":"13 avril 2025","externalUrl":null,"permalink":"/fr/categories/projets-python/","section":"Categories","summary":"","title":"Projets Python","type":"categories"},{"content":"","date":"10 avril 2025","externalUrl":null,"permalink":"/fr/tags/installation/","section":"Tags","summary":"","title":"Installation","type":"tags"},{"content":" Pourquoi installer Python ? # Avant de se lancer dans la programmation avec Python, il faut d\u0026rsquo;abord l\u0026rsquo;avoir sur sa machine. Contrairement à certains langages qui viennent déjà intégrés aux systèmes d’exploitation, Python doit être installé manuellement sur Windows, et parfois mis à jour sur Linux et macOS.\nInstaller Python sur Windows 🖥️ # Sur Windows, Python n\u0026rsquo;est pas installé par défaut. Voici comment l\u0026rsquo;obtenir :\n1. Télécharger Python # Rendez-vous sur le site officiel : python.org. Prenez la dernière version stable (évitez les versions en bêta). Téléchargez l’installateur Windows Installer (64-bit). 2. Lancer l’installation # Cochez l’option \u0026ldquo;Add Python to PATH\u0026rdquo; avant d’installer.\n(C\u0026rsquo;est crucial pour pouvoir exécuter python dans le terminal sans galère.) Cliquez sur \u0026ldquo;Install Now\u0026rdquo; et laissez faire. 3. Vérifier l’installation # Ouvrez une invite de commande (Win + R → tapez cmd → Entrée).\nTapez :\npython --version Si ça affiche une version comme Python 3.x.x, tout est bon ! 🎉\nSi ça ne marche pas, votre terminal ne trouve pas Python. Dans ce cas, redémarrez votre PC ou ajoutez manuellement Python au PATH.\nInstaller Python sur Linux 🐧 # La plupart des distributions Linux viennent avec Python préinstallé. Pour vérifier :\npython3 --version Si Python n\u0026rsquo;est pas installé ou si vous voulez la dernière version :\nDebian / Ubuntu # sudo apt update \u0026amp;\u0026amp; sudo apt install python3 Arch Linux # sudo pacman -S python Void Linux # sudo xbps-install -S python3 Une fois installé, testez avec python3 --version.\nInstaller Python sur macOS 🍏 # Sur Mac, Python est déjà installé, mais souvent en version ancienne. Mieux vaut utiliser Homebrew pour une version à jour :\n1. Installer Homebrew (si ce n\u0026rsquo;est pas fait) # /bin/bash -c \u0026#34;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\u0026#34; 2. Installer Python # brew install python Vérifiez ensuite avec :\npython3 --version Conclusion 🏁 # ✅ Windows → Téléchargement manuel + \u0026ldquo;Add to PATH\u0026rdquo;.\n✅ Linux → Vérifier puis installer via apt, pacman ou xbps-install.\n✅ Mac → Homebrew pour gérer les versions.\nSi tout est bon, vous êtes prêt à coder ! 🚀\n","date":"10 avril 2025","externalUrl":null,"permalink":"/fr/blog/python/installation-python/","section":"Langage","summary":"","title":"Installer Python sur Windows, Linux et Mac","type":"blog"},{"content":"","date":"10 avril 2025","externalUrl":null,"permalink":"/fr/tags/mac/","section":"Tags","summary":"","title":"Mac","type":"tags"},{"content":"","date":"10 avril 2025","externalUrl":null,"permalink":"/fr/tags/windows/","section":"Tags","summary":"","title":"Windows","type":"tags"},{"content":" Maîtriser la Manipulation de Texte avec Python : Création d\u0026rsquo;un Formateur de Liste à Puces # Dans l\u0026rsquo;environnement de travail numérique d\u0026rsquo;aujourd\u0026rsquo;hui, formater du texte rapidement et efficacement peut faire gagner un temps précieux. En tant que développeur Python, j\u0026rsquo;ai récemment créé un outil utilitaire qui démontre comment quelques lignes de code Python peuvent simplifier les tâches quotidiennes. Laissez-moi vous présenter mon script de formatage de listes à puces et mettre en évidence les compétences Python qu\u0026rsquo;il illustre.\nLe Problème # Nous avons tous été confrontés à cette situation - copier du texte provenant de diverses sources qui nécessite un reformatage avant utilisation. Peut-être extrayez-vous des éléments d\u0026rsquo;un e-mail, d\u0026rsquo;un document ou d\u0026rsquo;une page web et souhaitez-vous les transformer en une liste à puces propre. Faire cela manuellement est fastidieux, surtout avec des textes plus longs.\nLa Solution : bulletPointAdder.py # Ma solution est un script Python simple mais puissant qui prend du texte depuis votre presse-papiers, formate chaque ligne avec des puces et replace le résultat dans votre presse-papiers - prêt à être collé où vous en avez besoin.\n#!/usr/bin/env python3 # -*- coding: utf-8 -*- \u0026#34;\u0026#34;\u0026#34; Nom du fichier : bulletPointAdder.py Description : Formate du texte pour obtenir une liste à puce Auteur : ADEBI Châ-Fine Ayédoun achafine@gmail.com Date : 2025-04-08 \u0026#34;\u0026#34;\u0026#34; Compétences Python Démontrées # 1. Utilisation de Bibliothèques Externes # Le script utilise pyperclip, une bibliothèque tierce qui fournit une fonctionnalité de presse-papiers multiplateforme :\nimport pyperclip Cela démontre une connaissance de l\u0026rsquo;écosystème Python et comment tirer parti des bibliothèques existantes pour étendre les fonctionnalités sans réinventer la roue.\n2. Maîtrise des Expressions Régulières # L\u0026rsquo;une des fonctionnalités les plus puissantes du script est sa capacité de traitement de texte utilisant des expressions régulières :\nREGEX = r\u0026#39;^[\\d\\.\\)\\s\\-_]+\u0026#39; # Motif pour correspondre à divers formats de numérotation line = re.sub(REGEX, \u0026#39;\u0026#39;, line) Ce motif regex identifie et supprime différents types de numérotation ou formats de puces qui pourraient déjà exister dans le texte. Il gère les listes numérotées (comme \u0026ldquo;1. Élément\u0026rdquo;), la numérotation entre parenthèses (comme \u0026ldquo;1) Élément\u0026rdquo;), et divers styles de puces.\n3. Constantes pour la Configuration # Le script utilise des constantes pour rendre les changements de configuration faciles et centralisés :\n# Constantes BULLET = \u0026#39;.\u0026#39; # Vos nouvelles lignes peuvent commencer par: \u0026#39;•\u0026#39;, \u0026#39;-\u0026#39;, \u0026#39;*\u0026#39;, \u0026#39;→\u0026#39; REGEX = r\u0026#39;^[\\d\\.\\)\\s\\-_]+\u0026#39; # Vous pouvez changer la logique des lignes Cette approche suit le principe de séparation de la configuration et de la logique, rendant le code plus maintenable.\n4. Décomposition en Fonctions et Principes de Code Propre # Le script est divisé en fonctions claires, à objectif unique :\ndef paste_from_clipboard() -\u0026gt; str: \u0026#34;\u0026#34;\u0026#34;On récupère le contenu du clipboard\u0026#34;\u0026#34;\u0026#34; def bullet_point_adder() -\u0026gt; str: \u0026#34;\u0026#34;\u0026#34;On modifie chaque ligne pour en faire des listes à puces\u0026#34;\u0026#34;\u0026#34; def paste_to_clipboard() -\u0026gt; None: \u0026#34;\u0026#34;\u0026#34;On copie le contenu dans le clipboard\u0026#34;\u0026#34;\u0026#34; Chaque fonction a une responsabilité claire, rendant le code plus facile à comprendre, tester et maintenir.\n5. Annotations de Type # Le code utilise les annotations de type de Python pour indiquer les types de retour des fonctions :\ndef paste_from_clipboard() -\u0026gt; str: Cela rend le code plus autodocumenté et permet un meilleur support d\u0026rsquo;outils et une meilleure détection d\u0026rsquo;erreurs.\n6. Manipulation et Formatage de Chaînes # Le script démontre une maîtrise des opérations sur les chaînes :\nline = f\u0026#39;{BULLET} {line}\u0026#39; # f-strings pour un formatage de chaîne propre return \u0026#39;\\n\u0026#39;.join(formated_lines) # Joindre des listes en chaînes welcome.center(len(welcome) + 5, \u0026#39;*\u0026#39;) # Alignement et remplissage de chaînes Ces techniques montrent une connaissance des riches capacités de manipulation de chaînes de Python.\n7. Compréhension de Liste et Itération # Bien que n\u0026rsquo;utilisant pas directement les compréhensions de liste, le code traite efficacement les listes par itération :\nformated_lines = [] for line in list_content: # Logique de traitement formated_lines.append(line) 8. Gestion des Erreurs # Le bloc d\u0026rsquo;exécution principal inclut une gestion appropriée des exceptions :\ntry: # Traitement principal except Exception as e: print(f\u0026#34;Erreur : {str(e)}\u0026#34;) Cela garantit que le script gère élégamment les erreurs potentielles plutôt que de planter.\n9. Docstrings et Documentation # Chaque fonction inclut des docstrings appropriées expliquant son objectif :\ndef bullet_point_adder() -\u0026gt; str: \u0026#34;\u0026#34;\u0026#34;On modifie chaque ligne pour en faire des listes à puces\u0026#34;\u0026#34;\u0026#34; De plus, l\u0026rsquo;en-tête du script fournit des métadonnées sur l\u0026rsquo;auteur, l\u0026rsquo;objectif et la date.\n10. Structure de Programme Appropriée # Le script suit la convention Python d\u0026rsquo;utilisation de la garde if __name__ == \u0026quot;__main__\u0026quot;: pour séparer le code exécutable des modules importables :\nif __name__ == \u0026#34;__main__\u0026#34;: # Code d\u0026#39;exécution ici Cela permet au script d\u0026rsquo;être importé comme un module sans exécuter la fonctionnalité principale.\nApplication dans le Monde Réel # Ce script peut être simple, mais il démontre comment Python peut être utilisé pour automatiser des tâches routinières. Par exemple, si vous préparez une présentation et devez formater une liste d\u0026rsquo;éléments, ou si vous prenez des notes et souhaitez les convertir rapidement en format à puces, cet outil fait gagner du temps et assure la cohérence.\nConclusion # Créer de petits scripts utilitaires comme bulletPointAdder.py est une excellente façon d\u0026rsquo;affiner vos compétences Python tout en créant des outils qui rendent votre flux de travail quotidien plus efficace. Le script présente une gamme de techniques Python, de la manipulation basique de chaînes aux expressions régulières, le tout enveloppé dans un programme propre et bien structuré.\nQuelles tâches quotidiennes automatisez-vous avec Python ? J\u0026rsquo;aimerais entendre parler de vos scripts utilitaires dans les commentaires !\n#!/usr/bin/env python3 # -*- coding: utf-8 -*- \u0026#34;\u0026#34;\u0026#34; Nom du fichier : bulletPointAdder.py Description : Formate du texte pour obtenir une liste à puce Auteur : ADEBI Châ-Fine Ayédoun achafine@gmail.com Date : 2025-04-08 \u0026#34;\u0026#34;\u0026#34; import re import pyperclip # Constantes BULLET = \u0026#39;.\u0026#39; # Vos nouvelles lignes peuvent commencer par: \u0026#39;•\u0026#39;, \u0026#39;-\u0026#39;, \u0026#39;*\u0026#39;, \u0026#39;→\u0026#39; REGEX = r\u0026#39;^[\\d\\.\\)\\s\\-_]+\u0026#39; # Vous pouvez changer le la logique des lignes def paste_from_clipboard() -\u0026gt; str: \u0026#34;\u0026#34;\u0026#34;On récupère le contenu du clipboard\u0026#34;\u0026#34;\u0026#34; return pyperclip.paste() def bullet_point_adder() -\u0026gt; str: \u0026#34;\u0026#34;\u0026#34;On modifie chaque ligne pour en faire des listes à puces\u0026#34;\u0026#34;\u0026#34; content = paste_from_clipboard().strip() # On convertis le contenu en liste list_content = content.split(\u0026#39;\\n\u0026#39;) # Formatage des lignes formated_lines = [] for line in list_content: line = line.strip() # Gestion des lignes vides if not line: formated_lines.append(line) continue # Gestion des lignes qui commencent par des chiffres line = re.sub(REGEX, \u0026#39;\u0026#39;, line) # Ajout des puces if not line.startswith(BULLET): line = f\u0026#39;{BULLET} {line}\u0026#39; formated_lines.append(line) return \u0026#39;\\n\u0026#39;.join(formated_lines) def paste_to_clipboard() -\u0026gt; None: \u0026#34;\u0026#34;\u0026#34;On copie le contenu dans le clipboard\u0026#34;\u0026#34;\u0026#34; pyperclip.copy(bullet_point_adder()) if __name__ == \u0026#34;__main__\u0026#34;: welcome = \u0026#34;Welcome to the Bullet Point Adder\u0026#34; print(welcome.center(len(welcome) + 5, \u0026#39;*\u0026#39;)) try: print(\u0026#34;Processing\u0026#34;.ljust(len(welcome)+5, \u0026#39;.\u0026#39;)) paste_to_clipboard() print(\u0026#34;successfully paste\u0026#34;.center(len(welcome) + 5, \u0026#39;*\u0026#39;)) except Exception as e: print(f\u0026#34;Erreur : {str(e)}\u0026#34;) 📌 Follow me for more Python and dev content!\n👉 [Dev.to / GitHub / Twitter Profile]\n","date":"9 avril 2025","externalUrl":null,"permalink":"/fr/blog/python/bulletpointadder/","section":"Langage","summary":"","title":"🎯 Implémentation d'un foramateur de texte en python","type":"blog"},{"content":"","date":"9 avril 2025","externalUrl":null,"permalink":"/fr/tags/algorithmie/","section":"Tags","summary":"","title":"Algorithmie","type":"tags"},{"content":" Pourquoi Python doit être installé pour fonctionner ? # Quand tu télécharges un jeu, tu cliques sur un .exe et ça marche direct. Mais si tu télécharges un script Python (.py), double-cliquer dessus ne fonctionne pas toujours comme prévu. Pourquoi ? Parce que Python n\u0026rsquo;est pas un logiciel comme les autres.\nUn ordinateur ne comprend pas Python # Ton processeur parle binaire (du 0 et du 1), et il ne comprend que des instructions en langage machine.\nLe problème, c\u0026rsquo;est que Python est écrit en texte lisible par un humain.\nDonc, si tu donnes directement un fichier .py à ton ordinateur, il ne sait pas quoi en faire. Il faut un intermédiaire pour traduire le code Python en instructions compréhensibles pour la machine.\nLangages compilés vs interprétés : la clé du problème # Il existe deux grandes familles de langages de programmation :\n1. Les langages compilés (C, C++, Rust, etc.) # 👉 Tu écris ton code\n👉 Tu le compiles avec un compilateur (ex : gcc pour C)\n👉 Ça te donne un fichier .exe ou un binaire que ton ordi peut exécuter directement\nUne fois compilé, ton programme tourne sans dépendre du langage de programmation d’origine.\n2. Les langages interprétés (Python, JavaScript, Bash, etc.) # 👉 Pas de compilation préalable\n👉 À chaque exécution, un interpréteur lit ton code et le traduit en direct en instructions machine\nC’est plus souple, mais ça veut dire qu’on a toujours besoin de l’interpréteur installé pour exécuter un script Python.\nEt Python dans tout ça ? # Python est un langage interprété, ce qui veut dire que tu as besoin de son interpréteur (python3) pour lire et exécuter ton code.\nSans Python installé, ton système ne sait pas comment comprendre et exécuter ton fichier .py. C’est comme si tu voulais lire un livre en japonais sans avoir appris la langue.\nComment savoir si Python est installé ? # Si tu tapes :\npython --version et que ton terminal te répond avec une version (Python 3.x.x), c’est bon, l’interpréteur est bien là.\nSinon, il faudra l’installer avant de pouvoir exécuter tes scripts Python.\nConclusion : Python ≠ Application autonome # Un fichier .py, c’est juste un texte qui contient du code.\nCe n’est pas un programme autonome comme un .exe.\nSi tu veux exécuter du Python, tu as besoin de l’interpréteur Python installé sur ton système.\nD\u0026rsquo;où la règle simple : Pas d’interpréteur = pas de Python.\n","date":"5 avril 2025","externalUrl":null,"permalink":"/fr/blog/python/pourquoi-installer-python/","section":"Langage","summary":"","title":"Pourquoi Python doit être installé pour fonctionner ?","type":"blog"},{"content":" Manipulation des fichiers JSON en Python : Maîtrisez l\u0026rsquo;Art du Stockage de Données # Les fichiers JSON, c’est le format incontournable pour stocker et échanger des données. Ultra flexible, il est utilisé partout : API, configurations, logs, bases de données NoSQL… Bref, vous allez bosser avec.\nDans cet article, on va voir comment manipuler les fichiers JSON en Python :\n✅ Lire et écrire des fichiers JSON\n✅ Modifier et mettre à jour les données\n✅ Gérer les erreurs et éviter les pièges classiques\n✅ Exercices pratiques pour tester vos skills\n1. Lire un Fichier JSON (json.load) # L’étape de base : charger un fichier JSON dans Python.\nExemple : Lire un fichier JSON # Imaginons un fichier data.json contenant :\n{ \u0026#34;nom\u0026#34;: \u0026#34;Alice\u0026#34;, \u0026#34;age\u0026#34;: 30, \u0026#34;ville\u0026#34;: \u0026#34;Paris\u0026#34; } On peut le charger avec :\nimport json with open(\u0026#34;data.json\u0026#34;, \u0026#34;r\u0026#34;) as fichier: data = json.load(fichier) print(data[\u0026#34;nom\u0026#34;]) # Affiche : Alice 🔹 Explications :\nopen(\u0026quot;data.json\u0026quot;, \u0026quot;r\u0026quot;) ouvre le fichier en lecture (r). json.load(fichier) transforme le JSON en dictionnaire Python. On accède ensuite aux données normalement. 💡 Piège à éviter : Si le fichier est mal formé, json.load() va lever une erreur. On gère ça juste après.\n2. Écrire un Fichier JSON (json.dump) # Si vous voulez sauvegarder des données dans un fichier JSON, utilisez json.dump().\nExemple : Écrire un JSON dans un fichier # import json data = { \u0026#34;nom\u0026#34;: \u0026#34;Bob\u0026#34;, \u0026#34;age\u0026#34;: 25, \u0026#34;ville\u0026#34;: \u0026#34;Lyon\u0026#34; } with open(\u0026#34;output.json\u0026#34;, \u0026#34;w\u0026#34;) as fichier: json.dump(data, fichier, indent=4) print(\u0026#34;Données enregistrées !\u0026#34;) 🔹 Explications :\nopen(\u0026quot;output.json\u0026quot;, \u0026quot;w\u0026quot;) ouvre le fichier en écriture (w). json.dump(data, fichier, indent=4) écrit les données dans le fichier, en format lisible (indent=4). 💡 Bonus : Formattage lisible avec sort_keys\njson.dump(data, fichier, indent=4, sort_keys=True) Cela trie les clés du JSON par ordre alphabétique.\n3. Modifier un JSON (Mise à Jour de Données) # 🔹 Ajouter une nouvelle clé au JSON et sauvegarder # import json with open(\u0026#34;data.json\u0026#34;, \u0026#34;r\u0026#34;) as fichier: data = json.load(fichier) data[\u0026#34;email\u0026#34;] = \u0026#34;alice@example.com\u0026#34; # Ajout d\u0026#39;une nouvelle clé with open(\u0026#34;data.json\u0026#34;, \u0026#34;w\u0026#34;) as fichier: json.dump(data, fichier, indent=4) print(\u0026#34;Mise à jour effectuée !\u0026#34;) 🔹 Explications :\nOn charge le JSON On ajoute/modifie une clé On réécrit tout le JSON dans le fichier 💡 Bonus : Ajouter un élément dans une liste JSON\nSi data.json contient :\n{ \u0026#34;users\u0026#34;: [\u0026#34;Alice\u0026#34;, \u0026#34;Bob\u0026#34;] } On peut ajouter \u0026quot;Charlie\u0026quot; dans la liste :\ndata[\u0026#34;users\u0026#34;].append(\u0026#34;Charlie\u0026#34;) with open(\u0026#34;data.json\u0026#34;, \u0026#34;w\u0026#34;) as fichier: json.dump(data, fichier, indent=4) 4. Gérer les Erreurs JSON comme un Pro # Manipuler des fichiers JSON peut planter si :\n❌ Le fichier n’existe pas\n❌ Le JSON est mal formé\n❌ Une clé est absente\n📌 Sécurisation avec try-except\nimport json try: with open(\u0026#34;data.json\u0026#34;, \u0026#34;r\u0026#34;) as fichier: data = json.load(fichier) print(\u0026#34;Fichier chargé avec succès !\u0026#34;) except FileNotFoundError: print(\u0026#34;Erreur : Fichier non trouvé !\u0026#34;) except json.JSONDecodeError: print(\u0026#34;Erreur : Le fichier JSON est mal formé !\u0026#34;) ✅ Toujours prévoir des exceptions pour éviter les crashs inutiles.\n5. Exercices Pratiques 🚀 # 💡 Exercice 1 : Écrire une fonction sauvegarder_json(nom_fichier, data) # 👉 Créez une fonction qui prend un dictionnaire Python et l’enregistre dans un fichier JSON.\nExemple d’utilisation :\ndata = {\u0026#34;nom\u0026#34;: \u0026#34;John\u0026#34;, \u0026#34;score\u0026#34;: 42} sauvegarder_json(\u0026#34;score.json\u0026#34;, data) 💡 Exercice 2 : Lire une liste d’objets JSON et l’afficher # Créez un fichier users.json avec :\n[ { \u0026#34;nom\u0026#34;: \u0026#34;Alice\u0026#34;, \u0026#34;age\u0026#34;: 30 }, { \u0026#34;nom\u0026#34;: \u0026#34;Bob\u0026#34;, \u0026#34;age\u0026#34;: 25 }, { \u0026#34;nom\u0026#34;: \u0026#34;Charlie\u0026#34;, \u0026#34;age\u0026#34;: 27 } ] Écrivez un script qui charge ce JSON et affiche chaque utilisateur ainsi :\nNom: Alice, Âge: 30 Nom: Bob, Âge: 25 Nom: Charlie, Âge: 27 📌 Indice : json.load() retourne une liste !\n💡 Exercice 3 : Ajouter un utilisateur dans le fichier users.json # Écrivez une fonction ajouter_utilisateur(nom, age) qui ajoute un nouvel utilisateur à la liste JSON.\nExemple d’utilisation :\najouter_utilisateur(\u0026#34;David\u0026#34;, 22) 💡 Vérifiez que users.json contient bien le nouvel utilisateur !\nConclusion : JSON en Python, un Incontournable # Vous avez maintenant toutes les bases pour manipuler des fichiers JSON comme un pro. ✅\nCompétences acquises :\n✅ Lire et écrire des fichiers JSON\n✅ Modifier et mettre à jour les données\n✅ Gérer les erreurs et exceptions\n✅ Travailler avec des listes d’objets JSON\n🚀 Prochain défi : Implémentez une mini-base de données JSON pour gérer une liste de contacts (nom, téléphone, email).\nAllez, à vous de jouer ! 😎🔥\n","date":"4 avril 2025","externalUrl":null,"permalink":"/fr/courses/python/json-en-python/","section":"Cours","summary":"","title":"Comprendre et maîtriser with et open en Python","type":"courses"},{"content":"","date":"4 avril 2025","externalUrl":null,"permalink":"/fr/categories/cours-python/","section":"Categories","summary":"","title":"Cours Python","type":"categories"},{"content":"","date":"4 avril 2025","externalUrl":null,"permalink":"/fr/tags/open/","section":"Tags","summary":"","title":"Open","type":"tags"},{"content":"","date":"4 avril 2025","externalUrl":null,"permalink":"/fr/tags/with/","section":"Tags","summary":"","title":"With","type":"tags"},{"content":" with open() en Python : Gérer les fichiers comme un pro # Quand on bosse avec des fichiers en Python, la méthode classique c’est d’ouvrir le fichier, lire ou écrire dedans, puis le refermer. Mais soyons honnêtes, qui pense toujours à fermer proprement son fichier ? 🤨\nC’est là que with open() entre en scène :\nPlus besoin de se soucier de close() Moins de bugs liés aux fichiers non fermés Code plus propre et plus lisible C’est parti pour une exploration rapide et efficace. 🚀\n1. Lire un fichier avec with open() # 🔹 Méthode classique (à éviter) # f = open(\u0026#34;mon_fichier.txt\u0026#34;, \u0026#34;r\u0026#34;) contenu = f.read() f.close() # Oublié = fuite de ressources ! print(contenu) Si le script plante avant close(), le fichier reste ouvert et peut causer des soucis.\n🔹 Méthode propre avec with open() # with open(\u0026#34;mon_fichier.txt\u0026#34;, \u0026#34;r\u0026#34;) as fichier: contenu = fichier.read() print(contenu) # Le fichier est fermé automatiquement après le bloc `with` ✅ Avantages :\nLe fichier se ferme automatiquement, même en cas d’erreur. Pas besoin d’appeler close(), Python le fait pour nous. 2. Lire un fichier ligne par ligne # Lire tout le fichier avec read() peut être inefficace si c’est un gros fichier.\n➡️ Solution : lire ligne par ligne\nwith open(\u0026#34;mon_fichier.txt\u0026#34;, \u0026#34;r\u0026#34;) as fichier: for ligne in fichier: print(ligne.strip()) # `strip()` pour enlever les sauts de ligne inutiles 3. Écrire dans un fichier (\u0026quot;w\u0026quot;) # Le mode \u0026quot;w\u0026quot; écrase le fichier s’il existe déjà.\nwith open(\u0026#34;nouveau_fichier.txt\u0026#34;, \u0026#34;w\u0026#34;) as fichier: fichier.write(\u0026#34;Hello, world !\\n\u0026#34;) fichier.write(\u0026#34;Ligne 2 du fichier.\\n\u0026#34;) 📌 Attention : Tout contenu précédent sera effacé.\n4. Ajouter du texte (\u0026quot;a\u0026quot;) # Le mode \u0026quot;a\u0026quot; ajoute du texte sans écraser le fichier existant.\nwith open(\u0026#34;nouveau_fichier.txt\u0026#34;, \u0026#34;a\u0026#34;) as fichier: fichier.write(\u0026#34;Une nouvelle ligne ajoutée !\\n\u0026#34;) 5. Lire et écrire (\u0026quot;r+\u0026quot;) # Le mode \u0026quot;r+\u0026quot; permet de lire et écrire dans un fichier existant.\nwith open(\u0026#34;nouveau_fichier.txt\u0026#34;, \u0026#34;r+\u0026#34;) as fichier: contenu = fichier.read() fichier.write(\u0026#34;\\nAjout d\u0026#39;une ligne en mode lecture/écriture.\u0026#34;) 📌 Piège ! L’écriture commence à la fin de la dernière lecture.\nExercice Pratique : Création d’un journal de logs # 🔥 Objectif : Écrire un programme qui enregistre chaque action dans un fichier log.txt avec un horodatage.\n🛠 Instructions : # À chaque exécution du script, une nouvelle ligne est ajoutée au fichier log.txt. La ligne doit contenir la date et l’heure actuelle + un message. Utiliser with open() pour gérer l’écriture du fichier. 💡 Solution : # from datetime import datetime # Générer le message de log timestamp = datetime.now().strftime(\u0026#34;%Y-%m-%d %H:%M:%S\u0026#34;) message = f\u0026#34;{timestamp} - Script exécuté avec succès.\\n\u0026#34; # Écrire dans le fichier log with open(\u0026#34;log.txt\u0026#34;, \u0026#34;a\u0026#34;) as fichier: fichier.write(message) print(\u0026#34;Log enregistré !\u0026#34;) 📌 À tester : Exécutez plusieurs fois le script et regardez le contenu de log.txt. 🧐\nConclusion # ✔ with open() simplifie la gestion des fichiers et évite les oublis de close().\n✔ C’est plus sécurisé et plus propre qu’un simple open().\n✔ On peut lire, écrire et ajouter du contenu selon le mode choisi (\u0026quot;r\u0026quot;, \u0026quot;w\u0026quot;, \u0026quot;a\u0026quot;, \u0026quot;r+\u0026quot; …).\n🚀 Prochain challenge : créez un script qui stocke les scores d’un jeu et affiche le meilleur score à chaque exécution ! 💡\n","date":"3 avril 2025","externalUrl":null,"permalink":"/fr/courses/python/with-open/","section":"Cours","summary":"","title":"Comprendre et maîtriser with et open en Python","type":"courses"},{"content":"","date":"31 mars 2025","externalUrl":null,"permalink":"/fr/tags/argparse/","section":"Tags","summary":"","title":"Argparse","type":"tags"},{"content":" 🚀 Maîtriser argparse en Python : Guide complet # 🔥 Pourquoi ce tuto ?\nTu veux faire des scripts en ligne de commande propres et puissants ? Marre de sys.argv et du parsing manuel des arguments ? Tu veux des options, des flags, de l\u0026rsquo;aide automatique, et même des sous-commandes ? 📌 Pourquoi argparse et pas sys.argv ? # 🔥 Comment un script Python récupère-t-il des arguments en ligne de commande ?\nSi tu fais juste :\nimport sys print(sys.argv) et que tu lances :\npython3 script.py hello world Tu obtiens :\n[\u0026#39;script.py\u0026#39;, \u0026#39;hello\u0026#39;, \u0026#39;world\u0026#39;] 🤔 Problèmes avec sys.argv :\nTout est en str (tu dois tout convertir à la main) Pas de validation automatique (si on attend un int et que l\u0026rsquo;utilisateur entre hello, ça plante) Aucune aide (--help n\u0026rsquo;existe pas) Difficile à maintenir (si tu rajoutes plein d’options, c\u0026rsquo;est vite le chaos) 🔥 Solution : argparse, qui gère tout ça automatiquement !\n🚀 1. Ton premier script avec argparse # On commence simple : un script qui prend un nom et un flag --verbose.\nimport argparse parser = argparse.ArgumentParser(description=\u0026#34;Un script simple avec argparse\u0026#34;) parser.add_argument(\u0026#34;nom\u0026#34;, help=\u0026#34;Votre nom\u0026#34;) parser.add_argument(\u0026#34;-v\u0026#34;, \u0026#34;--verbose\u0026#34;, action=\u0026#34;store_true\u0026#34;, help=\u0026#34;Mode verbeux\u0026#34;) args = parser.parse_args() print(f\u0026#34;Salut {args.nom} !\u0026#34;) if args.verbose: print(\u0026#34;Mode verbeux activé.\u0026#34;) 🔥 Teste avec :\npython3 script.py Alice # → Salut Alice ! python3 script.py Bob --verbose # → Salut Bob ! # → Mode verbeux activé. ⚙️ 2. Ajouter des options avec valeurs (type, default, choices) # On veut un script qui prend :\nUn nom (obligatoire) Un âge (optionnel, mais doit être un int) Une ville (optionnelle, par défaut \u0026quot;Inconnue\u0026quot;) Un niveau (optionnel, parmi \u0026quot;débutant\u0026quot;, \u0026quot;intermédiaire\u0026quot;, \u0026quot;expert\u0026quot;) import argparse parser = argparse.ArgumentParser(description=\u0026#34;Un script amélioré avec argparse\u0026#34;) parser.add_argument(\u0026#34;nom\u0026#34;, help=\u0026#34;Votre nom\u0026#34;) parser.add_argument(\u0026#34;-a\u0026#34;, \u0026#34;--age\u0026#34;, type=int, help=\u0026#34;Votre âge\u0026#34;) parser.add_argument(\u0026#34;--ville\u0026#34;, default=\u0026#34;Inconnue\u0026#34;, help=\u0026#34;Votre ville\u0026#34;) parser.add_argument(\u0026#34;--niveau\u0026#34;, choices=[\u0026#34;débutant\u0026#34;, \u0026#34;intermédiaire\u0026#34;, \u0026#34;expert\u0026#34;], help=\u0026#34;Votre niveau\u0026#34;) args = parser.parse_args() print(f\u0026#34;Salut {args.nom} !\u0026#34;) if args.age: print(f\u0026#34;Tu as {args.age} ans.\u0026#34;) print(f\u0026#34;Tu es à {args.ville}.\u0026#34;) if args.niveau: print(f\u0026#34;Niveau : {args.niveau}\u0026#34;) 🔥 Teste avec :\npython3 script.py Alice -a 25 --ville Paris --niveau expert # → Salut Alice ! # → Tu as 25 ans. # → Tu es à Paris. # → Niveau : expert. 🛠️ 3. Ajouter plusieurs sous-commandes (subparsers) # On veut un script multi-fonction avec :\najouter → pour ajouter un utilisateur supprimer → pour supprimer un utilisateur On va utiliser les subparsers, qui permettent de créer des sous-commandes comme git commit, git push, etc.\nimport argparse parser = argparse.ArgumentParser(description=\u0026#34;Gestion des utilisateurs\u0026#34;) subparsers = parser.add_subparsers(dest=\u0026#34;commande\u0026#34;, help=\u0026#34;Commandes disponibles\u0026#34;) # Commande \u0026#34;ajouter\u0026#34; ajouter_parser = subparsers.add_parser(\u0026#34;ajouter\u0026#34;, help=\u0026#34;Ajouter un utilisateur\u0026#34;) ajouter_parser.add_argument(\u0026#34;nom\u0026#34;, help=\u0026#34;Nom de l\u0026#39;utilisateur\u0026#34;) ajouter_parser.add_argument(\u0026#34;-a\u0026#34;, \u0026#34;--age\u0026#34;, type=int, help=\u0026#34;Âge de l\u0026#39;utilisateur\u0026#34;) # Commande \u0026#34;supprimer\u0026#34; supprimer_parser = subparsers.add_parser(\u0026#34;supprimer\u0026#34;, help=\u0026#34;Supprimer un utilisateur\u0026#34;) supprimer_parser.add_argument(\u0026#34;nom\u0026#34;, help=\u0026#34;Nom de l\u0026#39;utilisateur à supprimer\u0026#34;) args = parser.parse_args() if args.commande == \u0026#34;ajouter\u0026#34;: print(f\u0026#34;Ajout de {args.nom}\u0026#34;) if args.age: print(f\u0026#34;Âge : {args.age}\u0026#34;) elif args.commande == \u0026#34;supprimer\u0026#34;: print(f\u0026#34;Suppression de {args.nom}\u0026#34;) 🔥 Teste avec :\npython3 script.py ajouter Alice -a 30 # → Ajout de Alice # → Âge : 30 python3 script.py supprimer Alice # → Suppression de Alice python3 script.py --help # → Affiche les commandes disponibles 🔥 Pourquoi subparsers ?\nPermet de structurer plus proprement les scripts complexes. Fonctionne comme git add, git commit, etc. Gère l’aide --help automatiquement pour chaque sous-commande. 📜 4. Générer une aide automatique # 🔥 Un gros avantage d\u0026rsquo;argparse ? Il génère une aide automatique avec --help !\nTeste simplement :\npython3 script.py --help Ou pour une sous-commande :\npython3 script.py ajouter --help Ça affiche tous les arguments disponibles sans que tu aies à écrire la doc à la main. 🏆\n🔥 5. Récapitulatif et bonnes pratiques # ✅ Utilise argparse.ArgumentParser(description=\u0026quot;...\u0026quot;) → Pour bien décrire ton script.\n✅ Utilise des options -f, --flag, type, default, choices → Pour plus de flexibilité.\n✅ Ajoute parser.add_subparsers(dest=\u0026quot;commande\u0026quot;) → Pour gérer des sous-commandes.\n✅ Toujours tester --help → C\u0026rsquo;est généré automatiquement et ça aide l\u0026rsquo;utilisateur.\n🎯 TL;DR : Le script ultime avec argparse # import argparse parser = argparse.ArgumentParser(description=\u0026#34;Gestion des utilisateurs\u0026#34;) subparsers = parser.add_subparsers(dest=\u0026#34;commande\u0026#34;, help=\u0026#34;Commandes disponibles\u0026#34;) ajouter_parser = subparsers.add_parser(\u0026#34;ajouter\u0026#34;, help=\u0026#34;Ajouter un utilisateur\u0026#34;) ajouter_parser.add_argument(\u0026#34;nom\u0026#34;, help=\u0026#34;Nom de l\u0026#39;utilisateur\u0026#34;) ajouter_parser.add_argument(\u0026#34;-a\u0026#34;, \u0026#34;--age\u0026#34;, type=int, help=\u0026#34;Âge de l\u0026#39;utilisateur\u0026#34;) supprimer_parser = subparsers.add_parser(\u0026#34;supprimer\u0026#34;, help=\u0026#34;Supprimer un utilisateur\u0026#34;) supprimer_parser.add_argument(\u0026#34;nom\u0026#34;, help=\u0026#34;Nom de l\u0026#39;utilisateur à supprimer\u0026#34;) args = parser.parse_args() if args.commande == \u0026#34;ajouter\u0026#34;: print(f\u0026#34;Ajout de {args.nom}, âge : {args.age or \u0026#39;Non spécifié\u0026#39;}\u0026#34;) elif args.commande == \u0026#34;supprimer\u0026#34;: print(f\u0026#34;Suppression de {args.nom}\u0026#34;) 🔥 Maintenant, tes scripts Python sont prêts pour la production ! 🚀\n","date":"31 mars 2025","externalUrl":null,"permalink":"/fr/courses/python/argparse-en-python/","section":"Cours","summary":"","title":"Comprendre et maîtriser argparse en Python","type":"courses"},{"content":"","date":"31 mars 2025","externalUrl":null,"permalink":"/fr/categories/python/","section":"Categories","summary":"","title":"Python","type":"categories"},{"content":"","date":"31 mars 2025","externalUrl":null,"permalink":"/fr/categories/tutoriels/","section":"Categories","summary":"","title":"Tutoriels","type":"categories"},{"content":" 🖤 Bienvenue dans le Void ! # Ce tutoriel va te guider pas à pas dans l’installation de Void Linux, une distribution légère et flexible qui te donne un contrôle total sur ton système. Prêt à relever le défi ? 🚀\n🎯 Pourquoi Void Linux ? # XBPS : Un gestionnaire de paquets unique, rapide et efficace. Runit : Un système d\u0026rsquo;init ultra-léger pour des démarrages rapides. Minimalisme : Pas de logiciels superflus, juste ce dont tu as besoin. 🛠️ Prérequis # Un PC 64 bits. Une clé USB (4 Go minimum). Une connexion Internet fiable. Un esprit curieux et aventureux. 😎 🌟 Étape 1 : Télécharger l’ISO de Void Linux # Rendez-vous sur Void Linux Downloads. Choisis la version Base Live ISO pour ton architecture (généralement x86_64). Astuce : Si tu es incertain, opte pour la version x86_64.\n💾 Étape 2 : Créer une clé USB bootable # Utilise Etcher, Rufus, ou la ligne de commande : sudo dd if=void-live-x86_64-*.iso of=/dev/sdX bs=4M status=progress Remplace /dev/sdX par le nom de ta clé USB. Attention : dd n\u0026rsquo;a pas de bouton \u0026ldquo;annuler\u0026rdquo; ! Vérifie bien avant d\u0026rsquo;exécuter. 😱\n🚀 Étape 3 : Démarrer sur Void Linux # Insère ta clé USB et redémarre ton PC. Accède au BIOS/UEFI et choisis de démarrer sur la clé USB. Sélectionne l’option Void Linux dans le menu de démarrage. 🖥️ Étape 4 : Partitionner le disque # Lance cfdisk : cfdisk /dev/sdX Exemple de partitionnement : 1 Go pour /boot (EFI si besoin). Espace swap (optionnel, 2 Go+). Reste pour /. Formate les partitions : mkfs.ext4 /dev/sdX1 # Partition principale mkfs.vfat -F 32 /dev/sdX2 # Pour EFI mkswap /dev/sdX3 # Si swap 📦 Étape 5 : Installer Void Linux # Monte tes partitions : mount /dev/sdX1 /mnt mkdir -p /mnt/boot/efi mount /dev/sdX2 /mnt/boot/efi swapon /dev/sdX3 Lance l’installeur : void-installer Suis les instructions pour configurer : Disposition du clavier. Configuration réseau. Nom d\u0026rsquo;hôte et création d\u0026rsquo;utilisateur. Système de fichiers. ⚙️ Étape 6 : Installer le bootloader # Choisis GRUB pendant l\u0026rsquo;installation. Exécute ensuite : grub-install --target=x86_64-efi --efi-directory=/mnt/boot/efi --bootloader-id=void_grub grub-mkconfig -o /mnt/boot/grub/grub.cfg 🎉 Étape 7 : Redémarrer et profiter # Quitte l’installateur et démonte les partitions : umount -R /mnt reboot Retire ta clé USB pendant le redémarrage. Bienvenue dans le Void ! 🌌\n🤓 Astuces post-installation # Mets à jour ton système : sudo xbps-install -Syu Installe les outils de base : sudo xbps-install -S vim git base-devel Expérimente et personnalise ton environnement (WM, dotfiles, etc.). 📚 Ressources utiles # Void Linux Handbook Forum Void Linux Si tu rencontres un souci, n’hésite pas à demander de l’aide ou partager ton expérience ! 🎩\n","date":"30 mars 2025","externalUrl":null,"permalink":"/fr/blog/linux-tweaks/voidlinux-installation/","section":"Langage","summary":"","title":"Bienvenue dans le Void : Installer Void Linux pas à pas","type":"blog"},{"content":"","date":"30 mars 2025","externalUrl":null,"permalink":"/fr/categories/blog-linux/","section":"Categories","summary":"","title":"Blog Linux","type":"categories"},{"content":"","date":"30 mars 2025","externalUrl":null,"permalink":"/fr/tags/minimalisme/","section":"Tags","summary":"","title":"Minimalisme","type":"tags"},{"content":"","date":"30 mars 2025","externalUrl":null,"permalink":"/fr/tags/void-linux/","section":"Tags","summary":"","title":"Void Linux","type":"tags"},{"content":" 1. Installer Neovim et Git # LazyVim repose sur Neovim, donc on l’installe :\nPour Ubuntu/Debian : # sudo apt update \u0026amp;\u0026amp; sudo apt install -y neovim git Pour Arch Linux : # sudo pacman -S neovim git Pour Void Linux : # sudo xbps-install -S neovim git Vérifie l’installation :\nnvim --version 2. Installer LazyVim # On clone LazyVim dans le dossier de config Neovim : Pour plus sur Lazyvim\ngit clone https://github.com/LazyVim/starter ~/.config/nvim Ensuite, on lance Neovim :\nnvim LazyVim est prêt ! 🎉\n3. Activer les Extras pour Python # LazyVim propose des extras pour faciliter la config Python. Active lang#python en modifiant ~/.config/nvim/lua/config/lazy.lua :\n{ \u0026#34;LazyVim/LazyVim\u0026#34;, opts = { colorscheme = \u0026#34;tokyonight\u0026#34;, extras = { \u0026#34;lang#python\u0026#34;, }, }, } Recharge LazyVim avec :\nnvim --headless \u0026#34;+Lazy! sync\u0026#34; +qa 4. Installer les outils pour Python # Dans Neovim :\nOuvre Neovim : nvim Appuie sur Espace pour ouvrir le menu. Tape c pour \u0026ldquo;Code\u0026rdquo;. Tape m pour ouvrir Mason. Appuie sur Ctrl + f et installe tape dans la barre python puis entrer, tu positionne le curseur devant ou sur chacun des éléments suivant et tu appuie i pour installer: python-lsp-server (LSP Python) flake8 (Linting) black (Formatage) autopep8 (Formatage alternatif) debugpy (Debugging) ast-grep (Recherche avancée) 5. Exécuter son premier script Python # Créer un fichier Python # Ouvre Neovim et crée un fichier main.py :\nnvim main.py Ajoute ce code :\nprint(\u0026#34;Hello, LazyVim!\u0026#34;) Exécuter le script depuis Neovim # Tape :\n!python3 main.py Ou, mappe une touche pour exécuter plus vite :\nvim.api.nvim_set_keymap(\u0026#34;n\u0026#34;, \u0026#34;\u0026lt;leader\u0026gt;r\u0026#34;, \u0026#34;:w\u0026lt;CR\u0026gt;:!python3 %\u0026lt;CR\u0026gt;\u0026#34;, { noremap = true, silent = true }) Maintenant, Leader + r (souvent \u0026lt;Space\u0026gt;r) exécute ton script en un clic.\nConclusion # Tu es maintenant prêt à coder en Python sous Linux avec un environnement puissant ! Tu peux maintenant explorer le développement Python avec un setup optimisé et léger. 🚀\n","date":"30 mars 2025","externalUrl":null,"permalink":"/fr/blog/linux-tweaks/lazyvim/","section":"Langage","summary":"","title":"De LazyVim à l'exécution de son premier script Python","type":"blog"},{"content":"","date":"30 mars 2025","externalUrl":null,"permalink":"/fr/tags/lazyvim/","section":"Tags","summary":"","title":"LazyVim","type":"tags"},{"content":"","date":"30 mars 2025","externalUrl":null,"permalink":"/fr/tags/lsp/","section":"Tags","summary":"","title":"LSP","type":"tags"},{"content":"","date":"30 mars 2025","externalUrl":null,"permalink":"/fr/tags/neovim/","section":"Tags","summary":"","title":"Neovim","type":"tags"},{"content":"Une section pour partarger tout ce que je fais sur linux, ricing, utilisation d\u0026rsquo;outils ou encore même test et avis sur des solutions. Bref beaucoup de critiques.\n","date":"30 mars 2025","externalUrl":null,"permalink":"/fr/blog/linux-tweaks/","section":"Langage","summary":"","title":"Linux Tweaks","type":"blog"},{"content":"","date":"30 mars 2025","externalUrl":null,"permalink":"/fr/tags/ricing/","section":"Tags","summary":"","title":"Ricing","type":"tags"},{"content":" Choisir son environnement de travail # Avant d\u0026rsquo;écrire une seule ligne de code en Python, il faut comprendre où et comment coder. Tu as peut-être entendu parler de VSCode, PyCharm, Jupyter Notebook ou encore Vim. Mais lequel choisir et pourquoi ?\nCe guide va t’aider à comprendre les différentes options et trouver celle qui te correspond le mieux.\n1. Éditeur de texte vs IDE : Quelle différence ? # Un environnement de travail en programmation se divise en deux grandes catégories :\nLes éditeurs de texte : outils légers qui permettent d’écrire du code sans fonctionnalités avancées. Les IDE (Environnements de Développement Intégrés) : outils complets avec des fonctionnalités pour écrire, tester et déboguer ton code facilement. 📜 Éditeurs de texte # Ce sont des outils minimalistes, mais ultra-flexibles. Parfaits si tu aimes le contrôle total sur ton environnement.\nÉditeur Points forts Pour qui ? Notepad++ Simple, rapide, colorisation syntaxique Débutants sur Windows Vim Léger, personnalisable, super rapide Développeurs avancés Nano Ultra-simple, préinstallé sur Linux Dépannage rapide en terminal 🔥 IDE : Tout-en-un pour coder plus vite # Si tu veux un environnement clé en main avec des outils intégrés, un IDE est souvent un bon choix.\nIDE Points forts Pour qui ? VSCode Léger, extensible, supporte plein de langages Débutants et confirmés PyCharm Spécialisé en Python, super complet Développeurs Python sérieux Jupyter Notebook Idéal pour tester du code par blocs Data scientists, chercheurs 2. Quel environnement choisir pour débuter en Python ? # Si tu débutes, voici trois options simples et efficaces :\n1️⃣ VSCode : Polyvalent, bonne auto-complétion, installation rapide.\n2️⃣ Jupyter Notebook : Idéal si tu veux voir les résultats ligne par ligne.\n3️⃣ L’éditeur intégré de Python (IDLE) : Basique mais suffisant pour tester du code.\nSi tu es sur Linux et que tu veux coder directement dans un terminal : Vim ou Nano sont des choix solides.\n3. Comment bien configurer son environnement ? # Peu importe ton choix, voici quelques bonnes pratiques pour bien commencer :\n✅ Installer Python et s’assurer qu’il fonctionne (python --version)\n✅ Activer la coloration syntaxique dans ton éditeur pour mieux lire le code\n✅ Configurer un environnement virtuel (venv) pour éviter les conflits entre projets\n✅ Utiliser un terminal intégré (VSCode et PyCharm l’ont par défaut)\n4. De l\u0026rsquo;installation de VSCode à l’exécution de ton premier script Python # 1. Installer VSCode et Python # Avant tout, il te faut :\n✅ VSCode → Télécharge ici et installe-le.\n✅ Python → Télécharge ici et coche \u0026ldquo;Add Python to PATH\u0026rdquo; pendant l\u0026rsquo;installation.\nVérifie que Python est bien installé en tapant dans un terminal :\npython --version ou\npython3 --version Si tu vois quelque chose comme Python 3.x.x, c’est bon ! ✅\n2. Installer l’extension Python dans VSCode # Ouvre VSCode, puis :\nVa dans l’onglet Extensions (Ctrl + Shift + X). Cherche Python et installe l’extension officielle de Microsoft. Ça te permettra d’avoir :\n✔️ La coloration syntaxique\n✔️ L’auto-complétion\n✔️ Un débogueur intégré\n3. Configurer l’environnement Python dans VSCode # VSCode doit savoir quelle version de Python utiliser.\n1️⃣ Ouvre la palette de commandes (Ctrl + Shift + P).\n2️⃣ Tape \u0026ldquo;Python: Select Interpreter\u0026rdquo; et choisis la version de Python installée sur ton PC.\nSi tu ne la trouves pas, clique sur \u0026ldquo;Enter interpreter path\u0026rdquo; et sélectionne le fichier python.exe ou python3.\n4. Écrire ton premier script Python # 1️⃣ Crée un dossier pour ton projet (ex: MonPremierCode).\n2️⃣ Ouvre ce dossier dans VSCode (File → Open Folder).\n3️⃣ Crée un nouveau fichier Python : premier_script.py.\n4️⃣ Écris du code dedans :\nprint(\u0026#34;Hello, world!\u0026#34;) 5️⃣ Enregistre (Ctrl + S).\n5. Exécuter le script Python # 📌 Méthode 1 : Avec le terminal intégré\nOuvre le terminal (Ctrl +)\nTape :\npython premier_script.py ou\npython3 premier_script.py Tu devrais voir Hello, world! s\u0026rsquo;afficher. ✅\n📌 Méthode 2 : Avec le bouton Run\nSi tu as bien installé l’extension Python, tu devrais voir un petit bouton \u0026ldquo;Run\u0026rdquo; en haut à droite du fichier.\n➡ Clique dessus et le script s’exécutera directement.\n6. Debugger son code (Optionnel mais utile) # Si ton code ne fonctionne pas :\n🔹 Lis les messages d’erreur (ex: SyntaxError = problème de syntaxe).\n🔹 Vérifie que tu exécutes le bon fichier avec python nom_du_fichier.py.\n🔹 Teste avec le terminal interactif (python puis entre print(\u0026quot;Test\u0026quot;)).\nConclusion # 🎯 En suivant ces étapes, tu passes de l’installation de VSCode à l’exécution de ton premier programme Python en quelques minutes.\nTu peux maintenant :\n✅ Écrire et tester du code facilement.\n✅ Ajouter d’autres fichiers et organiser tes projets.\n✅ Explorer les fonctionnalités avancées de VSCode (débogage, extensions).\nPrêt à coder ? 🚀\nConclusion # Pas besoin de choisir l’outil parfait dès le début. Teste plusieurs environnements et vois ce qui te convient le mieux.\nSi tu veux un conseil simple : VSCode est un excellent compromis entre un éditeur léger et un IDE puissant.\n","date":"30 mars 2025","externalUrl":null,"permalink":"/fr/blog/python/environnement-de-travail/","section":"Langage","summary":"","title":"Comprendre les différentes options pour coder en Python et choisir l'environnement qui convient le mieux.","type":"blog"},{"content":"","date":"30 mars 2025","externalUrl":null,"permalink":"/fr/tags/%C3%A9diteur-de-texte/","section":"Tags","summary":"","title":"Éditeur De Texte","type":"tags"},{"content":"","date":"30 mars 2025","externalUrl":null,"permalink":"/fr/tags/ide/","section":"Tags","summary":"","title":"IDE","type":"tags"},{"content":"Quand on commence avec Python, une des premières confusions vient du fait qu’on peut taper des commandes dans un terminal et voir immédiatement un résultat, mais aussi écrire du code dans un fichier .py. Pourquoi ces deux modes existent-ils ? Et surtout, quand utiliser l’un ou l’autre ?\n1. L’interpréteur Python : le mode interactif # L’interpréteur Python, aussi appelé Shell interactif, est une interface où on peut taper directement du code Python et voir le résultat immédiatement.\n💡 Pour le lancer, il suffit d’ouvrir un terminal et de taper :\npython (Sous certaines installations, il faudra peut-être taper python3 au lieu de python.)\nUne fois lancé, l’interpréteur affiche une invite comme celle-ci :\nPython 3.11.2 (default, Feb 8 2023, 10:50:25) [GCC 11.3.0] on linux Type \u0026#34;help\u0026#34;, \u0026#34;copyright\u0026#34;, \u0026#34;credits\u0026#34; or \u0026#34;license\u0026#34; for more information. \u0026gt;\u0026gt;\u0026gt; À partir de là, on peut entrer des instructions Python et voir leur effet immédiatement :\n\u0026gt;\u0026gt;\u0026gt; print(\u0026#34;Hello, world!\u0026#34;) Hello, world! Chaque ligne est évaluée instantanément, ce qui est parfait pour :\n✅ Tester rapidement une idée.\n✅ Expérimenter une fonction ou un bout de code sans créer de fichier.\n✅ Déboguer un comportement précis.\n📌 Limites du Shell interactif : Dès qu’on ferme l’interpréteur, tout ce qu’on a tapé est perdu. Ce n’est pas pratique pour écrire un programme complet.\n2. Le fichier Python : exécuter un script # Quand on veut écrire un programme plus structuré, on crée un fichier Python (.py).\nPar exemple, on peut écrire le contenu suivant dans un fichier mon_script.py :\nprint(\u0026#34;Hello, world!\u0026#34;) print(\u0026#34;Ce fichier Python est exécuté entièrement.\u0026#34;) Puis l’exécuter dans un terminal avec :\npython mon_script.py Cela affichera :\nHello, world! Ce fichier Python est exécuté entièrement. 🔹 Pourquoi utiliser un fichier Python ?\n✅ Pour écrire un programme réutilisable.\n✅ Pour organiser du code sur plusieurs lignes ou fonctions.\n✅ Pour éviter de retaper le même code à chaque fois.\n📌 Différence avec le mode interactif :\nDans un fichier, tout le code est exécuté d’un coup quand on lance le script. Il n’y a pas d’évaluation immédiate ligne par ligne comme dans l’interpréteur. 3. Quand utiliser l’un ou l’autre ? # Mode Avantages Inconvénients Interpréteur Python Rapide pour tester des idées, pas besoin d’enregistrer un fichier Tout est perdu à la fermeture Fichier Python Permet de structurer et enregistrer du code réutilisable Nécessite de relancer le script après chaque modification 💡 Règle simple :\nSi c’est juste pour tester une ligne de code ➝ utilise l’interpréteur. Si tu veux créer un vrai programme ➝ écris un fichier Python. Conclusion # L’interpréteur Python et les fichiers .py servent des objectifs différents mais complémentaires. L’interpréteur est parfait pour des tests rapides, tandis que les fichiers sont indispensables pour écrire un vrai programme. En comprenant cette différence dès le début, on évite pas mal de confusions et on apprend à coder plus efficacement. 🚀\n","date":"29 mars 2025","externalUrl":null,"permalink":"/fr/blog/python/interpreteur-vs-fichier/","section":"Langage","summary":"","title":"Différence entre l’interpréteur Python (Shell interactif) et un fichier Python","type":"blog"},{"content":"","date":"29 mars 2025","externalUrl":null,"permalink":"/fr/tags/compilation/","section":"Tags","summary":"","title":"Compilation","type":"tags"},{"content":" Langage interprété vs langage compilé : Quelle est la différence ? # Quand on commence à apprendre la programmation, on entend souvent parler de langages interprétés et langages compilés, mais la distinction entre les deux n\u0026rsquo;est pas toujours claire. Pourquoi doit-on compiler un programme en C alors que Python fonctionne immédiatement après l’avoir écrit ? Dans cet article, on va déconstruire cette différence et voir comment elle impacte l’exécution des programmes.\n1. Définition simple # Un langage interprété exécute le code ligne par ligne grâce à un programme spécial appelé interpréteur.\nUn langage compilé transforme tout le code source en un fichier exécutable avant de pouvoir l’exécuter.\n2. Comment ça fonctionne ? # 🔹 Langage interprété (Python, JavaScript, Bash, Ruby, PHP\u0026hellip;) # 💡 Le code est exécuté directement sans passer par une phase de compilation.\nTu écris un fichier .py contenant du code Python. L’interpréteur Python lit et exécute le code ligne par ligne. Il n’y a pas de compilation préalable, mais l’exécution est plus lente qu’un programme compilé. 📌 Exemple en Python :\nprint(\u0026#34;Hello, world!\u0026#34;) ➡ Tu peux taper ce code directement dans le terminal Python (python), et il s’exécute immédiatement.\n🔹 Langage compilé (C, C++, Rust, Go\u0026hellip;) # 💡 Le code est transformé en un fichier exécutable avant d’être lancé.\nTu écris un fichier .c (par exemple en C). Un compilateur traduit tout le code en un fichier exécutable (ex : mon_programme.exe sous Windows ou a.out sous Linux). Tu peux exécuter ce fichier sans avoir besoin du langage installé sur la machine. 📌 Exemple en C :\n#include \u0026lt;stdio.h\u0026gt; int main() { printf(\u0026#34;Hello, world!\\n\u0026#34;); return 0; } ➡ Compilation du programme :\ngcc mon_programme.c -o mon_programme ➡ Exécution :\n./mon_programme 3. Principales différences # 🔹 Critère ⚡ Langage interprété (Python) 🚀 Langage compilé (C) 📜 Exécution Ligne par ligne avec un interpréteur Tout le code est traduit en une seule fois 🏎️ Vitesse Plus lent car chaque ligne est analysée en temps réel Plus rapide car le programme est déjà transformé en code machine 💻 Portabilité Fonctionne sur toutes les machines où Python est installé Peut nécessiter une recompilation pour chaque système (Windows, Linux, Mac) 🛠️ Facilité de développement Plus simple pour débuter, pas besoin de compilation Plus complexe, il faut compiler et gérer les erreurs avant l’exécution 4. Cas particulier : Java (Compilé et interprété ?) # Java est un cas un peu spécial :\nIl est compilé en un format intermédiaire appelé bytecode (.class). Ce bytecode est ensuite interprété par la JVM (Java Virtual Machine) sur chaque ordinateur. ✅ Avantage : Un seul fichier .class peut fonctionner sur toutes les machines disposant d’une JVM, sans recompilation.\n5. En résumé : Quel impact pour toi ? # Si tu veux coder vite et tester immédiatement ton code, un langage interprété comme Python est idéal. Si tu cherches de la performance et un exécutable autonome, un langage compilé comme C ou Rust sera plus adapté. En Python, on ne se soucie pas de compilation : il suffit d’écrire et d’exécuter immédiatement. C’est pourquoi c’est un langage souvent recommandé aux débutants.\n🎯 Et toi, tu préfères coder en langage interprété ou compilé ? Partage ton avis en commentaire ! 🚀\n","date":"29 mars 2025","externalUrl":null,"permalink":"/fr/blog/python/difference-interpr%C3%A9t%C3%A9-compil%C3%A9/","section":"Langage","summary":"","title":"Différence entre un langage interprété et un langage compilé","type":"blog"},{"content":"","date":"29 mars 2025","externalUrl":null,"permalink":"/fr/categories/introduction-%C3%A0-python/","section":"Categories","summary":"","title":"Introduction À Python","type":"categories"},{"content":" Différence entre un langage de programmation et un logiciel classique # Un débutant peut facilement confondre un langage de programmation et un logiciel classique, car dans les deux cas, il y a une installation et une interface à utiliser. Pourtant, ce sont deux choses très différentes.\n1. Un logiciel classique : un outil fini que l\u0026rsquo;on utilise # Un logiciel classique (ou application) est un programme déjà écrit qui exécute des tâches spécifiques pour l\u0026rsquo;utilisateur. Il est généralement conçu pour être utilisé sans avoir besoin de comprendre son fonctionnement interne.\n📌 Exemples de logiciels classiques :\nNavigateur web (Chrome, Firefox) → permet de naviguer sur Internet. Traitement de texte (Word, LibreOffice) → permet d’écrire et de formater du texte. Lecteur vidéo (VLC, Windows Media Player) → permet de lire des vidéos. Caractéristiques d\u0026rsquo;un logiciel classique :\n✅ Interface graphique (boutons, menus, fenêtres).\n✅ Conçu pour être utilisé sans connaissances techniques.\n✅ Ne permet pas de créer de nouveaux logiciels.\n💡 Une analogie :\nUn logiciel classique, c\u0026rsquo;est comme une voiture : on peut l\u0026rsquo;utiliser pour se déplacer sans avoir besoin de comprendre comment elle fonctionne à l’intérieur.\n2. Un langage de programmation : un outil pour créer des logiciels # Un langage de programmation est un outil qui permet de donner des instructions à un ordinateur pour créer des logiciels, des scripts ou des automatisations. Ce n’est pas un logiciel en soi, mais plutôt un moyen de dire à l’ordinateur quoi faire.\n📌 Exemples de langages de programmation :\nPython → utilisé pour créer des applications, des scripts, de l’IA, du web… C / C++ → utilisé pour des systèmes d’exploitation, des logiciels performants. JavaScript → utilisé pour le développement web. Caractéristiques d’un langage de programmation :\n✅ Permet de créer des logiciels et des applications.\n✅ Nécessite d’écrire du code pour donner des instructions.\n✅ Peut être utilisé via un simple éditeur de texte.\n💡 Une analogie :\nUn langage de programmation, c\u0026rsquo;est comme une recette de cuisine : tu écris les étapes à suivre, et l’ordinateur exécute ces étapes pour produire un résultat.\n3. Python est-il un logiciel ou un langage de programmation ? # Python est un langage de programmation, mais pour pouvoir l’utiliser, il faut un interpréteur Python qui est un logiciel.\n➡️ Quand tu installes Python, tu installes un programme (l’interpréteur) qui comprend le code Python et l’exécute.\n📌 Différence clé :\nPython (le langage) = ensemble de règles et de syntaxes pour écrire du code. L’interpréteur Python (le logiciel) = le programme qui lit et exécute le code Python. C’est comme si tu avais une langue (Python) et un traducteur (l’interpréteur) qui transforme ce que tu dis en actions que l’ordinateur comprend.\n4. Conclusion # Critère Langage de programmation Logiciel classique But Écrire du code pour donner des instructions à un ordinateur Réaliser une tâche spécifique pour l’utilisateur Utilisation Nécessite d’apprendre à programmer Peut être utilisé sans connaissances techniques Exemples Python, C, JavaScript Chrome, Word, VLC Création Sert à créer des logiciels Est un produit fini prêt à l\u0026rsquo;emploi Résumé rapide : # Un logiciel classique est un outil prêt à l’emploi. Un langage de programmation est un moyen de créer des logiciels. Tu veux que j’ajoute des illustrations ou des exercices pour tester la compréhension après cette explication ?\n","date":"29 mars 2025","externalUrl":null,"permalink":"/fr/blog/python/difference-logiciel-langage/","section":"Langage","summary":"","title":"🖥️ Différence entre un langage de programmation et un logiciel classique","type":"blog"},{"content":"","date":"29 mars 2025","externalUrl":null,"permalink":"/fr/categories/d%C3%A9butant/","section":"Categories","summary":"","title":"Débutant","type":"categories"},{"content":" C\u0026rsquo;est quoi un fichier .py par rapport à une application .exe ? # Quand on débute en programmation, on peut penser qu’un fichier .py (lorsque notre fichier contient du code python) est une application comme un .exe. En réalité, ils sont très différents ! Voici une explication claire pour bien comprendre.\n📌 Un fichier .py, c’est juste du code source # Un fichier .py contient du texte écrit en Python. Seul l’interpréteur Python sait lire et exécuter ce fichier.\n💡 Exemple : # Si tu crées un fichier script.py contenant :\nprint(\u0026#34;Hello, world!\u0026#34;) Ce fichier ne peut pas s\u0026rsquo;exécuter tout seul. Il faut utiliser Python pour l\u0026rsquo;exécuter :\npython script.py # ou python3 script..py Le .py n\u0026rsquo;est donc pas un programme autonome, mais juste un script qui doit être interprété.\n📌 Un fichier .exe, c\u0026rsquo;est un programme exécutable autonome # Un .exe est un fichier qui peut être exécuté directement sans dépendre d’un autre logiciel. Il contient du code machine que ton ordinateur peut comprendre et exécuter tout seul.\n💡 Exemple : # Si tu télécharges notepad.exe, tu peux double-cliquer dessus et ça s’ouvre directement. Il n’a pas besoin d’un autre programme pour fonctionner.\nUn .exe est donc un fichier compilé à partir d\u0026rsquo;un code source (ex: C, C++, Python compilé) pour qu’il tourne tout seul.\n📌 Différences principales # 📂 Fichier .py ⚙️ Fichier .exe Contient du code Python (lisible par un humain). Contient du code binaire (illisible). Besoin d\u0026rsquo;un interpréteur Python pour s’exécuter. Peut être exécuté directement sans dépendance. Facile à modifier (juste du texte). Modifiable seulement avec un décompilateur. Multi-plateforme (Windows, Linux, Mac). Spécifique à un OS (Windows .exe, Linux .elf). 📌 Peut-on transformer un .py en .exe ? # Oui ! Tu peux \u0026ldquo;convertir\u0026rdquo; un script Python en .exe pour qu’il soit utilisable sans installer Python. On appelle ça un binaire compilé.\n💡 Exemple avec pyinstaller : # pip install pyinstaller pyinstaller --onefile script.py Cela génère un fichier script.exe que tu peux exécuter sans Python installé sur la machine.\n🚨 Attention : Le .exe généré reste dépendant de l’OS (Windows/Linux/Mac).\nConclusion # Un fichier .py est du code source Python, non exécutable directement. Un .exe est un fichier compilé, exécutable sans Python. Pour transformer un .py en .exe, on utilise un outil comme pyinstaller. Maintenant, tu sais pourquoi un fichier .py ne fonctionne pas comme un .exe et comment les rendre autonomes ! 🚀\n","date":"29 mars 2025","externalUrl":null,"permalink":"/fr/blog/python/difference-exe-py/","section":"Langage","summary":"","title":"Différence entre un fichier .py et un exécutable .exe","type":"blog"},{"content":"","date":"29 mars 2025","externalUrl":null,"permalink":"/fr/tags/ex%C3%A9cutable/","section":"Tags","summary":"","title":"Exécutable","type":"tags"},{"content":" 🎮 Bagels – A Logic Game in Python # Hey everyone! Today, I’m sharing a fun little Python project: Bagels, a deductive logic game. 🧠💡\nThe goal? Guess a secret 3-digit number within 10 attempts.\nBut instead of getting direct hints, you receive clues to help you figure out the correct number:\n🟢 Game Rules:\nFermi → A digit is correct and in the right place ✅ Pico → A digit is correct but in the wrong place 🔄 Bagels → No correct digits ❌ Example:\nIf the secret number is \u0026ldquo;123\u0026rdquo; and you enter \u0026ldquo;132\u0026rdquo;, you’ll see:\nFermi Pico Pico (1 is correct and in the right place, while 3 and 2 are correct but misplaced).\n🚀 Source Code # Here’s the full implementation in Python:\n#!/usr/bin/env python3 # -*- coding: utf-8 -*- \u0026#34;\u0026#34;\u0026#34; Nom du fichier : bagels.py Description : Un jeu de déduction logique pour deviner un nombre secret à trois chiffres. Vous avez 10 chances pour deviner le nombre. - Pico -\u0026gt; Un chiffre correct, mauvaise position. - Fermi -\u0026gt; Un chiffre correct, bonne position. - Bagels -\u0026gt; Aucun chiffre correct. Auteur : ADEBI Ayedoun Châ-Fine achafine@gmail.com Date : 03/16/2025 \u0026#34;\u0026#34;\u0026#34; import random # Constante GUESSES = 10 # NOMBRE DE CHANCES DIGIT_LEN = 3 # NOMBRE DE CHIFFRES DU NOMBRE MENU = \u0026#34;\u0026#34;\u0026#34; Bagels, a deductive logic game. By ADEBI Ayedoun Châ-Fine achafine@gmail.com Je suis en train de penser à un nombre à 3 chiffres. Essais de deviner lequel. Voici quelques indices : Quand je dis: Voici ce à quoi je pense: Pico Un chiffre est correct mais à la mauvaise position Fermi Un chiffre est correct et à la bonne position Bagels Aucun des chiffres n\u0026#39;est correct Vous avez 10 essais : \u0026#34;\u0026#34;\u0026#34; def generer_nombre_secret(): \u0026#34;\u0026#34;\u0026#34; Générer un nombre secret unique à trois chiffres sous forme de liste. \u0026#34;\u0026#34;\u0026#34; chiffres = list(range(1, 10)) random.shuffle(chiffres) return [str(chiffres[i]) for i in range(DIGIT_LEN)] def obtenir_indices(input_list, guess_number): \u0026#34;\u0026#34;\u0026#34;Comparer l\u0026#39;entrée utilisateur avec le nombre secret et retourne des indices. \u0026#34;\u0026#34;\u0026#34; result = [] for i in range(len(input_list)): if input_list[i] == guess_number[i]: result.append(\u0026#34;Fermi\u0026#34;) elif input_list[i] in guess_number: result.append(\u0026#34;Pico\u0026#34;) return \u0026#34; \u0026#34;.join(result) if result else \u0026#34;Bagels\u0026#34; def valide_saisie(): \u0026#34;\u0026#34;\u0026#34;Gère l\u0026#39;entrée utilisateur, l\u0026#39;utilisateur doit entrer un nombre à trois chiffres\u0026#34;\u0026#34;\u0026#34; while True: saisie = input(\u0026#34;\u0026gt; \u0026#34;).strip() if len(saisie) == DIGIT_LEN and saisie.isdigit(): return list(saisie) print(\u0026#34;Entrée invalide, vous devez entrer un nombre à trois chiffres\u0026#34;) def main(): \u0026#34;\u0026#34;\u0026#34;Boucle principale du jeu\u0026#34;\u0026#34;\u0026#34; rejouer = \u0026#34;\u0026#34; while True: guess_number = generer_nombre_secret() for i in range(GUESSES): print(\u0026#34;Devine #\u0026#34;, i+1) input_nbre = valide_saisie() if input_nbre == guess_number: print(\u0026#34;Vous l\u0026#39;avez trouvé\u0026#34;) break else: print(obtenir_indices(input_nbre, guess_number)) else: print(\u0026#34;Game Over!\u0026#34;) print(\u0026#34;Voulez-vous encore jouer ?? (oui ou non)\u0026#34;) while True: rejouer = input(\u0026#34;\u0026gt; \u0026#34;).strip().lower() if rejouer in [\u0026#34;oui\u0026#34;, \u0026#34;non\u0026#34;]: break else: print(\u0026#34;Vous devez répondre par \u0026#39;oui\u0026#39; ou \u0026#39;non\u0026#39; \u0026#34;) if rejouer == \u0026#34;non\u0026#34;: print(\u0026#34;Merci d\u0026#39;avoir joué\u0026#34;) break if __name__ == \u0026#34;__main__\u0026#34;: print(MENU) main() 🔍 Code Breakdown # The program generates a random 3-digit secret number. The user enters a guess and receives a clue in return. The game loops for up to 10 attempts or until the player finds the correct number. At the end, the player can choose to replay or exit the game. 📌 How Can We Improve It? # I have a few ideas, but I’d love to hear your suggestions!\nFor example:\nAdd a hard mode where the secret number has no repeated digits. Create a graphical version using Tkinter or Pygame. Implement a multiplayer mode, where Player 1 sets a number and Player 2 tries to guess it. What do you think? Any other improvements you\u0026rsquo;d suggest? 🚀\n💬 Let me know in the comments if you tried the game or have any optimizations to propose!\n📌 Follow me for more Python and development content!\n👉 [Dev.to / GitHub / Twitter Profile]\n","date":"26 mars 2025","externalUrl":null,"permalink":"/fr/blog/python/bagels/","section":"Langage","summary":"","title":"🎯 Implémentation du jeu Bagels en Python : Un défi de déduction logique","type":"blog"},{"content":"","date":"26 mars 2025","externalUrl":null,"permalink":"/tags/algorithms/","section":"Tags","summary":"","title":"Algorithms","type":"tags"},{"content":"","date":"26 mars 2025","externalUrl":null,"permalink":"/tags/game/","section":"Tags","summary":"","title":"Game","type":"tags"},{"content":"","date":"26 mars 2025","externalUrl":null,"permalink":"/categories/games-and-algorithms/","section":"Categories","summary":"","title":"Games and Algorithms","type":"categories"},{"content":"","date":"26 mars 2025","externalUrl":null,"permalink":"/fr/tags/jeu/","section":"Tags","summary":"","title":"Jeu","type":"tags"},{"content":"","date":"26 mars 2025","externalUrl":null,"permalink":"/fr/categories/jeux-et-algorithmes/","section":"Categories","summary":"","title":"Jeux Et Algorithmes","type":"categories"},{"content":"","date":"26 mars 2025","externalUrl":null,"permalink":"/tags/logic/","section":"Tags","summary":"","title":"Logic","type":"tags"},{"content":"","date":"26 mars 2025","externalUrl":null,"permalink":"/fr/tags/logique/","section":"Tags","summary":"","title":"Logique","type":"tags"},{"content":"","date":"26 mars 2025","externalUrl":null,"permalink":"/categories/python-projects/","section":"Categories","summary":"","title":"Python Projects","type":"categories"},{"content":"","date":"4 mars 2025","externalUrl":null,"permalink":"/fr/tags/exceptions/","section":"Tags","summary":"","title":"Exceptions","type":"tags"},{"content":" Les Blocs Try/Except en Python : Gérez Vos Erreurs comme un Pro ! # En programmation, les erreurs, c\u0026rsquo;est inévitable. Que vous lisiez un fichier, manipuliez des données ou interagissiez avec une API, des exceptions peuvent survenir à tout moment. Heureusement, Python vous offre une solution élégante pour anticiper et gérer ces imprévus : les blocs try/except. Dans cet article, on va décortiquer cette fonctionnalité incontournable pour que vos programmes deviennent robustes et fiables.\n1. Pourquoi utiliser try/except ? # Imaginez que vous ayez un script qui lit un fichier. Si le fichier n\u0026rsquo;existe pas, votre programme planterait. Avec try/except, vous pouvez anticiper cette situation et décider comment y réagir, par exemple en affichant un message à l\u0026rsquo;utilisateur ou en créant le fichier automatiquement.\nAstuce : Une gestion fine des erreurs améliore non seulement la qualité de votre code mais aussi l\u0026rsquo;expérience utilisateur.\n2. La Syntaxe de Base # La structure de base d\u0026rsquo;un bloc try/except est simple :\ntry: # Code qui pourrait générer une exception resultat = 10 / 0 except ZeroDivisionError: # Code exécuté en cas d\u0026#39;exception print(\u0026#34;Erreur : division par zéro !\u0026#34;) Dans cet exemple, la division par zéro déclenche une exception, qui est ensuite capturée par le bloc except.\n3. Capturer Plusieurs Exceptions # Vous pouvez gérer différentes exceptions de manière spécifique :\ntry: valeur = int(\u0026#34;abc\u0026#34;) # Provoque une ValueError except ZeroDivisionError: print(\u0026#34;Erreur de division.\u0026#34;) except ValueError: print(\u0026#34;Erreur de conversion de chaîne en entier.\u0026#34;) Note : Toujours capturer les exceptions les plus spécifiques en premier pour éviter de masquer des erreurs plus précises.\n4. Le Bloc Else # Le bloc else s\u0026rsquo;exécute uniquement si aucune exception n\u0026rsquo;est levée dans le bloc try. C\u0026rsquo;est parfait pour le code qui doit s\u0026rsquo;exécuter lorsque tout se passe bien.\ntry: nombre = 10 resultat = 100 / nombre except ZeroDivisionError: print(\u0026#34;Erreur : division par zéro !\u0026#34;) else: print(\u0026#34;Le résultat est :\u0026#34;, resultat) 5. Le Bloc Finally # Le bloc finally est exécuté quand une exception se produise ou non. Il est idéal pour libérer des ressources, fermer des fichiers ou effectuer un nettoyage final.\ntry: fichier = open(\u0026#34;exemple.txt\u0026#34;, \u0026#34;r\u0026#34;) contenu = fichier.read() except FileNotFoundError: print(\u0026#34;Le fichier n\u0026#39;existe pas.\u0026#34;) finally: fichier.close() print(\u0026#34;Fichier fermé.\u0026#34;) Rappel : Assurez-vous de toujours fermer les ressources, même en cas d\u0026rsquo;erreur, pour éviter les fuites de mémoire ou d\u0026rsquo;autres problèmes.\n6. Lever des Exceptions avec raise # Vous pouvez également générer vos propres exceptions avec le mot-clé raise. Cela permet d\u0026rsquo;alerter sur des conditions spécifiques dans votre code.\ndef division(a, b): if b == 0: raise ValueError(\u0026#34;Le diviseur ne peut pas être zéro.\u0026#34;) return a / b try: print(division(10, 0)) except ValueError as e: print(\u0026#34;Exception levée :\u0026#34;, e) 7. Bonnes Pratiques # Soyez précis dans vos blocs except : Ciblez les exceptions spécifiques pour éviter de masquer des bugs inattendus. Utilisez finally pour le nettoyage : Que le code se passe bien ou non, le bloc finally s\u0026rsquo;exécutera. Documentez vos exceptions : Indiquez clairement quelles erreurs peuvent être levées par vos fonctions pour faciliter la maintenance. Conclusion # Les blocs try/except sont essentiels pour écrire un code Python résistant et professionnel. En anticipant les erreurs et en y répondant de manière appropriée, vous assurez à vos utilisateurs une expérience fluide et sécurisée. Alors, intégrez ces bonnes pratiques dans vos projets et faites face aux imprévus avec confiance !\n🚀 Prochain Défi : Implémentez une fonction qui lit des données depuis un fichier, gère les exceptions de lecture, et renvoie un message personnalisé en cas d\u0026rsquo;erreur. Bonne programmation et que la robustesse soit avec vous !\n","date":"4 mars 2025","externalUrl":null,"permalink":"/fr/courses/python/try-except/","section":"Cours","summary":"","title":"Les exceptions en Python","type":"courses"},{"content":"","date":"4 mars 2025","externalUrl":null,"permalink":"/fr/tags/try-...-except/","section":"Tags","summary":"","title":"Try ... Except","type":"tags"},{"content":" PIP en Python : Gérez vos Packages comme un Pro # Si vous codez en Python, vous avez forcément croisé PIP. Ce petit outil, c’est votre passeport pour un écosystème riche de bibliothèques et de modules. Besoin d’ajouter du machine learning, de la manipulation de données ou même du web scraping à votre projet ? PIP est là pour installer tout ce qu’il faut, rapidement et proprement.\nDans cet article, on va voir ce qu’est PIP, comment l’utiliser et quelques astuces pour gérer efficacement vos packages. 🚀\n1. PIP, c’est quoi exactement ? # PIP (Pip Installs Packages ou Pip Installs Python, selon l’humeur) est le gestionnaire de paquets officiel de Python. Il permet d’installer, de mettre à jour et de désinstaller facilement des bibliothèques disponibles sur PyPI (Python Package Index).\nSi vous avez installé Python 3.4+, alors PIP est déjà inclus par défaut. Pour vérifier s’il est bien présent sur votre machine, ouvrez un terminal et tapez :\npip --version Si tout est bon, vous verrez une sortie du genre :\npip 23.0.1 from /usr/local/lib/python3.10/site-packages (python 3.10) Si PIP n’est pas installé ou s’il est obsolète, mettez-le à jour avec :\npython -m ensurepip --default-pip python -m pip install --upgrade pip 2. Installer un package avec PIP # L’installation d’un package se fait en une simple commande :\npip install nom_du_package Exemple : installons requests, une bibliothèque populaire pour faire des requêtes HTTP :\npip install requests Après installation, vous pouvez vérifier qu’il est bien là avec :\npip list 3. Désinstaller un package # Si vous n’avez plus besoin d’un module, libérez de l’espace avec :\npip uninstall nom_du_package Exemple :\npip uninstall requests PIP vous demandera une confirmation avant de le supprimer.\n4. Mettre à jour un package # Les mises à jour sont essentielles pour bénéficier des dernières fonctionnalités et corrections de bugs. Mettez à jour un package avec :\npip install --upgrade nom_du_package Exemple :\npip install --upgrade requests Si vous voulez mettre à jour tous vos packages en une seule commande, utilisez :\npip list --outdated pip install --upgrade $(pip list --outdated | awk \u0026#39;NR\u0026gt;2 {print $1}\u0026#39;) 5. Gérer les dépendances avec un fichier requirements.txt # Si vous travaillez sur un projet avec plusieurs bibliothèques, il est pratique de les sauvegarder dans un fichier requirements.txt pour faciliter l’installation sur d’autres machines.\n📌 Générer un fichier requirements.txt # Sauvegardez les packages actuellement installés :\npip freeze \u0026gt; requirements.txt Cela crée un fichier contenant toutes les dépendances sous cette forme :\nrequests==2.31.0 numpy==1.24.2 Flask==2.2.3 📌 Installer les dépendances depuis un requirements.txt # Si vous récupérez un projet et que vous voulez installer toutes les dépendances d’un coup :\npip install -r requirements.txt 6. Utiliser PIP avec des environnements virtuels # Un environnement virtuel permet d’isoler vos projets pour éviter les conflits entre packages. En combinant PIP et venv, vous gérez mieux vos dépendances.\nCréer un environnement virtuel # Dans le dossier de votre projet, exécutez :\npython -m venv mon_env Puis, activez-le :\nWindows : mon_env\\Scripts\\activate Mac/Linux : source mon_env/bin/activate Désormais, tous les packages installés avec pip install seront isolés de votre système principal.\nPour désactiver l’environnement :\ndeactivate 7. Installer une version spécifique d’un package # Besoin d’une version particulière ? Spécifiez-la lors de l’installation :\npip install nom_du_package==1.2.3 Exemple :\npip install numpy==1.21.0 Pour voir les versions disponibles :\npip install nom_du_package== Puis appuyez sur TAB pour voir la liste.\n8. Trouver plus d’infos sur un package # Besoin de détails sur un package installé ? Utilisez :\npip show nom_du_package Exemple :\npip show requests Vous obtiendrez une sortie avec son auteur, sa version et son site web.\n9. Astuces et bonnes pratiques # Utilisez toujours des environnements virtuels (venv ou virtualenv) pour éviter les conflits entre projets. Mettez régulièrement à jour pip avec : python -m pip install --upgrade pip Générez un fichier requirements.txt pour sauvegarder les dépendances de votre projet. Utilisez pip search (⚠️ cette commande est obsolète, utilisez PyPI pour chercher un package). Évitez sudo pip install sur Linux/Mac, privilégiez les environnements virtuels. 10. Conclusion # PIP est un outil incontournable pour tout développeur Python. Grâce à lui, vous installez, mettez à jour et gérez vos bibliothèques avec facilité. Si vous voulez un workflow propre, combinez PIP avec des environnements virtuels et utilisez des fichiers requirements.txt pour gérer vos dépendances efficacement.\n🔥 Prochain défi ? Testez l’installation d’un package comme Flask ou Pandas et expérimentez avec un environnement virtuel ! 🚀\n","date":"4 mars 2025","externalUrl":null,"permalink":"/fr/courses/python/pip/","section":"Cours","summary":"","title":"Le gestionnaire de packet PIP","type":"courses"},{"content":"","date":"4 mars 2025","externalUrl":null,"permalink":"/fr/tags/pip/","section":"Tags","summary":"","title":"PIP","type":"tags"},{"content":"","date":"4 mars 2025","externalUrl":null,"permalink":"/fr/tags/module/","section":"Tags","summary":"","title":"Module","type":"tags"},{"content":" Les RegEx en Python : Domptez la Puissance des Expressions Régulières # Les expressions régulières, ou RegEx, c\u0026rsquo;est l\u0026rsquo;outil ultime pour manipuler du texte en mode ninja. En Python, le module re vous permet de rechercher, de filtrer, de valider ou de transformer des chaînes de caractères avec une efficacité redoutable. Dans cet article, on va plonger dans l\u0026rsquo;univers des RegEx, découvrir leurs bases et voir comment les utiliser pour rendre vos scripts Python encore plus puissants. 🚀\n1. Introduction aux RegEx # Les expressions régulières sont des patterns qui permettent de définir des ensembles de chaînes de caractères. Que vous ayez besoin d\u0026rsquo;extraire des emails, de valider un numéro de téléphone ou simplement de découper une phrase, les RegEx sont vos alliées.\nExemple classique :\nPattern : \\d+ Description : Recherche une ou plusieurs occurrences de chiffres. 2. Le module re en Python # Avant de plonger dans des exemples pratiques, importez simplement le module :\nimport re Ce module offre plusieurs fonctions essentielles pour travailler avec les RegEx.\n3. Fonctions Clés du module re # 🔹 re.search() : Chercher un motif dans une chaîne # re.search() retourne le premier match trouvé dans la chaîne, sinon None.\nimport re texte = \u0026#34;Mon numéro est 12345, appelez-moi !\u0026#34; resultat = re.search(r\u0026#34;\\d+\u0026#34;, texte) if resultat: print(\u0026#34;Match trouvé :\u0026#34;, resultat.group()) # Affiche : 12345 🔹 re.match() : Tester le début d\u0026rsquo;une chaîne # re.match() vérifie si le pattern correspond dès le début de la chaîne.\nimport re texte = \u0026#34;2025-03-04 est une date importante\u0026#34; resultat = re.match(r\u0026#34;\\d{4}-\\d{2}-\\d{2}\u0026#34;, texte) if resultat: print(\u0026#34;Date détectée :\u0026#34;, resultat.group()) # Affiche : 2025-03-04 🔹 re.findall() : Trouver toutes les correspondances # Pour récupérer tous les matches, re.findall() retourne une liste.\nimport re texte = \u0026#34;Les nombres dans cette phrase sont 12, 34 et 56.\u0026#34; nombres = re.findall(r\u0026#34;\\d+\u0026#34;, texte) print(\u0026#34;Nombres trouvés :\u0026#34;, nombres) # Affiche : [\u0026#39;12\u0026#39;, \u0026#39;34\u0026#39;, \u0026#39;56\u0026#39;] 🔹 re.sub() : Remplacer des motifs dans une chaîne # re.sub() remplace toutes les occurrences du pattern par une nouvelle chaîne.\nimport re texte = \u0026#34;Les fruits: pomme, banane, cerise.\u0026#34; resultat = re.sub(r\u0026#34;pomme|banane|cerise\u0026#34;, \u0026#34;fruit\u0026#34;, texte) print(resultat) # Affiche : Les fruits: fruit, fruit, fruit. 🔹 re.split() : Découper une chaîne selon un motif # Cette fonction scinde la chaîne aux endroits où le pattern est trouvé.\nimport re texte = \u0026#34;Python;Java;C++;JavaScript\u0026#34; langages = re.split(r\u0026#34;;\u0026#34;, texte) print(\u0026#34;Liste de langages :\u0026#34;, langages) # Affiche : [\u0026#39;Python\u0026#39;, \u0026#39;Java\u0026#39;, \u0026#39;C++\u0026#39;, \u0026#39;JavaScript\u0026#39;] 4. Utilisation des Flags # Les flags modifient le comportement de la recherche :\nre.IGNORECASE (ou re.I) : Ignore la casse. re.MULTILINE (ou re.M) : Permet de traiter chaque ligne indépendamment. re.DOTALL (ou re.S) : Le point (.) matche aussi les sauts de ligne. import re texte = \u0026#34;Python est génial.\\npython est simple.\u0026#34; resultats = re.findall(r\u0026#34;python\u0026#34;, texte, flags=re.IGNORECASE) print(resultats) # Affiche : [\u0026#39;Python\u0026#39;, \u0026#39;python\u0026#39;] 5. Compilation des RegEx avec re.compile() # Pour optimiser vos recherches répétées, compilez votre expression régulière :\nimport re pattern = re.compile(r\u0026#34;\\b\\w{5}\\b\u0026#34;) # Mot de 5 lettres texte = \u0026#34;Hello world, ceci est un test avec plusieurs mots.\u0026#34; matches = pattern.findall(texte) print(\u0026#34;Mots de 5 lettres :\u0026#34;, matches) La compilation permet d\u0026rsquo;améliorer la lisibilité et les performances, surtout dans des boucles.\n6. Trucs et Astuces pour Maîtriser les RegEx # Utilisez des groupes\nLes parenthèses () vous permettent de capturer des sous-parties d\u0026rsquo;un match.\nimport re texte = \u0026#34;Nom: Dupont, Prénom: Jean\u0026#34; match = re.search(r\u0026#34;Nom: (\\w+), Prénom: (\\w+)\u0026#34;, texte) if match: print(\u0026#34;Nom :\u0026#34;, match.group(1)) print(\u0026#34;Prénom :\u0026#34;, match.group(2)) Soyez précis avec les quantificateurs\n+ pour \u0026ldquo;une ou plusieurs fois\u0026rdquo;, * pour \u0026ldquo;zéro ou plusieurs fois\u0026rdquo;, ? pour \u0026ldquo;zéro ou une fois\u0026rdquo;.\nPensez à l\u0026rsquo;usage de {min,max} pour plus de contrôle.\nÉvitez les pièges des caractères spéciaux\nCertains caractères, comme le point . ou l\u0026rsquo;étoile *, ont des significations particulières.\nPour matcher un point littéral, utilisez \\. par exemple.\n7. Conclusion # Les expressions régulières en Python offrent un moyen puissant et flexible de travailler avec le texte. Que vous deviez extraire des informations, valider des formats ou transformer des chaînes, le module re vous donne toutes les clés pour réussir.\nN\u0026rsquo;hésitez pas à expérimenter et à consulter la documentation officielle pour découvrir encore plus de subtilités. Alors, à vos claviers et faites parler vos RegEx ! 😎\nProchain défi ? Créez une fonction qui valide des adresses email avec une RegEx robuste. Bonne programmation et que le pouvoir des RegEx soit avec vous !\n","date":"4 mars 2025","externalUrl":null,"permalink":"/fr/courses/python/module-regex/","section":"Cours","summary":"","title":"Module RegEx","type":"courses"},{"content":"","date":"4 mars 2025","externalUrl":null,"permalink":"/fr/tags/regex/","section":"Tags","summary":"","title":"RegEx","type":"tags"},{"content":"","date":"4 mars 2025","externalUrl":null,"permalink":"/fr/tags/json/","section":"Tags","summary":"","title":"JSON","type":"tags"},{"content":"JSON (JavaScript Object Notation) est un format ultra-populaire pour échanger des données. Léger, lisible et facile à parser, il est utilisé partout : API, bases de données, fichiers de configuration\u0026hellip; Bref, si vous codez en Python, vous allez souvent bosser avec du JSON.\nHeureusement, Python nous simplifie la vie avec son module json, un outil puissant pour convertir des objets Python en JSON (sérialisation) et vice versa (désérialisation). On va voir ça en détail, avec des exemples concrets pour que vous soyez OP sur JSON. 🔥\n1. Importation du Module JSON # Le module json est inclus de base en Python, donc pas besoin d’installation supplémentaire. Un simple :\nimport json Et vous êtes prêt à tout casser ! 🚀\n2. Convertir un Dictionnaire Python en JSON (json.dumps) # La fonction json.dumps() transforme un objet Python en une chaîne JSON.\nimport json data = { \u0026#34;nom\u0026#34;: \u0026#34;John\u0026#34;, \u0026#34;age\u0026#34;: 25, \u0026#34;ville\u0026#34;: \u0026#34;Paris\u0026#34;, \u0026#34;est_étudiant\u0026#34;: False } json_str = json.dumps(data) print(json_str) # {\u0026#34;nom\u0026#34;: \u0026#34;John\u0026#34;, \u0026#34;age\u0026#34;: 25, \u0026#34;ville\u0026#34;: \u0026#34;Paris\u0026#34;, \u0026#34;est_étudiant\u0026#34;: false} 🔹 Points importants :\nLes booléens (True et False) deviennent respectivement true et false en JSON. Les dictionnaires Python (dict) sont directement convertibles en JSON. dumps() ne stocke pas les données dans un fichier, il retourne juste une chaîne JSON. 🔹 Formatage lisible (indent, sort_keys) # Le JSON brut, c’est bien. Lisible, c’est mieux !\njson_str = json.dumps(data, indent=4, sort_keys=True) print(json_str) 📌 Explications :\nindent=4 ajoute une indentation de 4 espaces pour un affichage propre. sort_keys=True trie les clés par ordre alphabétique. 3. Convertir du JSON en Dictionnaire Python (json.loads) # La fonction json.loads() permet de convertir une chaîne JSON en objet Python.\njson_str = \u0026#39;{\u0026#34;nom\u0026#34;: \u0026#34;Alice\u0026#34;, \u0026#34;age\u0026#34;: 30, \u0026#34;ville\u0026#34;: \u0026#34;Lyon\u0026#34;}\u0026#39; data = json.loads(json_str) print(data[\u0026#34;nom\u0026#34;]) # Alice print(type(data)) # \u0026lt;class \u0026#39;dict\u0026#39;\u0026gt; 📌 Pourquoi c’est utile ?\nQuand on récupère des données JSON d’une API ou d’un fichier, json.loads() permet de les manipuler comme un dictionnaire Python. 4. Lire et Écrire un Fichier JSON (json.dump \u0026amp; json.load) # 🔹 Sauvegarder un dictionnaire dans un fichier JSON (json.dump) # Si vous voulez stocker des données sous forme de JSON, json.dump() est là pour ça :\nwith open(\u0026#34;data.json\u0026#34;, \u0026#34;w\u0026#34;) as file: json.dump(data, file, indent=4) 🔹 Différence avec json.dumps() ?\njson.dumps() retourne une chaîne JSON. json.dump() écrit directement dans un fichier. 🔹 Charger un fichier JSON (json.load) # On peut ensuite lire notre fichier JSON avec json.load() :\nwith open(\u0026#34;data.json\u0026#34;, \u0026#34;r\u0026#34;) as file: data = json.load(file) print(data) 📌 Pourquoi c’est pratique ?\nUtile pour charger des configurations, des paramètres d\u0026rsquo;application, ou des données utilisateur. 5. Sérialiser des Objets Personnalisés (default) # Que se passe-t-il si on veut convertir un objet custom en JSON ?\nclass Personne: def __init__(self, nom, age): self.nom = nom self.age = age p = Personne(\u0026#34;Max\u0026#34;, 22) # ERREUR ! print(json.dumps(p)) Python ne sait pas comment convertir Personne en JSON. On doit lui expliquer :\ndef convert_obj(obj): if isinstance(obj, Personne): return {\u0026#34;nom\u0026#34;: obj.nom, \u0026#34;age\u0026#34;: obj.age} raise TypeError(\u0026#34;Type non sérialisable\u0026#34;) print(json.dumps(p, default=convert_obj)) ✅ Maintenant, ça fonctionne ! Alternative plus propre :\nimport json class Personne: def __init__(self, nom, age): self.nom = nom self.age = age def to_dict(self): return {\u0026#34;nom\u0026#34;: self.nom, \u0026#34;age\u0026#34;: self.age} p = Personne(\u0026#34;Max\u0026#34;, 22) print(json.dumps(p, default=lambda o: o.to_dict(), indent=4)) 6. Désérialiser des Objets Personnalisés (object_hook) # On peut aussi récupérer un objet à partir du JSON :\njson_str = \u0026#39;{\u0026#34;nom\u0026#34;: \u0026#34;Max\u0026#34;, \u0026#34;age\u0026#34;: 22}\u0026#39; def json_to_personne(d): return Personne(d[\u0026#34;nom\u0026#34;], d[\u0026#34;age\u0026#34;]) p = json.loads(json_str, object_hook=json_to_personne) print(p.nom, p.age) # Max 22 7. Gérer les Erreurs JSON # ⚠️ Les JSON mal formés peuvent provoquer des erreurs. Toujours prévoir une gestion d’erreur !\njson_str = \u0026#39;{\u0026#34;nom\u0026#34;: \u0026#34;Max\u0026#34;, \u0026#34;age\u0026#34;: 22\u0026#39; # Manque une accolade ! try: data = json.loads(json_str) except json.JSONDecodeError as e: print(\u0026#34;Erreur JSON :\u0026#34;, e) 8. Cas Pratiques : JSON dans la Vraie Vie 🚀 # 🔹 Charger un fichier de configuration # Beaucoup d\u0026rsquo;applications stockent leurs paramètres dans un fichier JSON :\nimport json with open(\u0026#34;config.json\u0026#34;) as file: config = json.load(file) print(config[\u0026#34;theme\u0026#34;]) # Exemple : \u0026#34;dark mode\u0026#34; 🔹 API et JSON # Quand on interagit avec une API en Python (via requests), on obtient souvent des réponses JSON. Exemple :\nimport requests response = requests.get(\u0026#34;https://jsonplaceholder.typicode.com/users/1\u0026#34;) data = response.json() print(data[\u0026#34;name\u0026#34;]) # Le nom de l\u0026#39;utilisateur Conclusion # Le module json est un outil essentiel pour tout dev Python. Il permet de :\n✅ Convertir facilement des objets Python en JSON et inversement.\n✅ Manipuler des fichiers JSON pour le stockage de données.\n✅ Sérialiser et désérialiser des objets personnalisés.\n✅ Interagir avec des API qui retournent du JSON.\nBref, si vous bossez avec des données, vous allez utiliser json. Testez-le dès maintenant en écrivant un mini-système de sauvegarde en JSON ! 🚀🔥\n🎯 Prochain Défi : Implémentez une mini-base de données en JSON pour stocker et récupérer des contacts (nom, email, téléphone). 💡\n","date":"4 mars 2025","externalUrl":null,"permalink":"/fr/courses/python/module-json/","section":"Cours","summary":"","title":"Module JSON","type":"courses"},{"content":"","date":"4 mars 2025","externalUrl":null,"permalink":"/fr/tags/math/","section":"Tags","summary":"","title":"Math","type":"tags"},{"content":"En programmation, il est fréquent de devoir manipuler des nombres, calculer des racines carrées, arrondir des valeurs ou encore travailler avec des constantes mathématiques comme π (pi). C\u0026rsquo;est là qu\u0026rsquo;intervient le module math de Python, une boîte à outils ultra pratique pour gérer les calculs numériques sans se casser la tête.\nDans cet article, on va explorer les fonctionnalités les plus utiles du module math, avec des exemples concrets pour chaque cas. Que vous soyez en train de bosser sur un projet de data science, un moteur de jeu ou une simple application nécessitant des calculs, ces fonctions vous feront gagner un temps précieux.\n1. Importation du module math # Le module math est inclus dans la bibliothèque standard de Python, donc pas besoin d’installation supplémentaire. Pour l’utiliser, il suffit de l’importer :\nimport math Et voilà, vous êtes prêt à attaquer du lourd ! 🚀\n2. Les Constantes Mathématiques # Le module math fournit plusieurs constantes très utiles :\nimport math print(\u0026#34;Pi :\u0026#34;, math.pi) # 3.141592653589793 print(\u0026#34;e :\u0026#34;, math.e) # 2.718281828459045 print(\u0026#34;Tau :\u0026#34;, math.tau) # 6.283185307179586 (2 * π) print(\u0026#34;Infini :\u0026#34;, math.inf) # float(\u0026#34;inf\u0026#34;) print(\u0026#34;NaN :\u0026#34;, math.nan) # Not a Number 🔹 Pourquoi c\u0026rsquo;est utile ?\nmath.pi et math.e sont omniprésents en mathématiques (exponentielles, cercles, logarithmes\u0026hellip;). math.inf est pratique pour représenter une valeur infinie sans se compliquer la vie. math.nan est utile pour gérer des erreurs numériques (division par zéro, valeurs manquantes\u0026hellip;). 3. Fonctions de Base # Python propose déjà les opérations arithmétiques classiques (+, -, *, /, **, %). Mais le module math fournit des versions optimisées et précises de certaines d’entre elles :\n🔹 Racine carrée et puissances # print(math.sqrt(25)) # 5.0 print(math.pow(2, 3)) # 8.0 (équivalent à 2 ** 3) 🔸 Différence entre pow() et ** ?\nmath.pow() retourne toujours un float, tandis que ** garde le type natif (int ou float).\n🔹 Valeurs absolues et factorielle # print(math.fabs(-10)) # 10.0 (toujours un float) print(math.factorial(5)) # 120 (5! = 5 × 4 × 3 × 2 × 1) 🔹 Arrondi vers le haut ou le bas # print(math.ceil(4.3)) # 5 (arrondi vers le haut) print(math.floor(4.9)) # 4 (arrondi vers le bas) 4. Logarithmes et Exponentielles # Les logarithmes et exponentielles sont très utilisés en sciences et en finance :\nprint(math.exp(2)) # e^2 print(math.log(10)) # Logarithme naturel (base e) print(math.log10(100)) # Logarithme en base 10 print(math.log2(8)) # Logarithme en base 2 🔹 Pourquoi utiliser math.log() plutôt que numpy.log() ?\nSi vous travaillez avec de gros tableaux de nombres, numpy sera plus efficace. Mais pour des calculs simples, math.log() fait largement le taf.\n5. Trigonométrie : Jouons avec les Angles # Le module math est également un couteau suisse pour tout ce qui touche à la trigonométrie :\nprint(math.sin(math.pi / 2)) # 1.0 print(math.cos(math.pi)) # -1.0 print(math.tan(math.pi / 4)) # 1.0 Les fonctions inverses existent aussi :\nprint(math.asin(1)) # Retourne pi/2 print(math.acos(-1)) # Retourne pi print(math.atan(1)) # Retourne pi/4 🔹 Conversion entre radians et degrés # Les fonctions trigonométriques utilisent les radians, mais on peut convertir facilement :\nprint(math.degrees(math.pi)) # 180.0 print(math.radians(90)) # 1.5707963267948966 6. Gestion des Nombres Flottants et Comparaisons # Python peut parfois avoir du mal à gérer les comparaisons entre nombres flottants à cause des erreurs d’arrondi. math propose des solutions :\nprint(math.isfinite(10)) # True print(math.isinf(math.inf)) # True print(math.isnan(math.nan)) # True Et pour comparer correctement deux nombres flottants :\nprint(math.isclose(0.1 + 0.2, 0.3)) # True (avec une marge d’erreur) 7. Quelques Astuces et Applications Pratiques # 🔹 Générer des nombres aléatoires avec math # Si vous n\u0026rsquo;avez pas besoin d\u0026rsquo;un vrai générateur de nombres aléatoires (random), vous pouvez utiliser :\nimport math import random angle = random.uniform(0, 2 * math.pi) # Angle aléatoire en radians print(math.sin(angle)) # Valeur de sin(angle) aléatoire 🔹 Calculer l\u0026rsquo;hypoténuse sans prise de tête # print(math.hypot(3, 4)) # 5.0 (évite d\u0026#39;écrire sqrt(x**2 + y**2)) 🔹 Approximation de π avec la formule de Leibniz # Si vous voulez impressionner votre prof de maths :\ndef approx_pi(n): return 4 * sum((-1) ** k / (2 * k + 1) for k in range(n)) print(approx_pi(1000000)) # Approche la valeur de π Conclusion # Le module math est un incontournable pour tout développeur qui manipule des nombres en Python. Il offre une multitude d\u0026rsquo;outils pour simplifier vos calculs et optimiser vos performances sans réinventer la roue. Que ce soit pour la trigonométrie, les logarithmes, les arrondis ou encore les comparaisons numériques, math est là pour vous simplifier la vie.\n🚀 Prochain défi ? Essayez d’écrire une fonction qui calcule la distance entre deux points dans un espace 3D en utilisant math.sqrt() et math.hypot() !\nAllez, à vos claviers ! 😎\n","date":"4 mars 2025","externalUrl":null,"permalink":"/fr/courses/python/module-math/","section":"Cours","summary":"","title":"Module Math","type":"courses"},{"content":"","date":"4 mars 2025","externalUrl":null,"permalink":"/fr/tags/dates/","section":"Tags","summary":"","title":"Dates","type":"tags"},{"content":"La gestion des dates et des heures est une facette incontournable de la programmation, et Python met à votre disposition des outils puissants pour travailler avec ces données temporelles. Dans cet article, nous allons explorer les bases de la manipulation des dates en Python, en mettant l\u0026rsquo;accent sur le module intégré datetime, ainsi que quelques astuces pratiques pour formater, comparer et transformer vos dates.\n1. Découverte du module datetime # Le module datetime est la pierre angulaire pour manipuler les dates et les heures en Python. Il permet de créer des objets représentant des dates, des heures, ou une combinaison des deux, et offre de nombreuses méthodes pour effectuer des calculs et des conversions.\nExemple de base # from datetime import datetime # Récupérer la date et l\u0026#39;heure actuelles maintenant = datetime.now() print(\u0026#34;Date et heure actuelles :\u0026#34;, maintenant) Ici, la fonction datetime.now() retourne l’instant présent au moment de l’exécution, ce qui est utile pour journaliser des événements ou pour toute opération nécessitant un repère temporel.\n2. Manipuler les dates avec timedelta # Pour effectuer des calculs sur les dates – par exemple, ajouter ou soustraire des jours, des heures ou des minutes – Python propose la classe timedelta.\nAjouter ou soustraire du temps # from datetime import datetime, timedelta # Date actuelle maintenant = datetime.now() # Ajouter un jour demain = maintenant + timedelta(days=1) print(\u0026#34;Demain :\u0026#34;, demain) # Soustraire deux heures il_y_a_deux_heures = maintenant - timedelta(hours=2) print(\u0026#34;Il y a deux heures :\u0026#34;, il_y_a_deux_heures) L\u0026rsquo;utilisation de timedelta permet de manipuler facilement les dates sans se soucier des complexités du calendrier.\n3. Formatage et Parsing des Dates # Il est souvent nécessaire de convertir un objet datetime en chaîne de caractères pour l’affichage ou inversement, de transformer une chaîne en objet datetime. Pour cela, Python propose les méthodes strftime() et strptime().\nFormater une date en chaîne # from datetime import datetime maintenant = datetime.now() date_formatee = maintenant.strftime(\u0026#34;%Y-%m-%d %H:%M:%S\u0026#34;) print(\u0026#34;Date formatée :\u0026#34;, date_formatee) La méthode strftime() vous permet de définir un format personnalisé pour représenter la date, en utilisant des directives comme %Y pour l’année sur quatre chiffres, %m pour le mois, %d pour le jour, etc.\nConvertir une chaîne en date # from datetime import datetime date_str = \u0026#34;2025-03-04 15:30:00\u0026#34; date_parsee = datetime.strptime(date_str, \u0026#34;%Y-%m-%d %H:%M:%S\u0026#34;) print(\u0026#34;Date parsée :\u0026#34;, date_parsee) La méthode strptime() analyse une chaîne de caractères en fonction du format spécifié et retourne un objet datetime correspondant.\n4. Travailler avec les Fuseaux Horaires # Les applications internationales nécessitent souvent de gérer les fuseaux horaires. Python 3.2 et versions ultérieures introduisent le support de fuseaux horaires dans le module datetime.\nExemple avec fuseau horaire UTC # from datetime import datetime, timezone # Obtenir l\u0026#39;heure actuelle en UTC maintenant_utc = datetime.now(timezone.utc) print(\u0026#34;Date et heure en UTC :\u0026#34;, maintenant_utc) Pour une gestion plus avancée des fuseaux horaires, la bibliothèque externe pytz ou dateutil peut être utilisée afin d\u0026rsquo;assurer une conversion précise entre les différents fuseaux.\n5. Quelques Astuces et Bonnes Pratiques # Différence entre now() et utcnow()\nBien que datetime.now() retourne l\u0026rsquo;heure locale, datetime.utcnow() fournit l\u0026rsquo;heure en UTC. Cependant, ce dernier ne crée pas d\u0026rsquo;objet conscient de son fuseau horaire, ce qui peut entraîner des erreurs lors des calculs internationaux. Il est donc préférable d\u0026rsquo;utiliser datetime.now(timezone.utc) pour un résultat cohérent.\nComparaison et tri de dates\nLes objets datetime peuvent être comparés directement avec les opérateurs relationnels (\u0026lt;, \u0026gt;, ==), ce qui facilite le tri ou la vérification de plages horaires.\nUtilisation de bibliothèques externes\nPour des manipulations de dates plus complexes, comme la gestion des horaires d’été ou des fuseaux horaires multiples, envisagez d’utiliser des bibliothèques telles que pytz ou dateutil.\nConclusion # La manipulation des dates en Python est à la fois puissante et flexible grâce au module datetime. Que vous ayez besoin de formater des dates pour l\u0026rsquo;affichage, de calculer des intervalles temporels, ou de gérer des fuseaux horaires, Python offre des outils adaptés à chaque besoin. En maîtrisant ces techniques, vous gagnerez en efficacité dans le traitement des données temporelles, un atout indispensable pour de nombreux projets de développement.\nN\u0026rsquo;hésitez pas à expérimenter avec ces exemples et à explorer la documentation officielle pour découvrir toutes les subtilités du module datetime. Bonne programmation et que le temps soit avec vous !\n","date":"4 mars 2025","externalUrl":null,"permalink":"/fr/courses/python/dates/","section":"Cours","summary":"","title":"Les Dates en Python","type":"courses"},{"content":"Python est bien plus qu’un simple langage de programmation : c’est un écosystème où chaque fichier de code peut devenir une brique de votre projet. Pour tous ceux qui veulent écrire un code clair, réutilisable et modulable, les modules Python sont vos meilleurs alliés. Dans cet article, nous allons explorer ce concept essentiel et découvrir comment les modules transforment notre manière de programmer.\nQu’est-ce qu’un module Python ? # Un module Python, c’est simplement un fichier contenant du code Python. Que ce soit des fonctions, des classes ou des variables, tout ce que vous y mettez peut être importé et utilisé dans d’autres parties de votre application. Imaginez-le comme une boîte à outils que vous pouvez construire une fois et réutiliser à l’infini !\nExemple : # # mon_module.py def saluer(nom): return f\u0026#34;Bonjour, {nom} !\u0026#34; Pour utiliser ce module, il suffit de l’importer dans un autre fichier :\n# main.py import mon_module print(mon_module.saluer(\u0026#34;Alice\u0026#34;)) L’importation : la clé de la réutilisation # Python offre plusieurs façons d’importer des modules, chacune ayant ses avantages :\nImport complet : import mon_module permet d’accéder à toutes les fonctions et variables à l’aide du préfixe du nom du module. Import partiel : from mon_module import saluer vous permet d’utiliser directement la fonction sans préfixe. Alias : import mon_module as mm offre une alternative pratique pour raccourcir les noms lors de l’importation. Cette flexibilité rend le code non seulement plus lisible, mais aussi plus facile à maintenir, surtout quand votre projet grossit.\nCréer ses propres modules : une aventure personnelle # Créer un module, c’est prendre le contrôle de votre environnement de développement. Organiser vos fonctions et classes en modules bien définis rend votre code plus modulaire et favorise la collaboration entre développeurs.\nUn petit exemple de module personnalisé : # # calculs.py def addition(a, b): return a + b def multiplication(a, b): return a * b if __name__ == \u0026#34;__main__\u0026#34;: # Ce code ne s’exécute que lorsque le module est lancé directement print(\u0026#34;Test de module calculs :\u0026#34;) print(\u0026#34;Addition de 3 et 5 :\u0026#34;, addition(3, 5)) print(\u0026#34;Multiplication de 3 et 5 :\u0026#34;, multiplication(3, 5)) En utilisant le bloc if __name__ == \u0026quot;__main__\u0026quot;:, vous pouvez inclure des tests ou des démonstrations sans affecter le comportement lorsque le module est importé ailleurs.\nModules standard et tiers : la richesse de l’écosystème Python # L’un des atouts majeurs de Python est son immense collection de modules standards et de packages tiers accessibles via le gestionnaire de paquets pip. Vous pouvez ainsi ajouter des fonctionnalités avancées à vos projets sans réinventer la roue.\nQuelques modules incontournables : # math : Pour les opérations mathématiques complexes. datetime : Pour manipuler les dates et les heures. requests : Pour effectuer des requêtes HTTP de manière simple et efficace (module tiers). L’utilisation judicieuse de ces modules vous permet de vous concentrer sur la logique métier de votre application tout en bénéficiant des fonctionnalités éprouvées de la communauté.\nBonnes pratiques et astuces # Structurez votre code : Organisez vos modules de manière cohérente en suivant une structure de projet claire. Documentez vos modules : Ajoutez des docstrings pour que chacun comprenne l’usage des fonctions et classes. Utilisez des environnements virtuels : Pour isoler vos dépendances et garder un contrôle sur vos versions de modules. Suivez les conventions : Respectez le PEP 8 pour un code lisible et maintenable. Conclusion # Les modules Python sont le cœur de la modularité et de la réutilisation du code. Ils permettent de décomposer des projets complexes en parties simples et gérables, facilitant ainsi la maintenance et l’évolution de vos applications. Que vous soyez débutant ou expert, comprendre et exploiter les modules est une étape incontournable pour maîtriser Python.\nAlors, prêt à explorer l’univers des modules et à donner vie à vos projets avec élégance et efficacité ? Happy coding !\n","date":"4 mars 2025","externalUrl":null,"permalink":"/fr/courses/python/modules/","section":"Cours","summary":"","title":"Les Modules en Python","type":"courses"},{"content":"","date":"4 mars 2025","externalUrl":null,"permalink":"/fr/tags/modules/","section":"Tags","summary":"","title":"Modules","type":"tags"},{"content":"Si t’as déjà eu un bug chelou où une variable semble disparaître ou changer toute seule, bienvenue dans le monde de la portée (scope) en Python. C’est un concept simple mais fondamental : il définit où une variable est accessible dans ton code. Et si tu veux éviter des surprises, mieux vaut le maîtriser.\nLes différents types de portée en Python # Python a une structure bien définie pour gérer les variables. On parle souvent de LEGB (Local, Enclosing, Global, Built-in), un acronyme qui résume l’ordre de recherche des variables.\n1. Portée locale (Local Scope) # Une variable définie à l’intérieur d’une fonction est locale :\ndef ma_fonction(): x = 10 # x est locale à cette fonction print(x) ma_fonction() print(x) # Erreur : x n\u0026#39;existe pas ici Ici, x est créée et utilisée uniquement dans ma_fonction(). Dès que la fonction termine, bye-bye x !\n2. Portée englobante (Enclosing Scope) # Quand une fonction est imbriquée dans une autre, elle peut voir les variables de la fonction englobante :\ndef externe(): y = 20 # portée englobante def interne(): print(y) # y est visible ici ! interne() externe() Là, interne() a accès à y, car Python regarde d’abord dans son propre scope, puis dans celui de externe().\n3. Portée globale (Global Scope) # Une variable définie hors de toute fonction est globale :\nz = 30 # variable globale def afficher(): print(z) # Accessible partout afficher() print(z) # Toujours accessible Mais attention, si tu veux modifier une variable globale à l’intérieur d’une fonction, il faut le préciser :\na = 40 def changer_a(): global a # On dit à Python de modifier la variable globale a = 50 changer_a() print(a) # 50 Sans global, Python créerait une nouvelle variable locale a au lieu de modifier la globale.\n4. Portée built-in (Built-in Scope) # Ce sont les fonctions et variables intégrées à Python, genre len(), print(), etc.\nprint(len(\u0026#34;Hello\u0026#34;)) # len() est dans la portée built-in Quand ça devient bizarre : Les variables non locales # Quand une fonction imbriquée veut modifier une variable englobante (mais pas globale), on utilise nonlocal :\ndef externe(): b = 60 # Variable englobante def interne(): nonlocal b # Permet de modifier b au lieu de créer une variable locale b = 70 interne() print(b) # 70 externe() Sans nonlocal, b dans interne() serait une nouvelle variable locale et n’affecterait pas b de externe().\nConclusion : Un jeu de pistes bien organisé # Python suit toujours cet ordre LEGB pour chercher une variable :\nLocal : D’abord dans la fonction actuelle Enclosing : Puis dans les fonctions englobantes Global : Ensuite dans le script principal Built-in : Enfin dans les fonctions natives de Python Si tu comprends bien ça, tu éviteras des bugs étranges et tu gagneras en clarté dans ton code.\n🚀 Prochain défi ? Essaye de deviner la sortie du code suivant :\nx = 100 def exo(): x = 200 def sub_exo(): global x x = 300 sub_exo() print(x) exo() print(x) Réponse ? Teste et analyse pourquoi c’est ce résultat 😉\n","date":"3 mars 2025","externalUrl":null,"permalink":"/fr/courses/python/portee/","section":"Cours","summary":"","title":"La portee en Python","type":"courses"},{"content":"","date":"3 mars 2025","externalUrl":null,"permalink":"/fr/tags/port%C3%A9e/","section":"Tags","summary":"","title":"Portée","type":"tags"},{"content":"","date":"3 mars 2025","externalUrl":null,"permalink":"/fr/tags/polymorphisme/","section":"Tags","summary":"","title":"Polymorphisme","type":"tags"},{"content":"T’as déjà entendu parler du polymorphisme en Python, mais ça te semble encore flou ? Imagine un ninja qui change de technique en fonction de son adversaire : le polymorphisme, c’est un peu ça en programmation. Il permet d’utiliser une même interface pour différents types d’objets, rendant ton code plus flexible et réutilisable.\n1. C’est quoi le polymorphisme ? # En gros, c’est la capacité d’un objet à se comporter différemment selon son contexte. En Python, ça s’applique surtout aux classes et aux méthodes qui peuvent être redéfinies sans changer leur nom.\n2. Le polymorphisme avec les classes # En POO, t’as des classes parent et enfant. L’idée, c’est que les classes enfant peuvent redéfinir des méthodes tout en gardant le même nom. Exemple classique avec des animaux :\nclass Animal: def parler(self): pass # Méthode à redéfinir class Chien(Animal): def parler(self): return \u0026#34;Wouf!\u0026#34; class Chat(Animal): def parler(self): return \u0026#34;Miaou!\u0026#34; # Utilisation polymorphique animaux = [Chien(), Chat()] for animal in animaux: print(animal.parler()) # Chaque animal réagit selon son type 💡 Ici, parler() est redéfini pour chaque animal, mais on l’appelle de la même façon.\n3. Le polymorphisme avec les fonctions # Les fonctions en Python peuvent accepter des objets différents tant qu’ils respectent un certain contrat. Pas besoin de définir un type strict, Python est dynamique !\ndef faire_parler(animal): print(animal.parler()) faire_parler(Chien()) # Wouf! faire_parler(Chat()) # Miaou! Python s’en fiche du type exact de animal, tant qu’il a une méthode parler(). C’est ce qu’on appelle le duck typing : \u0026ldquo;Si ça marche comme un canard, alors c’est un canard\u0026rdquo;.\n4. Le polymorphisme avec les opérateurs # Tu peux aussi redéfinir le comportement des opérateurs (+, -, etc.) grâce aux méthodes magiques.\nclass Point: def __init__(self, x, y): self.x, self.y = x, y def __add__(self, other): return Point(self.x + other.x, self.y + other.y) def __str__(self): return f\u0026#34;({self.x}, {self.y})\u0026#34; p1 = Point(2, 3) p2 = Point(4, 1) print(p1 + p2) # (6, 4) 🔹 Ici, on redéfinit + pour additionner des objets Point au lieu de simples nombres.\n5. Pourquoi utiliser le polymorphisme ? # ✅ Code plus propre et maintenable\n✅ Réduction du copier-coller (DRY : Don’t Repeat Yourself)\n✅ Plus de flexibilité dans le design\nLe polymorphisme, c’est un outil puissant quand tu veux coder de manière modulaire et évolutive. Au lieu d’écrire des conditions à rallonge du genre if isinstance(obj, TypeX): ..., tu laisses Python gérer ça pour toi.\nConclusion # Si tu veux écrire du code propre et scalable, le polymorphisme est ton allié. Il te permet d\u0026rsquo;écrire du code générique tout en gérant des cas spécifiques sans te casser la tête.\n💡 Retiens juste que tant qu’un objet répond à la bonne méthode, Python le considère valide, peu importe son type !\nT’as capté ? Maintenant, applique ça dans tes projets et deviens un ninja du code ! 🚀\n","date":"3 mars 2025","externalUrl":null,"permalink":"/fr/courses/python/polymorphisme/","section":"Cours","summary":"","title":"Polymorphisme","type":"courses"},{"content":"","date":"3 mars 2025","externalUrl":null,"permalink":"/fr/tags/heritage/","section":"Tags","summary":"","title":"Heritage","type":"tags"},{"content":"Si tu veux devenir un tueur en Python, comprendre l’héritage est un passage obligé. Que ce soit pour organiser ton code proprement, réutiliser des fonctionnalités ou construire des systèmes modulaires, l’héritage est un outil puissant. Mais mal utilisé, il peut aussi transformer ton code en une usine à gaz difficile à maintenir.\nDans cet article, on va décortiquer l’héritage en Python, ses avantages, ses pièges et comment bien l’utiliser. Let’s go ! 🚀\n🏗️ C’est quoi l’héritage en Python ? # L’héritage, c’est un concept de la programmation orientée objet (POO) qui permet à une classe (appelée classe enfant ou classe dérivée) de récupérer les attributs et méthodes d’une autre classe (la classe parente ou superclasse).\nL’idée est simple : plutôt que de réécrire le même code dans plusieurs classes, on le centralise dans une classe de base et on le fait hériter là où on en a besoin.\n🔥 Exemple basique d’héritage # class Animal: def __init__(self, name): self.name = name def speak(self): return \u0026#34;Je fais un bruit.\u0026#34; class Dog(Animal): def speak(self): return \u0026#34;Woof!\u0026#34; class Cat(Animal): def speak(self): return \u0026#34;Meow!\u0026#34; dog = Dog(\u0026#34;Rex\u0026#34;) cat = Cat(\u0026#34;Whiskers\u0026#34;) print(dog.name, \u0026#34;:\u0026#34;, dog.speak()) # Rex : Woof! print(cat.name, \u0026#34;:\u0026#34;, cat.speak()) # Whiskers : Meow! Ici, Dog et Cat héritent de Animal. Ils ont la même structure de base, mais chacun redéfinit la méthode speak().\n⚡ Pourquoi utiliser l’héritage ? # L’héritage apporte plusieurs avantages :\n✅ Réutilisation du code : Tu évites de dupliquer du code en le centralisant dans une classe parent.\n✅ Organisation propre : Ton code devient plus clair et modulaire.\n✅ Extensibilité : Ajouter de nouvelles classes devient plus facile sans casser l’existant.\nMais attention, mal utilisé, l’héritage peut rendre le code complexe et difficile à déboguer.\n🎭 Héritage simple vs Héritage multiple # 🏆 Héritage simple # Une classe enfant hérite d’une seule classe parent. C’est ce qu’on a vu dans l’exemple précédent.\nclass Parent: def show(self): return \u0026#34;Je suis la classe Parent.\u0026#34; class Enfant(Parent): pass e = Enfant() print(e.show()) # \u0026#34;Je suis la classe Parent.\u0026#34; Ici, Enfant hérite directement de Parent et peut utiliser sa méthode sans rien réécrire.\n🔀 Héritage multiple # Python permet d’hériter de plusieurs classes en même temps.\nclass A: def foo(self): return \u0026#34;Méthode de A\u0026#34; class B: def bar(self): return \u0026#34;Méthode de B\u0026#34; class C(A, B): pass c = C() print(c.foo()) # \u0026#34;Méthode de A\u0026#34; print(c.bar()) # \u0026#34;Méthode de B\u0026#34; 🛑 Attention aux conflits ! Si plusieurs classes parents ont une méthode avec le même nom, Python suit l’ordre de résolution des méthodes (MRO - Method Resolution Order).\nTu peux voir l’ordre de résolution avec C.mro() :\nprint(C.mro()) 🔄 Super() et surcharge de méthodes # Quand tu veux modifier une méthode héritée tout en gardant une partie du comportement de la classe parent, super() est ton allié.\nclass Parent: def show(self): return \u0026#34;Parent\u0026#34; class Enfant(Parent): def show(self): return super().show() + \u0026#34; → Enfant\u0026#34; e = Enfant() print(e.show()) # \u0026#34;Parent → Enfant\u0026#34; Ici, super().show() appelle la méthode show() de la classe parent avant d’ajouter \u0026quot; → Enfant\u0026quot;.\n🕵️‍♂️ Quand éviter l’héritage ? # L’héritage, c’est bien, mais ce n’est pas toujours la meilleure solution.\n🚫 Si ton arbre de classes devient trop complexe : Un design avec trop d’héritages (en mode arbre généalogique XXL) est souvent un signe de mauvaise conception.\n🚫 Si la relation “est un” n’est pas évidente : L’héritage implique une relation logique forte entre les classes. Si ce n’est pas le cas, privilégie la composition (utiliser un objet à l’intérieur d’un autre plutôt que d’en hériter).\nclass Moteur: def demarrer(self): return \u0026#34;Vroum!\u0026#34; class Voiture: def __init__(self): self.moteur = Moteur() def rouler(self): return self.moteur.demarrer() + \u0026#34; La voiture roule.\u0026#34; v = Voiture() print(v.rouler()) # \u0026#34;Vroum! La voiture roule.\u0026#34; Ici, plutôt que d’hériter de Moteur, Voiture l’utilise comme un composant. C’est plus flexible et évite les dépendances inutiles.\n🏁 Conclusion # L’héritage est une arme puissante, mais il faut savoir l’utiliser intelligemment.\n🔹 Utilise l’héritage quand une relation logique “est un” existe clairement entre les classes.\n🔹 Utilise la composition quand une classe “possède” un autre objet mais n’a pas besoin d’en hériter.\n🔹 Fais attention aux pièges de l’héritage multiple et au MRO en Python.\nSi tu veux maîtriser Python, l’héritage est un must. Expérimente, pratique et applique-le intelligemment dans tes projets.\nT’as des questions ? Balance en commentaire ! 🚀🔥\n","date":"3 mars 2025","externalUrl":null,"permalink":"/fr/courses/python/heritage/","section":"Cours","summary":"","title":"L' Heritage en Python","type":"courses"},{"content":"","date":"3 mars 2025","externalUrl":null,"permalink":"/fr/tags/classes/","section":"Tags","summary":"","title":"Classes","type":"tags"},{"content":"Si t’as déjà croisé des mots comme POO, classes, objets et que ça t’a donné envie de fuir… t’inquiète, on va rendre ça simple et digeste. La programmation orientée objet (POO pour les intimes) est une manière d’organiser ton code pour qu’il soit plus réutilisable, propre et logique.\nAllez, c’est parti.\n1. C’est quoi une classe, c’est quoi un objet ? # Si Python était un jeu vidéo, une classe serait le plan détaillé d’un personnage (genre un modèle 3D avec toutes ses capacités et stats), et un objet serait une instance réelle de ce personnage en jeu.\nEn d’autres termes :\nUne classe définit la structure et le comportement (c’est le moule). Un objet est une copie spécifique créée à partir de cette classe (c’est le gâteau issu du moule). Prenons un exemple concret :\nclass Chat: def __init__(self, nom, couleur): self.nom = nom self.couleur = couleur def miauler(self): return f\u0026#34;{self.nom} : Miaouuuu !\u0026#34; # Création d’objets (des chats spécifiques) chat1 = Chat(\u0026#34;Whiskers\u0026#34;, \u0026#34;Gris\u0026#34;) chat2 = Chat(\u0026#34;Garfield\u0026#34;, \u0026#34;Orange\u0026#34;) print(chat1.miauler()) # Whiskers : Miaouuuu ! print(chat2.miauler()) # Garfield : Miaouuuu ! Ici :\nChat est une classe. chat1 et chat2 sont des objets (des instances de la classe Chat). Chaque objet a ses propres caractéristiques (nom, couleur). miauler() est une méthode (un truc qu’un chat peut faire). 2. Le constructeur __init__ : Le boulanger du code # Le __init__ est la fonction qui est appelée automatiquement quand tu crées un objet. Il sert à donner des valeurs initiales aux attributs de l’objet.\nclass Chien: def __init__(self, nom, race): self.nom = nom self.race = race def aboyer(self): return f\u0026#34;{self.nom} : Wouf Wouf !\u0026#34; chien1 = Chien(\u0026#34;Rex\u0026#34;, \u0026#34;Berger Allemand\u0026#34;) print(chien1.aboyer()) # Rex : Wouf Wouf ! Dès qu’on fait Chien(\u0026quot;Rex\u0026quot;, \u0026quot;Berger Allemand\u0026quot;), Python appelle __init__ en arrière-plan pour créer notre chien.\n3. Attributs et méthodes : La sauce de la POO # Les attributs sont les données de l’objet (nom, couleur, race…).\nLes méthodes sont les actions que l’objet peut effectuer (miauler, aboyer…).\nTu peux aussi avoir des attributs de classe (communs à toutes les instances).\nclass Humain: espece = \u0026#34;Homo sapiens\u0026#34; # Attribut de classe def __init__(self, nom, age): self.nom = nom # Attribut d’instance self.age = age # Attribut d’instance humain1 = Humain(\u0026#34;Alice\u0026#34;, 25) humain2 = Humain(\u0026#34;Bob\u0026#34;, 30) print(humain1.espece) # Homo sapiens print(humain2.espece) # Homo sapiens 4. Héritage : Quand une classe en recycle une autre # L’héritage permet de créer une classe en reprenant une autre et en y ajoutant des modifications. Un peu comme une mise à jour d’un perso dans un jeu.\nclass Animal: def __init__(self, nom): self.nom = nom def parler(self): return \u0026#34;Je fais un bruit d\u0026#39;animal\u0026#34; # Le Chat hérite de Animal class Chat(Animal): def parler(self): return f\u0026#34;{self.nom} : Miaouuu !\u0026#34; chat1 = Chat(\u0026#34;Felix\u0026#34;) print(chat1.parler()) # Felix : Miaouuu ! Ici, Chat hérite de Animal, donc il a accès à nom et peut overrider (redéfinir) parler().\n5. Encapsulation : Protéger ses données comme un boss # L’encapsulation, c’est cacher certaines données pour éviter qu’elles soient modifiées n’importe comment.\nclass CompteBancaire: def __init__(self, titulaire, solde): self.titulaire = titulaire self.__solde = solde # Attribut privé (avec __ devant) def deposer(self, montant): self.__solde += montant def afficher_solde(self): return f\u0026#34;Solde de {self.titulaire} : {self.__solde}€\u0026#34; compte = CompteBancaire(\u0026#34;John\u0026#34;, 1000) compte.deposer(500) print(compte.afficher_solde()) # Solde de John : 1500€ # print(compte.__solde) # Erreur, on ne peut pas y accéder directement ! Le __solde est privé, donc il ne peut pas être modifié n’importe comment en dehors de la classe.\n6. Polymorphisme : Quand les objets s’adaptent # Le polymorphisme, c’est la capacité pour des objets de classes différentes d’utiliser une même méthode mais avec des comportements différents.\nclass Chien: def parler(self): return \u0026#34;Wouf !\u0026#34; class Chat: def parler(self): return \u0026#34;Miaou !\u0026#34; # Utilisation polymorphique animaux = [Chien(), Chat()] for animal in animaux: print(animal.parler()) # Wouf ! # Miaou ! Ici, parler() fonctionne pour Chien et Chat, mais différemment.\nConclusion : La POO, c’est pas si compliqué # Si on résume :\n✅ Une classe est un plan, un objet est une instance de ce plan.\n✅ Le constructeur __init__ sert à initialiser les objets.\n✅ Les attributs sont les données, les méthodes sont les actions.\n✅ L’héritage permet de réutiliser du code.\n✅ L’encapsulation protège certaines données sensibles.\n✅ Le polymorphisme permet d’avoir une même méthode avec différents comportements.\nAvec ça, t’as une base solide pour comprendre la POO en Python. Reste plus qu’à pratiquer 💪.\n","date":"3 mars 2025","externalUrl":null,"permalink":"/fr/courses/python/classes/","section":"Cours","summary":"","title":"Les Classes en Python","type":"courses"},{"content":"","date":"3 mars 2025","externalUrl":null,"permalink":"/fr/tags/objets/","section":"Tags","summary":"","title":"Objets","type":"tags"},{"content":"","date":"3 mars 2025","externalUrl":null,"permalink":"/fr/tags/array/","section":"Tags","summary":"","title":"Array","type":"tags"},{"content":"Les arrays en Python, c’est un peu le truc que tout le monde confond avec les listes. Pourtant, ce sont deux structures bien différentes, et si tu veux vraiment coder efficacement, autant comprendre quand utiliser l’un ou l’autre.\n1. Les Arrays en Python, c’est quoi ? # En Python, on a les listes list, qui sont hyper flexibles, et on a aussi les arrays, qui viennent du module array.\n🔹 Différence clé ?\nUne liste (list) peut contenir des types différents. Un array.array, lui, ne stocke que des éléments du même type (entiers, flottants, etc.). Si tu viens de C ou C++, un array.array ressemble plus à un tableau classique qu’une liste Python.\n2. Pourquoi utiliser array au lieu d’une liste ? # 👉 Performance : Un array.array prend moins de mémoire et est plus rapide pour certaines opérations.\n👉 Contraintes de type : Pas d’accident en mélangeant les types (tu évites les erreurs bizarres).\n👉 Interopérabilité : Si tu bosses avec des données binaires ou du C, c’est souvent plus simple.\nMais si tu cherches encore plus de performance, tu devrais plutôt regarder NumPy, qui est un monstre dans le domaine des tableaux optimisés.\n3. Créer et manipuler un array # D’abord, faut importer le module :\nimport array Ensuite, on crée un array. Il faut spécifier un code de type (par ex. 'i' pour les entiers signés) :\narr = array.array(\u0026#39;i\u0026#39;, [1, 2, 3, 4, 5]) # Tableau d\u0026#39;entiers print(arr) 📌 Quelques codes de type utiles :\n'i' → entier signé (4 octets) 'f' → flottant (4 octets) 'd' → double flottant (8 octets) 'b' → entier signé (1 octet) 4. Manipuler un array # Ajouter des éléments :\narr.append(6) # Ajoute 6 à la fin arr.insert(2, 10) # Insère 10 à l’index 2 print(arr) # [1, 2, 10, 3, 4, 5, 6] Supprimer un élément :\narr.remove(3) # Supprime la première occurrence de 3 print(arr) Accéder aux éléments :\nprint(arr[0]) # Premier élément print(arr[-1]) # Dernier élément Itérer sur l’array :\nfor val in arr: print(val) 5. Les limites des array et pourquoi NumPy est souvent meilleur # Là où array.array est un peu limité, NumPy explose tout. Si tu dois bosser avec des données numériques, évite array et fonce sur NumPy.\nExemple avec NumPy :\nimport numpy as np arr_np = np.array([1, 2, 3, 4, 5]) print(arr_np * 2) # Multiplication vectorielle (plus rapide et optimisée) Avec un array.array, t’aurais eu une erreur si tu tentais de multiplier par 2 directement.\n6. Conclusion : Quand utiliser array ? # ✅ Si tu veux juste un tableau optimisé avec un seul type de données, array est un bon choix.\n✅ Si tu bosses avec de gros calculs numériques ou des matrices, NumPy est bien meilleur.\n✅ Si tu veux de la flexibilité, reste avec les listes Python (list).\nEn gros :\nDébutant ou projet standard ? → Utilise une liste. Besoin de performances et d’optimisation mémoire ? → array.array. Données scientifiques et calculs avancés ? → NumPy. T’as capté l’idée. 🚀\n","date":"3 mars 2025","externalUrl":null,"permalink":"/fr/courses/python/array/","section":"Cours","summary":"","title":"Les array en Python","type":"courses"},{"content":"","date":"27 février 2025","externalUrl":null,"permalink":"/fr/tags/lambda/","section":"Tags","summary":"","title":"Lambda","type":"tags"},{"content":"Les Fonctions Lambda en Python : Des Fonctions Ultra-Compactes\nSi tu es déjà familiarisé avec les fonctions classiques en Python, tu sais qu\u0026rsquo;elles peuvent parfois être un peu longues à écrire pour des tâches simples. C’est là que les fonctions lambda entrent en scène pour te simplifier la vie. Elles te permettent de créer des fonctions anonymes, en une seule ligne, super efficaces et parfaites pour les cas où tu n’as pas besoin de nommer ta fonction.\nDans cet article, on va explorer ce concept et comprendre comment tirer parti des lambda pour rendre ton code plus fluide, plus concis et plus puissant. Prêt à plonger dans ce monde compact et stylé ? Allons-y.\n1. C’est Quoi, Une Fonction Lambda ? # Une fonction lambda, c\u0026rsquo;est une fonction anonyme et inline (sur une seule ligne) qui peut être utilisée partout où une fonction normale est attendue. Elle est idéale quand tu n’as besoin de la fonction que pour un petit calcul ou une opération rapide, et pas pour des traitements complexes.\nVoici la syntaxe de base d’une fonction lambda :\nlambda arguments: expression arguments : Ce sont les entrées de la fonction, comme dans une fonction classique. expression : C’est ce que la fonction retourne, sans avoir besoin de return. Exemple de fonction lambda simple :\ncarre = lambda x: x ** 2 print(carre(5)) # 25 C’est aussi simple que ça ! Une fonction lambda qui prend un argument x et retourne x**2.\n2. Quand Utiliser Les Lambda ? # Les lambdas sont parfaites dans les cas où tu veux passer une fonction simple comme argument dans une autre fonction, sans la définir ailleurs dans ton code. Elles sont souvent utilisées avec des fonctions comme map(), filter(), ou sorted().\nVoici quelques exemples classiques d’utilisation des lambdas.\n3. Avec map() : Transformer Une Liste en Une Seule Ligne # La fonction map() applique une fonction à chaque élément d’un iterable (comme une liste) et renvoie un objet map. Et là, les lambdas brillent vraiment, car elles te permettent de créer des fonctions sans t’embêter à les définir séparément.\nExemple :\nnombres = [1, 2, 3, 4, 5] carres = map(lambda x: x ** 2, nombres) print(list(carres)) # [1, 4, 9, 16, 25] Ici, la fonction lambda transforme chaque élément de la liste nombres en son carré.\n4. Avec filter() : Filtrer les Éléments en Une Ligne # Si tu veux filtrer une liste en fonction d\u0026rsquo;une condition, filter() est ta fonction. Et les lambdas te permettent de le faire en un clin d’œil, sans une fonction définie à part.\nExemple :\nnombres = [1, 2, 3, 4, 5, 6] pairs = filter(lambda x: x % 2 == 0, nombres) print(list(pairs)) # [2, 4, 6] Là, la lambda filtre les nombres pairs dans la liste nombres.\n5. Avec sorted() : Trier Comme un Chef # Tu peux également utiliser des lambdas pour trier des listes de manière personnalisée avec la fonction sorted(). Par exemple, si tu as une liste de tuples et que tu veux trier par un élément spécifique, c’est ultra-simple avec une lambda.\nExemple :\neleves = [(\u0026#34;Alice\u0026#34;, 23), (\u0026#34;Bob\u0026#34;, 17), (\u0026#34;Charlie\u0026#34;, 20)] eleves_tries = sorted(eleves, key=lambda x: x[1]) print(eleves_tries) # [(\u0026#39;Bob\u0026#39;, 17), (\u0026#39;Charlie\u0026#39;, 20), (\u0026#39;Alice\u0026#39;, 23)] Ici, la lambda trie les élèves par âge, qui est le second élément de chaque tuple.\n6. Les Avantages des Lambdas # Compactes et Concises : Pas besoin de définir des fonctions longues quand une simple ligne suffit. Flexibles : Idéales pour des opérations rapides et des traitements courts. Faciles à utiliser : Parfaites pour être utilisées avec des fonctions comme map(), filter(), ou sorted(). 7. Les Limites des Lambdas # Les lambdas sont puissantes, mais elles ont aussi leurs limites. Elles sont uniquement pour des expressions simples. Si tu as besoin de faire des calculs complexes, des boucles, ou des conditions multiples, il vaut mieux opter pour une fonction classique. Une lambda ne doit jamais être un substitut à une fonction trop compliquée.\nExemple d’une mauvaise utilisation d’une lambda :\n# Trop complexe pour une lambda complexe = lambda x: x**2 if x \u0026gt; 0 else -x + 2 * x ** 3 Pour ce genre de calculs, mieux vaut définir une fonction propre et claire.\n8. Fonction Lambda Multiple : Des Arguments à Gogo # Les lambdas peuvent aussi prendre plusieurs arguments. La syntaxe est simple, tu les sépares par des virgules.\nExemple avec plusieurs arguments :\naddition = lambda x, y: x + y print(addition(3, 5)) # 8 Conclusion # Les fonctions lambda en Python sont un outil super pratique pour écrire du code compact, élégant et fonctionnel. Elles te permettent de réaliser des opérations simples et rapides sans encombrer ton code avec des définitions de fonctions classiques. À condition de les utiliser dans des situations adaptées, elles peuvent rendre ton code beaucoup plus lisible et agréable à manipuler.\nAlors, prêt à faire de la magie avec les lambdas et à réduire la taille de ton code ?\n","date":"27 février 2025","externalUrl":null,"permalink":"/fr/courses/python/lambda/","section":"Cours","summary":"","title":"Les fonctions lambda en Python","type":"courses"},{"content":"","date":"27 février 2025","externalUrl":null,"permalink":"/fr/tags/fonctions/","section":"Tags","summary":"","title":"Fonctions","type":"tags"},{"content":"Les Fonctions en Python : La Clé de l\u0026rsquo;Efficacité\nTu veux rendre ton code plus propre, plus modulaire, et surtout réutilisable sans avoir à tout réécrire à chaque fois ? Les fonctions sont là pour ça. Elles te permettent de regrouper un ensemble d\u0026rsquo;instructions sous un seul nom, que tu peux ensuite appeler à tout moment dans ton code, en y passant des paramètres, et en récupérant des résultats.\nDans cet article, on va décortiquer les fonctions en Python, de la manière la plus simple à la plus avancée. Si tu cherches à rendre ton code plus élégant et plus efficient, les fonctions sont un must.\n1. Définir une Fonction : Le Démarrage Facile # La définition d\u0026rsquo;une fonction en Python se fait avec le mot-clé def, suivi du nom de la fonction et des paramètres entre parenthèses. Après ça, on utilise l\u0026rsquo;indentation pour indiquer le bloc de code de la fonction. Ce qui se trouve à l\u0026rsquo;intérieur de la fonction sera exécuté chaque fois que tu l\u0026rsquo;appelles.\nExemple simple :\ndef saluer(): print(\u0026#34;Salut, bienvenue dans le monde de Python !\u0026#34;) Ici, la fonction saluer() affiche un message quand tu l\u0026rsquo;appelles.\n2. Appeler une Fonction : La Magie Opère # Une fois ta fonction définie, tu peux l’appeler en utilisant son nom suivi de parenthèses. Si ta fonction prend des arguments, tu les passes entre ces parenthèses.\nExemple :\ndef saluer(): print(\u0026#34;Salut, bienvenue dans le monde de Python !\u0026#34;) saluer() # Appel de la fonction 3. Les Paramètres : Passer des Informations à la Fonction # Les fonctions ne sont pas seulement là pour faire un travail tout de suite, elles peuvent aussi accepter des paramètres, ce qui permet de personnaliser leur comportement à chaque appel. Par exemple, tu pourrais passer le nom d\u0026rsquo;une personne à la fonction pour lui dire bonjour de manière plus spécifique.\nExemple avec un paramètre :\ndef saluer(personne): print(f\u0026#34;Salut, {personne} ! Bienvenue dans le monde de Python !\u0026#34;) saluer(\u0026#34;Alice\u0026#34;) # \u0026#34;Salut, Alice ! Bienvenue dans le monde de Python !\u0026#34; saluer(\u0026#34;Bob\u0026#34;) # \u0026#34;Salut, Bob ! Bienvenue dans le monde de Python !\u0026#34; Ici, on passe un argument à la fonction saluer() qui sera utilisé à l’intérieur de la fonction pour personnaliser le message.\n4. Retourner des Valeurs : Plus Que Simplement Afficher # Les fonctions peuvent non seulement faire un travail, mais elles peuvent aussi retourner un résultat. Cela signifie que tu peux récupérer la valeur calculée par la fonction et l\u0026rsquo;utiliser ailleurs dans ton programme. C’est ce qu’on appelle un retour avec le mot-clé return.\nExemple avec un retour :\ndef additionner(a, b): return a + b resultat = additionner(3, 5) print(resultat) # 8 Ici, la fonction additionner() fait le calcul et retourne le résultat, qu’on assigne ensuite à la variable resultat.\n5. Les Arguments Par Défaut : La Flexibilité en Plus # Tu peux donner des valeurs par défaut à tes paramètres, ce qui permet à la fonction de fonctionner même si tu ne passes pas un argument pour un paramètre spécifique. Ces valeurs par défaut sont utilisées uniquement si tu ne fournis pas d\u0026rsquo;argument pour ce paramètre.\nExemple avec argument par défaut :\ndef saluer(personne=\u0026#34;inconnu\u0026#34;): print(f\u0026#34;Salut, {personne} ! Bienvenue dans le monde de Python !\u0026#34;) saluer() # \u0026#34;Salut, inconnu ! Bienvenue dans le monde de Python !\u0026#34; saluer(\u0026#34;Alice\u0026#34;) # \u0026#34;Salut, Alice ! Bienvenue dans le monde de Python !\u0026#34; Ici, si tu ne passes pas de nom, le paramètre personne prend par défaut la valeur \u0026quot;inconnu\u0026quot;.\n6. Arguments Variables : Flexibilité Totale # Tu veux permettre à une fonction de recevoir un nombre variable d’arguments sans savoir exactement combien d’éléments seront passés ? C’est là que les argumentos variables interviennent.\n*args permet de passer un nombre variable d\u0026rsquo;arguments positionnels. **kwargs permet de passer un nombre variable d\u0026rsquo;arguments nommés (clés et valeurs). Exemple avec *args :\ndef additionner(*args): return sum(args) print(additionner(1, 2, 3)) # 6 print(additionner(4, 5)) # 9 Exemple avec **kwargs :\ndef afficher_infos(**kwargs): for cle, valeur in kwargs.items(): print(f\u0026#34;{cle}: {valeur}\u0026#34;) afficher_infos(nom=\u0026#34;Alice\u0026#34;, age=25, profession=\u0026#34;Développeur\u0026#34;) Ici, *args collecte tous les arguments passés à la fonction dans une tuple, tandis que **kwargs récupère les arguments sous forme de dictionnaire avec les noms des paramètres comme clés.\n7. Fonctions Lambda : L\u0026rsquo;Art de la Fonction Anonyme # Les fonctions lambda sont une version rapide et anonyme des fonctions. Elles sont idéales lorsque tu n\u0026rsquo;as besoin de la fonction que pour une tâche temporaire. Par exemple, une fonction lambda peut être utilisée avec des fonctions comme map(), filter(), ou sorted() pour appliquer une logique simple en une seule ligne.\nExemple de fonction lambda :\nadditionner = lambda x, y: x + y print(additionner(3, 5)) # 8 C’est comme une mini-fonction qui peut être utilisée directement sans avoir à la définir de manière formelle.\n8. Fonctions Imbriquées : La Fonction Dans La Fonction # Les fonctions peuvent être imbriquées, c\u0026rsquo;est-à-dire que tu peux définir une fonction à l’intérieur d’une autre fonction. Cela peut être utile pour structurer le code de manière plus claire et éviter les répétitions.\nExemple avec une fonction imbriquée :\ndef operation_complexe(x, y): def addition(a, b): return a + b def multiplication(a, b): return a * b return addition(x, y), multiplication(x, y) resultat_addition, resultat_multiplication = operation_complexe(2, 3) print(resultat_addition) # 5 print(resultat_multiplication) # 6 Ici, addition et multiplication sont définies à l\u0026rsquo;intérieur de operation_complexe(), mais tu peux toujours les appeler à l\u0026rsquo;intérieur de cette fonction.\nConclusion # Les fonctions en Python sont un élément central de la programmation. Elles te permettent de réutiliser ton code, de le structurer de manière logique, et d’ajouter des abstractions pour mieux organiser tes programmes. Que ce soit pour des calculs simples, des manipulations complexes de données ou des opérations temporaires avec des fonctions lambda, tu verras que les fonctions rendent ton travail beaucoup plus propre et modulaire.\nMaintenant, à toi de jouer ! Ajoute des fonctions à ton code et regarde comment elles peuvent te faire gagner du temps et de l\u0026rsquo;efficacité.\n","date":"27 février 2025","externalUrl":null,"permalink":"/fr/courses/python/fonction/","section":"Cours","summary":"","title":"Les fonction en python","type":"courses"},{"content":"","date":"27 février 2025","externalUrl":null,"permalink":"/fr/tags/for/","section":"Tags","summary":"","title":"For","type":"tags"},{"content":"Les Structures de Boucles en Python : Reprends le Contrôle de ton Code\nQuand tu veux que ton programme répète une série d’actions plusieurs fois sans avoir à tout coder à la main, les boucles sont ton meilleur ami. En Python, elles sont simples à comprendre et te permettent de faire des actions répétitives de manière efficace et élégante.\nDans cet article, on va plonger dans les structures de boucles en Python, te montrer les différents types de boucles et comment les utiliser pour rendre ton code plus fluide. Si tu veux comprendre comment exécuter un bloc de code à plusieurs reprises de manière contrôlée, accroche-toi, on part explorer ça ensemble !\n1. La Boucle for : L\u0026rsquo;Art de Parcourir # La boucle for en Python est probablement l\u0026rsquo;une des boucles les plus utilisées. Elle te permet de parcourir des éléments dans un itérable (comme une liste, une chaîne de caractères, ou un objet range). La syntaxe est simple et directe, c’est presque comme si tu déléguais le travail à Python.\nExemple :\nfruits = [\u0026#34;pomme\u0026#34;, \u0026#34;banane\u0026#34;, \u0026#34;cerise\u0026#34;] for fruit in fruits: print(fruit) Sortie :\npomme banane cerise Ici, Python parcourt chaque élément de la liste fruits et exécute le bloc de code à l’intérieur de la boucle pour chaque élément. C’est un moyen super propre d’itérer sur une collection.\nAvec range() # Si tu n’as pas de liste à parcourir, tu peux utiliser range() pour générer une séquence de nombres. Ça peut être utile pour des boucles où tu as besoin de répéter un certain nombre de fois un bloc de code, sans forcément avoir une collection d’éléments à itérer.\nExemple :\nfor i in range(5): # De 0 à 4 print(i) Sortie :\n0 1 2 3 4 Tu peux aussi spécifier un début, une fin, et un pas :\nfor i in range(1, 10, 2): # De 1 à 9, avec un pas de 2 print(i) Sortie :\n1 3 5 7 9 2. La Boucle while : Tant Que… # La boucle while en Python répète un bloc de code tant qu’une condition est vraie. C’est super utile quand tu ne sais pas exactement combien de fois tu dois répéter l’action, mais que tu sais qu’une condition doit rester valide.\nExemple simple :\ncompteur = 0 while compteur \u0026lt; 5: print(compteur) compteur += 1 Sortie :\n0 1 2 3 4 La condition compteur \u0026lt; 5 reste vraie tant que le compteur est inférieur à 5, et à chaque itération, tu augmentes le compteur pour faire en sorte que la boucle s’arrête un jour.\nAttention aux Boucles Infinites !\nSi tu oublies de mettre à jour la condition dans la boucle while, tu risques de créer une boucle infinie qui va bloquer ton programme. C’est pas super fun, croyez-moi.\n3. La Boucle for avec des Conditions : Filtrer au Vol # Il arrive que tu veuilles parcourir une liste, mais n’exécuter une action que sous certaines conditions. Grâce à des conditions à l’intérieur de ta boucle for, tu peux filtrer facilement les éléments qui t’intéressent.\nExemple :\nnombres = [1, 2, 3, 4, 5, 6, 7, 8, 9] for nombre in nombres: if nombre % 2 == 0: # Si le nombre est pair print(nombre) Sortie :\n2 4 6 8 Ici, la boucle passe à chaque élément de la liste, mais n\u0026rsquo;affiche que les nombres pairs.\n4. La Boucle for avec else : Le Bonus Après la Boucle # Ce qui est un peu spécial avec Python, c’est que tu peux ajouter une clause else à une boucle for ou while. Ce else s’exécutera uniquement lorsque la boucle ne sera pas terminée par un break, c’est-à-dire qu’elle s’est exécutée entièrement.\nExemple :\nfor i in range(5): print(i) else: print(\u0026#34;Fin de la boucle\u0026#34;) Sortie :\n0 1 2 3 4 Fin de la boucle Le bloc else ne s\u0026rsquo;exécute que si la boucle a parcouru tous les éléments sans être interrompue par un break. Si tu utilises un break pour sortir prématurément de la boucle, l\u0026rsquo;else sera ignoré.\n5. La déclaration break : L\u0026rsquo;Interruption Contrôlée # La déclaration break permet de sortir immédiatement d’une boucle, qu’elle soit for ou while. C’est utile si tu veux arrêter l’exécution dès qu\u0026rsquo;une certaine condition est remplie.\nExemple :\nfor i in range(10): if i == 5: print(\u0026#34;Condition remplie, arrêt de la boucle.\u0026#34;) break print(i) Sortie :\n0 1 2 3 4 Condition remplie, arrêt de la boucle. Ici, dès que i atteint 5, la boucle s’arrête et le message est affiché. La boucle n’ira pas au-delà.\n6. La déclaration continue : Passer à l’Itération Suivante # Si tu veux sauter une itération spécifique dans une boucle, tu peux utiliser continue. Cela permet de passer directement à l’itération suivante sans exécuter le reste du code pour cette itération.\nExemple :\nfor i in range(5): if i == 2: continue # Sauter l\u0026#39;itération quand i vaut 2 print(i) Sortie :\n0 1 3 4 Dans cet exemple, lorsque i est égal à 2, l\u0026rsquo;itération est ignorée et on passe directement à 3.\n7. Les Boucles Imbriquées : Pour les Cas Complexes # Il est tout à fait possible de mettre une boucle à l’intérieur d’une autre, ce qu’on appelle une boucle imbriquée. C’est utile, par exemple, quand tu travailles avec des listes de listes (ou des matrices).\nExemple :\nfor i in range(3): for j in range(2): print(f\u0026#34;i={i}, j={j}\u0026#34;) Sortie :\ni=0, j=0 i=0, j=1 i=1, j=0 i=1, j=1 i=2, j=0 i=2, j=1 Conclusion # Les boucles en Python sont essentielles pour automatiser les répétitions de code. Que tu utilises for pour parcourir des collections ou while pour répéter une tâche tant qu’une condition est vraie, tu as toutes les armes pour gérer des actions répétitives avec élégance. Et avec des outils comme break, continue et else, tu as un contrôle total sur le flux d’exécution.\nMaintenant, à toi de jouer : dans ton prochain projet, essaie de tirer parti des boucles pour rendre ton code plus lisible et puissant. Les boucles sont un élément clé du \u0026ldquo;répétable\u0026rdquo; dans la programmation, et maîtriser leur utilisation peut vraiment booster ton efficacité.\n","date":"27 février 2025","externalUrl":null,"permalink":"/fr/courses/python/boucles/","section":"Cours","summary":"","title":"Les boucles en Python","type":"courses"},{"content":"","date":"27 février 2025","externalUrl":null,"permalink":"/fr/tags/while/","section":"Tags","summary":"","title":"While","type":"tags"},{"content":"","date":"27 février 2025","externalUrl":null,"permalink":"/fr/tags/conditions/","section":"Tags","summary":"","title":"Conditions","type":"tags"},{"content":"","date":"27 février 2025","externalUrl":null,"permalink":"/fr/tags/elif/","section":"Tags","summary":"","title":"Elif","type":"tags"},{"content":"","date":"27 février 2025","externalUrl":null,"permalink":"/fr/tags/else/","section":"Tags","summary":"","title":"Else","type":"tags"},{"content":"","date":"27 février 2025","externalUrl":null,"permalink":"/fr/tags/if/","section":"Tags","summary":"","title":"If","type":"tags"},{"content":"Si la programmation était une histoire, les structures conditionnelles seraient les moments où l\u0026rsquo;intrigue prend un tournant. Tu sais, ces points où ton programme doit choisir quel chemin emprunter. Les structures conditionnelles te permettent de dire à ton code : \u0026ldquo;Si cette condition est vraie, fais ça, sinon fais autre chose.\u0026rdquo; C’est un peu comme dans la vraie vie, où tu choisis une action en fonction de ce qui se passe autour de toi.\nEn Python, ces structures sont simples mais puissantes. Elles vont t\u0026rsquo;aider à écrire des programmes réactifs, capables de prendre des décisions intelligentes en fonction de données ou d\u0026rsquo;entrées utilisateur. Alors, on va plonger dans le système décisionnel de Python et t’apprendre à l\u0026rsquo;utiliser pour que ton code devienne encore plus dynamique.\n1. La Structure de Base : if # La structure if est la base des décisions en Python. Elle permet de vérifier une condition et d\u0026rsquo;exécuter un bloc de code si cette condition est vraie. C’est comme dire \u0026ldquo;si cette condition se vérifie, alors fais ceci.\u0026rdquo;\nExemple :\nage = 18 if age \u0026gt;= 18: print(\u0026#34;Tu es majeur.\u0026#34;) Ici, si la condition age \u0026gt;= 18 est vraie, le programme affiche \u0026ldquo;Tu es majeur.\u0026rdquo; Sinon, il ne fait rien.\n2. Le else : Quand Ça Ne Passe Pas, Fais Ça # Le else est ce qui se passe quand la condition if n\u0026rsquo;est pas vraie. C’est une alternative qui permet de dire : \u0026ldquo;Si la première condition n\u0026rsquo;est pas remplie, fais ça à la place.\u0026rdquo;\nExemple :\nage = 16 if age \u0026gt;= 18: print(\u0026#34;Tu es majeur.\u0026#34;) else: print(\u0026#34;Tu es mineur.\u0026#34;) Si age est inférieur à 18, le programme affiche \u0026ldquo;Tu es mineur.\u0026rdquo; Sinon, il afficherait \u0026ldquo;Tu es majeur.\u0026rdquo;\n3. Le elif : Quand Tu As Plusieurs Choix # Tu veux tester plusieurs conditions ? C’est là que le elif (qui signifie \u0026ldquo;else if\u0026rdquo;) entre en jeu. Il permet d\u0026rsquo;ajouter des conditions supplémentaires si la première condition n\u0026rsquo;est pas remplie.\nExemple :\nage = 20 if age \u0026lt; 18: print(\u0026#34;Tu es mineur.\u0026#34;) elif age \u0026gt;= 18 and age \u0026lt; 21: print(\u0026#34;Tu es majeur, mais pas encore assez vieux pour boire de l\u0026#39;alcool.\u0026#34;) else: print(\u0026#34;Tu es majeur et tu peux boire de l\u0026#39;alcool.\u0026#34;) Ici, si l’âge est entre 18 et 20 ans, le programme affiche un message spécifique pour cette tranche d’âge. Sinon, il affiche un autre message pour les plus de 21 ans.\n4. Les Conditions Complexes : Combiner les Tests # Tu peux combiner plusieurs conditions pour créer des tests plus complexes en utilisant and et or. Ça te permet de prendre des décisions sur des critères multiples.\nand : La condition sera vraie seulement si toutes les conditions sont vraies. or : La condition sera vraie si au moins une des conditions est vraie. Exemple avec and :\nage = 25 a_licence = True if age \u0026gt;= 18 and a_licence: print(\u0026#34;Tu peux conduire.\u0026#34;) else: print(\u0026#34;Tu ne peux pas conduire.\u0026#34;) Ici, l’utilisateur doit avoir 18 ans ou plus et une licence pour pouvoir conduire.\nExemple avec or :\na_licence = False est_parent = True if a_licence or est_parent: print(\u0026#34;Tu peux emprunter la voiture.\u0026#34;) else: print(\u0026#34;Tu ne peux pas emprunter la voiture.\u0026#34;) Dans ce cas, la condition est vraie si l\u0026rsquo;utilisateur a une licence ou est parent.\n5. Les Comparateurs : Pour Rendre Tes Tests Plus Précis # Les conditions sont souvent basées sur des comparaisons. Python te permet d\u0026rsquo;utiliser une gamme de comparateurs pour affiner tes décisions.\nLes comparateurs de base sont :\n== : égal à != : différent de \u0026gt; : plus grand que \u0026lt; : plus petit que \u0026gt;= : plus grand ou égal à \u0026lt;= : plus petit ou égal à Exemple :\ntemperature = 30 if temperature \u0026gt; 25: print(\u0026#34;Il fait chaud.\u0026#34;) elif temperature \u0026lt; 15: print(\u0026#34;Il fait froid.\u0026#34;) else: print(\u0026#34;Il fait doux.\u0026#34;) Ici, la température est comparée à plusieurs valeurs pour déterminer la phrase à afficher.\n6. Les Conditions Imbriquées : Les Décisions à Plusieurs Niveaux # Les conditions peuvent être imbriquées les unes dans les autres. Cela permet de créer des décisions en plusieurs étapes, où une condition dépend d\u0026rsquo;une autre.\nExemple :\nage = 20 a_licence = True if age \u0026gt;= 18: if a_licence: print(\u0026#34;Tu peux conduire.\u0026#34;) else: print(\u0026#34;Tu es majeur, mais tu n\u0026#39;as pas de licence.\u0026#34;) else: print(\u0026#34;Tu es mineur.\u0026#34;) Ici, il y a deux niveaux de décision : d\u0026rsquo;abord, on vérifie si l\u0026rsquo;utilisateur est majeur, puis on vérifie s\u0026rsquo;il a une licence.\n7. Les Expressions Conditionnelles (Ternaires) : La Décision en Une Ligne # Si tu veux faire une décision rapide sans écrire des blocs complets de if/else, tu peux utiliser l\u0026rsquo;expression conditionnelle. C’est un moyen plus concis d’écrire des conditions simples.\nExemple :\nage = 19 status = \u0026#34;majeur\u0026#34; if age \u0026gt;= 18 else \u0026#34;mineur\u0026#34; print(status) Ici, la variable status reçoit \u0026ldquo;majeur\u0026rdquo; si la condition est vraie, sinon \u0026ldquo;mineur\u0026rdquo;.\nConclusion # Les structures conditionnelles en Python sont cruciales pour écrire des programmes interactifs et réactifs. Que ce soit pour choisir entre plusieurs options, combiner des tests complexes ou prendre des décisions imbriquées, elles te permettent de rendre ton code intelligent et dynamique.\nLa prochaine fois que tu écris un programme, n\u0026rsquo;oublie pas de bien structurer tes décisions pour rendre ton code clair et fluide. Alors, prêt à prendre des décisions comme un pro ?\n","date":"27 février 2025","externalUrl":null,"permalink":"/fr/courses/python/conditions/","section":"Cours","summary":"","title":"Les structures conditionnelles avec Python","type":"courses"},{"content":"","date":"27 février 2025","externalUrl":null,"permalink":"/fr/tags/dictionnaires/","section":"Tags","summary":"","title":"Dictionnaires","type":"tags"},{"content":"Tu veux stocker des données sous forme de paires clé-valeur, comme une sorte de carnet où chaque information est associée à un identifiant unique ? Les dictionnaires en Python sont faits pour toi. Imagine un annuaire téléphonique où chaque nom est lié à un numéro, ou une base de données où chaque identifiant est lié à des informations spécifiques. C’est exactement ce que fait un dictionnaire, mais en bien plus flexible et puissant.\nDans cet article, on va plonger dans le monde des dictionnaires en Python, un des types de données les plus importants et les plus utilisés. Ils te permettent de gérer tes informations de manière organisée, tout en ayant des accès ultra-rapides aux éléments. C’est la clé de la simplicité et de l’efficacité dans ton code. Prêt à t\u0026rsquo;immerger dans l\u0026rsquo;univers des dictionnaires ?\n1. Créer un Dictionnaire : La Carte des Clés # Les dictionnaires en Python se construisent facilement en utilisant des paires clé-valeur. Chaque clé doit être unique et immuable (comme des chaînes de caractères, des nombres, des tuples), tandis que les valeurs peuvent être de n’importe quel type. La syntaxe est simple : des accolades {} avec les paires clé-valeur séparées par des virgules.\nExemple de dictionnaire simple :\ncontacts = { \u0026#34;Alice\u0026#34;: \u0026#34;123-456-789\u0026#34;, \u0026#34;Bob\u0026#34;: \u0026#34;987-654-321\u0026#34;, \u0026#34;Charlie\u0026#34;: \u0026#34;555-555-555\u0026#34; } Dans cet exemple, les clés sont les noms des contacts, et les valeurs sont leurs numéros de téléphone. Chaque entrée est une association clé-valeur.\n2. Accéder aux Éléments : Trouver la Bonne Clé # Pour accéder à une valeur dans un dictionnaire, il suffit d’utiliser la clé correspondante entre crochets []. Pas de souci, c\u0026rsquo;est ultra-simple.\nExemple :\ncontacts = { \u0026#34;Alice\u0026#34;: \u0026#34;123-456-789\u0026#34;, \u0026#34;Bob\u0026#34;: \u0026#34;987-654-321\u0026#34;, \u0026#34;Charlie\u0026#34;: \u0026#34;555-555-555\u0026#34; } print(contacts[\u0026#34;Alice\u0026#34;]) # \u0026#34;123-456-789\u0026#34; print(contacts[\u0026#34;Bob\u0026#34;]) # \u0026#34;987-654-321\u0026#34; Si la clé n\u0026rsquo;existe pas, tu obtiens une erreur, mais tu peux éviter ça en utilisant la méthode .get(). Elle permet de spécifier une valeur par défaut si la clé n\u0026rsquo;est pas trouvée.\nExemple avec .get() :\n# Si la clé \u0026#34;Dave\u0026#34; n\u0026#39;existe pas, renvoie \u0026#34;Inconnu\u0026#34; print(contacts.get(\u0026#34;Dave\u0026#34;, \u0026#34;Inconnu\u0026#34;)) # \u0026#34;Inconnu\u0026#34; 3. Ajouter et Modifier des Éléments : Touche Personnelle # Les dictionnaires sont mutables, donc tu peux facilement ajouter ou modifier des paires clé-valeur après avoir créé le dictionnaire. Il te suffit d’assigner une nouvelle valeur à une clé existante ou d’ajouter une nouvelle paire.\nExemple :\n# Ajouter un nouveau contact contacts[\u0026#34;David\u0026#34;] = \u0026#34;444-444-444\u0026#34; print(contacts) # {\u0026#34;Alice\u0026#34;: \u0026#34;123-456-789\u0026#34;, \u0026#34;Bob\u0026#34;: \u0026#34;987-654-321\u0026#34;, \u0026#34;Charlie\u0026#34;: \u0026#34;555-555-555\u0026#34;, \u0026#34;David\u0026#34;: \u0026#34;444-444-444\u0026#34;} # Modifier un contact existant contacts[\u0026#34;Alice\u0026#34;] = \u0026#34;111-111-111\u0026#34; print(contacts) # {\u0026#34;Alice\u0026#34;: \u0026#34;111-111-111\u0026#34;, \u0026#34;Bob\u0026#34;: \u0026#34;987-654-321\u0026#34;, \u0026#34;Charlie\u0026#34;: \u0026#34;555-555-555\u0026#34;, \u0026#34;David\u0026#34;: \u0026#34;444-444-444\u0026#34;} 4. Supprimer des Éléments : Quand T’as Plus Besoin # Il existe plusieurs façons de supprimer des éléments d’un dictionnaire. Tu peux utiliser :\ndel : Pour supprimer une clé et sa valeur. .pop() : Pour retirer un élément et récupérer sa valeur. .popitem() : Pour supprimer et récupérer un couple clé-valeur au hasard. .clear() : Pour vider complètement le dictionnaire. Exemples :\n# Supprimer un élément par clé del contacts[\u0026#34;Charlie\u0026#34;] print(contacts) # {\u0026#34;Alice\u0026#34;: \u0026#34;111-111-111\u0026#34;, \u0026#34;Bob\u0026#34;: \u0026#34;987-654-321\u0026#34;, \u0026#34;David\u0026#34;: \u0026#34;444-444-444\u0026#34;} # Utiliser .pop() pour récupérer la valeur en même temps numero_bob = contacts.pop(\u0026#34;Bob\u0026#34;) print(numero_bob) # \u0026#34;987-654-321\u0026#34; print(contacts) # {\u0026#34;Alice\u0026#34;: \u0026#34;111-111-111\u0026#34;, \u0026#34;David\u0026#34;: \u0026#34;444-444-444\u0026#34;} # Vider le dictionnaire contacts.clear() print(contacts) # {} 5. Méthodes de Dictionnaire : Le Toolbox # Python te propose toute une panoplie de méthodes pour travailler avec les dictionnaires. Voici quelques-unes des plus utiles :\n.keys() : Retourne un objet vue contenant toutes les clés du dictionnaire. .values() : Retourne un objet vue contenant toutes les valeurs du dictionnaire. .items() : Retourne un objet vue contenant toutes les paires clé-valeur sous forme de tuples. .update() : Met à jour le dictionnaire avec les éléments d\u0026rsquo;un autre dictionnaire ou d\u0026rsquo;un ensemble de paires clé-valeur. Exemples :\ncontacts = { \u0026#34;Alice\u0026#34;: \u0026#34;123-456-789\u0026#34;, \u0026#34;Bob\u0026#34;: \u0026#34;987-654-321\u0026#34; } # Afficher toutes les clés print(contacts.keys()) # dict_keys([\u0026#39;Alice\u0026#39;, \u0026#39;Bob\u0026#39;]) # Afficher toutes les valeurs print(contacts.values()) # dict_values([\u0026#39;123-456-789\u0026#39;, \u0026#39;987-654-321\u0026#39;]) # Afficher toutes les paires clé-valeur print(contacts.items()) # dict_items([(\u0026#39;Alice\u0026#39;, \u0026#39;123-456-789\u0026#39;), (\u0026#39;Bob\u0026#39;, \u0026#39;987-654-321\u0026#39;)]) # Mettre à jour le dictionnaire avec un autre dictionnaire contacts.update({\u0026#34;Charlie\u0026#34;: \u0026#34;555-555-555\u0026#34;}) print(contacts) # {\u0026#34;Alice\u0026#34;: \u0026#34;123-456-789\u0026#34;, \u0026#34;Bob\u0026#34;: \u0026#34;987-654-321\u0026#34;, \u0026#34;Charlie\u0026#34;: \u0026#34;555-555-555\u0026#34;} 6. Dictionnaires Imbriqués : Organiser à Fond # Tu peux avoir des dictionnaires à l’intérieur d’autres dictionnaires, créant des structures de données hiérarchiques. Cela peut être pratique pour organiser des données complexes, comme des informations sur des utilisateurs, des produits, ou même des configurations systèmes.\nExemple de dictionnaire imbriqué :\nutilisateurs = { \u0026#34;alice\u0026#34;: { \u0026#34;nom\u0026#34;: \u0026#34;Alice\u0026#34;, \u0026#34;email\u0026#34;: \u0026#34;alice@exemple.com\u0026#34;, \u0026#34;age\u0026#34;: 25 }, \u0026#34;bob\u0026#34;: { \u0026#34;nom\u0026#34;: \u0026#34;Bob\u0026#34;, \u0026#34;email\u0026#34;: \u0026#34;bob@exemple.com\u0026#34;, \u0026#34;age\u0026#34;: 30 } } print(utilisateurs[\u0026#34;alice\u0026#34;][\u0026#34;email\u0026#34;]) # \u0026#34;alice@exemple.com\u0026#34; Les dictionnaires imbriqués offrent une flexibilité maximale pour structurer les données de manière efficace.\n7. Compréhension de Dictionnaire : Pour les Génies # Tout comme les listes, les dictionnaires peuvent aussi être créés avec une compréhension de dictionnaire, ce qui te permet de créer des dictionnaires en une seule ligne tout en filtrant ou en transformant les éléments.\nExemple :\n# Créer un dictionnaire avec des carrés de nombres carrés = {x: x**2 for x in range(5)} print(carrés) # {0: 0, 1: 1, 2: 4, 3: 9, 4: 16} # Filtrer les éléments avec une condition pairs = {x: x**2 for x in range(5) if x % 2 == 0} print(pairs) # {0: 0, 2: 4, 4: 16} Conclusion # Les dictionnaires sont des outils puissants et flexibles qui te permettent de manipuler des données sous forme de paires clé-valeur. Leur organisation claire et leurs méthodes variées te permettront de gérer de manière optimale tout type d’information. Que ce soit pour stocker des configurations, gérer des utilisateurs, ou tout simplement organiser tes données, les dictionnaires sont incontournables.\nSi tu maîtrises bien les dictionnaires, tu pourras structurer tes données de façon logique, facile à manipuler et toujours avec une performance optimale. À toi de jouer maintenant, avec tes clés et tes valeurs, pour rendre ton code encore plus clean et puissant !\n","date":"27 février 2025","externalUrl":null,"permalink":"/fr/courses/python/dictionnaires/","section":"Cours","summary":"","title":"Les dictionnaires en Python","type":"courses"},{"content":"Tu cherches à stocker des éléments sans te prendre la tête avec des doublons ? Les sets en Python sont là pour ça. Ces collections sont super utiles lorsque tu veux garantir que chaque élément dans ta collection soit unique. En plus, ils offrent une vitesse de recherche et de suppression ultra rapide. Bref, si tu veux de la simplicité et de l\u0026rsquo;efficacité, les sets devraient rapidement devenir tes alliés dans ton code Python.\nDans cet article, on va explorer ensemble ce qu’est un set, comment le manipuler, et pourquoi tu devrais les intégrer à ton arsenal. Pas besoin de se casser la tête, c’est simple, puissant et rapide.\n1. Créer un Set : Un Panier Sans Doublons # Un set est une collection d’éléments qui ne peut pas contenir de doublons. Ça signifie qu’aucun élément ne peut apparaître plus d’une fois. Pour créer un set en Python, rien de plus simple. Tu utilises des accolades {}.\nExemple de set :\nfruits = {\u0026#34;pomme\u0026#34;, \u0026#34;banane\u0026#34;, \u0026#34;cerise\u0026#34;} print(fruits) # {\u0026#34;pomme\u0026#34;, \u0026#34;banane\u0026#34;, \u0026#34;cerise\u0026#34;} Tu peux aussi créer un set vide avec set() :\nset_vide = set() print(set_vide) # set() 2. Les Set et les Doublons : Adieu les Dupes # L’un des principaux avantages des sets est qu’ils éliminent automatiquement les doublons. Si tu essaies d’ajouter un élément déjà présent, Python s\u0026rsquo;en fiche et le set ne change pas.\nExemple :\nfruits = {\u0026#34;pomme\u0026#34;, \u0026#34;banane\u0026#34;, \u0026#34;cerise\u0026#34;, \u0026#34;pomme\u0026#34;} print(fruits) # {\u0026#34;pomme\u0026#34;, \u0026#34;banane\u0026#34;, \u0026#34;cerise\u0026#34;} (pas de doublon) Cela te permet d’être certain qu’un élément n’apparaît qu’une seule fois dans ton set, sans avoir à faire de vérifications manuelles.\n3. Accéder aux Éléments : Pas d\u0026rsquo;Index, Mais Toujours Accessible # Contrairement aux listes et aux tuples, les sets ne sont pas indexés, ce qui veut dire que tu ne peux pas accéder directement à un élément via son indice. Si tu veux obtenir un élément spécifique, tu devras le chercher directement ou utiliser des boucles.\nExemple avec une boucle :\nfruits = {\u0026#34;pomme\u0026#34;, \u0026#34;banane\u0026#34;, \u0026#34;cerise\u0026#34;} for fruit in fruits: print(fruit) Si tu veux tester si un élément existe dans le set, tu peux utiliser l\u0026rsquo;opérateur in :\nprint(\u0026#34;pomme\u0026#34; in fruits) # True print(\u0026#34;orange\u0026#34; in fruits) # False 4. Ajouter et Supprimer des Éléments : Manipuler Facilement # Ajouter un élément à un set se fait avec .add(), et supprimer un élément se fait avec .remove() ou .discard().\n.add(x) : Ajoute l’élément x au set. .remove(x) : Supprime l’élément x, mais lèvera une erreur si x n’est pas dans le set. .discard(x) : Supprime l’élément x mais ne lèvera pas d’erreur si x n’est pas dans le set. Exemple :\nfruits = {\u0026#34;pomme\u0026#34;, \u0026#34;banane\u0026#34;, \u0026#34;cerise\u0026#34;} # Ajouter un élément fruits.add(\u0026#34;orange\u0026#34;) print(fruits) # {\u0026#34;pomme\u0026#34;, \u0026#34;banane\u0026#34;, \u0026#34;cerise\u0026#34;, \u0026#34;orange\u0026#34;} # Supprimer un élément fruits.remove(\u0026#34;banane\u0026#34;) print(fruits) # {\u0026#34;pomme\u0026#34;, \u0026#34;cerise\u0026#34;, \u0026#34;orange\u0026#34;} # Discard ne lève pas d\u0026#39;erreur si l\u0026#39;élément n\u0026#39;est pas présent fruits.discard(\u0026#34;kiwi\u0026#34;) # Pas d\u0026#39;erreur même si \u0026#34;kiwi\u0026#34; n\u0026#39;est pas dans le set Si tu veux vider complètement un set, tu peux utiliser .clear() :\nfruits.clear() print(fruits) # set() 5. Opérations sur les Sets : L\u0026rsquo;Art des Combinaisons # Les sets en Python supportent plusieurs opérations intéressantes qui te permettent de les combiner, les filtrer ou même faire des calculs mathématiques. Voici quelques opérations utiles :\nUnion (|) # L’union permet de combiner deux sets sans doublons.\nfruits = {\u0026#34;pomme\u0026#34;, \u0026#34;banane\u0026#34;, \u0026#34;cerise\u0026#34;} legumes = {\u0026#34;carotte\u0026#34;, \u0026#34;brocoli\u0026#34;, \u0026#34;pomme\u0026#34;} union = fruits | legumes print(union) # {\u0026#34;pomme\u0026#34;, \u0026#34;banane\u0026#34;, \u0026#34;cerise\u0026#34;, \u0026#34;carotte\u0026#34;, \u0026#34;brocoli\u0026#34;} Intersection (\u0026amp;) # L’intersection te permet de garder uniquement les éléments présents dans les deux sets.\nfruits = {\u0026#34;pomme\u0026#34;, \u0026#34;banane\u0026#34;, \u0026#34;cerise\u0026#34;} legumes = {\u0026#34;carotte\u0026#34;, \u0026#34;brocoli\u0026#34;, \u0026#34;pomme\u0026#34;} intersection = fruits \u0026amp; legumes print(intersection) # {\u0026#34;pomme\u0026#34;} Différence (-) # La différence permet de récupérer les éléments du premier set qui ne sont pas dans le second.\nfruits = {\u0026#34;pomme\u0026#34;, \u0026#34;banane\u0026#34;, \u0026#34;cerise\u0026#34;} legumes = {\u0026#34;carotte\u0026#34;, \u0026#34;brocoli\u0026#34;, \u0026#34;pomme\u0026#34;} difference = fruits - legumes print(difference) # {\u0026#34;banane\u0026#34;, \u0026#34;cerise\u0026#34;} Différence Symétrique (^) # La différence symétrique te donne les éléments qui sont dans l’un ou l’autre, mais pas dans les deux.\nfruits = {\u0026#34;pomme\u0026#34;, \u0026#34;banane\u0026#34;, \u0026#34;cerise\u0026#34;} legumes = {\u0026#34;carotte\u0026#34;, \u0026#34;brocoli\u0026#34;, \u0026#34;pomme\u0026#34;} diff_sym = fruits ^ legumes print(diff_sym) # {\u0026#34;banane\u0026#34;, \u0026#34;cerise\u0026#34;, \u0026#34;carotte\u0026#34;, \u0026#34;brocoli\u0026#34;} 6. Les Sets et l’Efficacité # Les sets sont non seulement super pratiques, mais aussi très performants. Les recherches, ajouts et suppressions sont en moyenne O(1), ce qui signifie que peu importe la taille de ton set, ces opérations se font quasiment instantanément. Ça, c’est un vrai gain en termes de performance, surtout quand tu manipules de grandes quantités de données.\n7. Set Imbriqué : Attention à la Composition # Un set ne peut pas contenir de set imbriqué, car les sets sont des types non-hashables. Mais tu peux y placer des tuples, car les tuples sont immuables et donc hashables.\nExemple :\nset_imbrique = {(\u0026#34;a\u0026#34;, 1), (\u0026#34;b\u0026#34;, 2)} print(set_imbrique) # {(\u0026#34;a\u0026#34;, 1), (\u0026#34;b\u0026#34;, 2)} Conclusion # Les sets en Python sont des collections puissantes et efficaces qui permettent de stocker des éléments sans doublons et de réaliser des opérations mathématiques rapidement. Si tu cherches à simplifier ton code et à manipuler des collections de manière élégante, les sets sont un choix incontournable. À la fois rapides, simples et flexibles, ils devraient devenir un de tes outils favoris.\nAlors, la prochaine fois que tu te retrouves face à des données uniques à gérer, n’oublie pas les sets. C’est une solution optimale pour garder ton code à la fois clair et performant.\n","date":"27 février 2025","externalUrl":null,"permalink":"/fr/courses/python/sets/","section":"Cours","summary":"","title":"Les sets en Python","type":"courses"},{"content":"","date":"27 février 2025","externalUrl":null,"permalink":"/fr/tags/sets/","section":"Tags","summary":"","title":"Sets","type":"tags"},{"content":"Les Tuples en Python : Les Collections Inaltérables\nTu cherches une structure de données rapide, simple et inaltérable pour stocker des informations ? Le tuple en Python est ce qu\u0026rsquo;il te faut ! Un peu comme une liste, mais en version solide. Une fois créé, tu ne peux pas le modifier — ce qui le rend encore plus fiable quand tu as besoin d\u0026rsquo;une collection dont tu es sûr qu\u0026rsquo;elle ne changera jamais.\nDans cet article, on plonge dans le monde des tuples, une alternative aux listes quand tu as besoin de quelque chose de plus rigide et rapide. Prêt à découvrir pourquoi ces petites structures sont si puissantes ? Let\u0026rsquo;s go !\n1. Créer un Tuple : Le Code Simplifié # Un tuple se crée en mettant des éléments entre parenthèses (). C\u0026rsquo;est aussi simple que ça. Si tu veux créer un tuple avec un seul élément, il faut ajouter une virgule pour que Python le reconnaisse comme un tuple.\nExemples :\n# Tuple classique avec plusieurs éléments coordonnees = (10, 20, 30) # Tuple avec un seul élément un_element = (5,) Si tu ne mets pas la virgule, Python le prendra pour une simple parenthèse, pas un tuple. Le truc à retenir : une virgule à la fin, et bam, c\u0026rsquo;est un tuple.\n2. Accéder aux Éléments : Rapide et Direct # Les tuples sont aussi indexés comme les listes. Donc, tu peux y accéder en utilisant des indices. Mais comme ils sont immuables, une fois créés, tu ne peux pas modifier directement leurs éléments. On parle de lecture seule.\nExemple :\ncoordonnees = (10, 20, 30) # Accéder aux éléments via l\u0026#39;index print(coordonnees[0]) # 10 print(coordonnees[1]) # 20 # Utiliser un indice négatif pour compter à partir de la fin print(coordonnees[-1]) # 30 3. Tuples Immutables : Quand Le Code Ne Change Pas # Ce qui différencie vraiment un tuple d\u0026rsquo;une liste, c\u0026rsquo;est qu\u0026rsquo;il ne peut pas être modifié une fois créé. Pas de append(), pas de remove(), pas de modification directe des éléments. Si tu veux changer un tuple, tu devras en créer un nouveau.\nExemple de ce que tu ne peux pas faire :\ncoordonnees = (10, 20, 30) # Ça va lever une erreur, car les tuples sont immuables coordonnees[1] = 25 # TypeError: \u0026#39;tuple\u0026#39; object does not support item assignment 4. Utilisation des Tuples comme Clé de Dictionnaire # Vu que les tuples sont immuables, ils peuvent être utilisés comme clé de dictionnaire. Cela n\u0026rsquo;est pas possible avec des listes, car elles sont mutables. Si tu as besoin de clés qui restent constantes, les tuples sont une excellente solution.\nExemple :\n# Créer un dictionnaire avec un tuple comme clé dictionnaire = {(\u0026#34;x\u0026#34;, \u0026#34;y\u0026#34;): \u0026#34;point\u0026#34;, (\u0026#34;a\u0026#34;, \u0026#34;b\u0026#34;): \u0026#34;lettres\u0026#34;} print(dictionnaire[(\u0026#34;x\u0026#34;, \u0026#34;y\u0026#34;)]) # \u0026#34;point\u0026#34; 5. Tuples avec Plus d\u0026rsquo;Un Élément : La Déconstruction # Un autre point intéressant des tuples est leur capacité à être facilement décomposés dans plusieurs variables. Cette technique, appelée unpacking, te permet de travailler de manière plus élégante et concise.\nExemple :\ncoordonnees = (10, 20) # Décomposer un tuple x, y = coordonnees print(x) # 10 print(y) # 20 Tu peux même ignorer certains éléments lors de la déconstruction si tu n\u0026rsquo;en as pas besoin. Par exemple :\ncoordonnees = (10, 20, 30) # Ignorer l\u0026#39;élément 30 x, y, _ = coordonnees print(x) # 10 print(y) # 20 6. Tuples Imbriqués : La Superposition d\u0026rsquo;Informations # Les tuples peuvent également être imbriqués. Autrement dit, tu peux mettre un tuple à l\u0026rsquo;intérieur d\u0026rsquo;un autre tuple. Cela permet de créer des structures de données plus complexes de manière simple et efficace.\nExemple :\ncoordonnees = (10, (20, 30), 40) # Accéder aux éléments imbriqués print(coordonnees[1]) # (20, 30) print(coordonnees[1][0]) # 20 7. Utilisation des Tuples : Performance et Légèreté # Les tuples, étant inaltérables, sont généralement plus rapides que les listes. Si tu as besoin de stocker une petite collection de données qui ne changera jamais, les tuples sont non seulement plus sûrs, mais aussi plus performants. Leur taille en mémoire est plus réduite, ce qui les rend efficaces quand tu travailles avec de grandes quantités de données ou dans des environnements où la performance est cruciale.\n8. Les Méthodes des Tuples : Simples et Pratiques # Les tuples ont quelques méthodes intégrées, mais elles sont beaucoup plus limitées que celles des listes. Les deux principales méthodes que tu peux utiliser sont :\n.count(x) : Compte le nombre d\u0026rsquo;occurrences de x dans le tuple. .index(x) : Renvoie l\u0026rsquo;index de la première occurrence de x. Exemple :\n# Créer un tuple avec des éléments répétitifs mon_tuple = (1, 2, 3, 1, 1) # Compter les occurrences de 1 print(mon_tuple.count(1)) # 3 # Trouver l\u0026#39;index de la première occurrence de 1 print(mon_tuple.index(1)) # 0 9. Pourquoi Choisir un Tuple plutôt qu\u0026rsquo;une Liste ? # Alors, quand utiliser un tuple plutôt qu’une liste ? Voici quelques points pour t\u0026rsquo;aider à choisir :\nImmutabilité : Si tu veux t\u0026rsquo;assurer que tes données ne changeront pas, choisis un tuple. Performance : Les tuples sont plus légers en mémoire et plus rapides que les listes. Utilisation comme clé de dictionnaire : Les tuples peuvent être utilisés comme clés dans un dictionnaire, contrairement aux listes. Conclusion # Les tuples en Python sont des structures simples mais puissantes qui te permettent de stocker et manipuler des données de manière efficace et sûre. Leur immutabilité, leur capacité à être utilisés comme clés de dictionnaire, et leur performance en font des outils incontournables lorsque tu travailles avec des données fixes.\nAlors, prêt à intégrer les tuples dans ton code et à profiter de leur efficacité ? C\u0026rsquo;est une petite touche de solidité qui peut faire toute la différence !\n","date":"27 février 2025","externalUrl":null,"permalink":"/fr/courses/python/tuples/","section":"Cours","summary":"","title":"Les tuples en Python","type":"courses"},{"content":"","date":"27 février 2025","externalUrl":null,"permalink":"/fr/tags/tuples/","section":"Tags","summary":"","title":"Tuples","type":"tags"},{"content":"Tu veux stocker plusieurs valeurs dans une seule variable sans te prendre la tête avec des déclarations interminables ? Les listes en Python sont la solution idéale. C\u0026rsquo;est un peu comme un panier où tu peux jeter tous tes éléments — des nombres, des chaînes de caractères, ou même d\u0026rsquo;autres listes — et les récupérer à tout moment pour les manipuler.\nDans cet article, on va plonger dans le monde des listes, un des types de données les plus flexibles et puissants en Python. On va voir comment les utiliser pour manipuler tes données efficacement et donner de la structure à ton code. Alors, laisse-toi embarquer dans cet univers de collections !\n1. Créer une Liste : Le Panier Magique # Les listes en Python sont faciles à créer et peuvent contenir plusieurs éléments de types différents. Pour créer une liste, il suffit de placer les éléments entre crochets [], séparés par des virgules.\nExemple de liste simple :\nfruits = [\u0026#34;pomme\u0026#34;, \u0026#34;banane\u0026#34;, \u0026#34;cerise\u0026#34;] Tu peux aussi créer des listes vides :\nliste_vide = [] 2. Accéder aux Éléments : La Clé du Panier # L\u0026rsquo;un des avantages majeurs des listes, c\u0026rsquo;est qu\u0026rsquo;elles sont indexées, ce qui signifie que tu peux accéder à chaque élément en utilisant un index. Et pas de panique, Python utilise des indices commençant à zéro.\nExemple :\nfruits = [\u0026#34;pomme\u0026#34;, \u0026#34;banane\u0026#34;, \u0026#34;cerise\u0026#34;] print(fruits[0]) # \u0026#34;pomme\u0026#34; print(fruits[1]) # \u0026#34;banane\u0026#34; print(fruits[-1]) # \u0026#34;cerise\u0026#34; (indices négatifs pour compter à partir de la fin) Tu peux également accéder à un sous-ensemble de la liste avec les tranches (slicing), en utilisant : pour spécifier l\u0026rsquo;intervalle.\nExemple :\nfruits = [\u0026#34;pomme\u0026#34;, \u0026#34;banane\u0026#34;, \u0026#34;cerise\u0026#34;, \u0026#34;orange\u0026#34;, \u0026#34;kiwi\u0026#34;] print(fruits[1:4]) # [\u0026#39;banane\u0026#39;, \u0026#39;cerise\u0026#39;, \u0026#39;orange\u0026#39;] print(fruits[:3]) # [\u0026#39;pomme\u0026#39;, \u0026#39;banane\u0026#39;, \u0026#39;cerise\u0026#39;] print(fruits[2:]) # [\u0026#39;cerise\u0026#39;, \u0026#39;orange\u0026#39;, \u0026#39;kiwi\u0026#39;] 3. Modifier les Éléments : Un Coup de Magie # Les listes sont mutables, ce qui veut dire que tu peux changer leurs éléments après les avoir créées. Si tu veux changer un élément, il te suffit d\u0026rsquo;indexer la liste et de lui assigner une nouvelle valeur.\nExemple :\nfruits = [\u0026#34;pomme\u0026#34;, \u0026#34;banane\u0026#34;, \u0026#34;cerise\u0026#34;] # Modifier un élément fruits[1] = \u0026#34;fraise\u0026#34; print(fruits) # [\u0026#34;pomme\u0026#34;, \u0026#34;fraise\u0026#34;, \u0026#34;cerise\u0026#34;] Tu peux aussi ajouter des éléments à une liste, soit à la fin avec .append(), soit à une position spécifique avec .insert().\nExemple :\nfruits.append(\u0026#34;orange\u0026#34;) # Ajoute \u0026#34;orange\u0026#34; à la fin print(fruits) # [\u0026#34;pomme\u0026#34;, \u0026#34;fraise\u0026#34;, \u0026#34;cerise\u0026#34;, \u0026#34;orange\u0026#34;] fruits.insert(1, \u0026#34;kiwi\u0026#34;) # Insère \u0026#34;kiwi\u0026#34; à l\u0026#39;index 1 print(fruits) # [\u0026#34;pomme\u0026#34;, \u0026#34;kiwi\u0026#34;, \u0026#34;fraise\u0026#34;, \u0026#34;cerise\u0026#34;, \u0026#34;orange\u0026#34;] 4. Supprimer des Éléments : Faire de la Place # Tu peux retirer des éléments d\u0026rsquo;une liste de plusieurs façons :\ndel : Permet de supprimer un élément à une position spécifique ou de supprimer toute la liste. .remove() : Supprime la première occurrence d’un élément donné. .pop() : Retire et retourne l\u0026rsquo;élément à un index spécifique. Par défaut, .pop() enlève le dernier élément. Exemple :\nfruits = [\u0026#34;pomme\u0026#34;, \u0026#34;banane\u0026#34;, \u0026#34;cerise\u0026#34;, \u0026#34;orange\u0026#34;] # Supprimer un élément par index del fruits[1] print(fruits) # [\u0026#34;pomme\u0026#34;, \u0026#34;cerise\u0026#34;, \u0026#34;orange\u0026#34;] # Supprimer une valeur spécifique fruits.remove(\u0026#34;cerise\u0026#34;) print(fruits) # [\u0026#34;pomme\u0026#34;, \u0026#34;orange\u0026#34;] # Supprimer le dernier élément dernier_fruit = fruits.pop() print(dernier_fruit) # \u0026#34;orange\u0026#34; print(fruits) # [\u0026#34;pomme\u0026#34;] 5. Les Méthodes de Liste : Quand Tu Veux Alléger la Tâche # Python te donne une panoplie de méthodes pour travailler avec des listes. En voici quelques-unes des plus utiles :\n.append(x) : Ajoute l’élément x à la fin de la liste. .extend(iterable) : Étend la liste avec les éléments d’un autre iterable (comme une autre liste). .sort() : Trie la liste en place. .reverse() : Inverse l\u0026rsquo;ordre des éléments dans la liste. .count(x) : Compte combien de fois l’élément x apparaît dans la liste. .index(x) : Renvoie l’index du premier élément égal à x. Exemple :\nfruits = [\u0026#34;pomme\u0026#34;, \u0026#34;banane\u0026#34;, \u0026#34;cerise\u0026#34;] # Ajouter plusieurs éléments fruits.extend([\u0026#34;kiwi\u0026#34;, \u0026#34;mangue\u0026#34;]) print(fruits) # [\u0026#34;pomme\u0026#34;, \u0026#34;banane\u0026#34;, \u0026#34;cerise\u0026#34;, \u0026#34;kiwi\u0026#34;, \u0026#34;mangue\u0026#34;] # Trier la liste fruits.sort() print(fruits) # [\u0026#34;banane\u0026#34;, \u0026#34;cerise\u0026#34;, \u0026#34;kiwi\u0026#34;, \u0026#34;mangue\u0026#34;, \u0026#34;pomme\u0026#34;] # Inverser la liste fruits.reverse() print(fruits) # [\u0026#34;pomme\u0026#34;, \u0026#34;mangue\u0026#34;, \u0026#34;kiwi\u0026#34;, \u0026#34;cerise\u0026#34;, \u0026#34;banane\u0026#34;] 6. Listes Imbriquées : Quand Tu Vas Plus Profond # Une liste peut contenir d’autres listes, ce qui te permet de créer des structures de données complexes. Cela peut être utile, par exemple, pour représenter une grille ou une matrice.\nExemple :\nmatrice = [[1, 2, 3], [4, 5, 6], [7, 8, 9]] print(matrice[0]) # [1, 2, 3] print(matrice[1][2]) # 6 Les listes imbriquées permettent de stocker des données hiérarchiques et d’y accéder facilement avec des indices multiples.\n7. Compréhension de Liste : La Magie en Une Ligne # La compréhension de liste (list comprehension) est un moyen compact et lisible de créer des listes en utilisant une seule ligne de code. C’est la méthode idéale pour effectuer des transformations sur les éléments d\u0026rsquo;une liste ou filtrer certains éléments.\nExemple :\n# Créer une liste de carrés de nombres de 0 à 4 carres = [x**2 for x in range(5)] print(carres) # [0, 1, 4, 9, 16] # Filtrer les nombres pairs pairs = [x for x in range(10) if x % 2 == 0] print(pairs) # [0, 2, 4, 6, 8] Conclusion # Les listes en Python sont un outil puissant et flexible pour stocker et manipuler des données. Elles te permettent de regrouper plusieurs éléments, d\u0026rsquo;effectuer des transformations, de trier et de filtrer rapidement. Si tu maîtrises bien les listes, tu as déjà un excellent levier pour améliorer ton code Python, que ce soit pour du simple traitement de données ou pour des applications plus complexes.\nAlors, prêt à jouer avec tes listes et à manipuler des données de manière élégante ?\n","date":"27 février 2025","externalUrl":null,"permalink":"/fr/courses/python/list/","section":"Cours","summary":"","title":"Les list en Python","type":"courses"},{"content":"","date":"27 février 2025","externalUrl":null,"permalink":"/fr/tags/listes/","section":"Tags","summary":"","title":"Listes","type":"tags"},{"content":"En Python, les opérateurs sont des outils essentiels. Ils sont la base pour effectuer des calculs, manipuler des données et prendre des décisions dans ton code. Qu\u0026rsquo;il s\u0026rsquo;agisse d\u0026rsquo;additionner des nombres, de comparer des valeurs, ou de combiner des expressions logiques, tu vas constamment utiliser des opérateurs. Mais attention, ils ne sont pas tous les mêmes ! Python te donne tout un arsenal d’opérateurs pour accomplir différents types d\u0026rsquo;actions, et comprendre comment ils fonctionnent est indispensable pour bien programmer.\nDans cet article, on plonge dans les différents types d\u0026rsquo;opérateurs en Python et comment les utiliser pour rendre ton code à la fois propre et puissant.\n1. Les Opérateurs Arithmétiques : Quand les Nombres Prennent Vie # Les opérateurs arithmétiques sont les plus classiques et servent à effectuer des opérations mathématiques de base.\n+ : Addition - : Soustraction * : Multiplication / : Division (toujours retourne un float) // : Division entière (retourne un int, le quotient sans le reste) % : Modulo (le reste d\u0026rsquo;une division) **** : Exponentiation (élève un nombre à une certaine puissance) Exemple de calcul avec des opérateurs :\na = 10 b = 3 print(a + b) # 13 print(a - b) # 7 print(a * b) # 30 print(a / b) # 3.3333... print(a // b) # 3 print(a % b) # 1 print(a ** b) # 1000 Ces opérateurs sont ultra-utiles pour les calculs mathématiques simples. Mais Python offre aussi des opérateurs un peu plus subtils.\n2. Les Opérateurs de Comparaison : L\u0026rsquo;Art de Comparer # Les opérateurs de comparaison sont utilisés pour tester les relations entre deux valeurs. Ils retournent un booléen (True ou False) en fonction du résultat de la comparaison.\n== : Égal à != : Différent de \u0026gt; : Plus grand que \u0026lt; : Plus petit que \u0026gt;= : Plus grand ou égal à \u0026lt;= : Plus petit ou égal à Exemple :\nx = 5 y = 10 print(x == y) # False print(x != y) # True print(x \u0026gt; y) # False print(x \u0026lt; y) # True print(x \u0026gt;= y) # False print(x \u0026lt;= y) # True Ces opérateurs sont particulièrement utiles pour les structures de contrôle comme les conditions if et les boucles.\n3. Les Opérateurs Logiques : Pour Combiner les Conditions # Les opérateurs logiques servent à combiner des expressions booléennes. Cela te permet de vérifier plusieurs conditions en même temps.\nand : Retourne True si les deux expressions sont vraies. or : Retourne True si l\u0026rsquo;une des deux expressions est vraie. not : Inverse la valeur booléenne de l’expression. Exemple :\na = True b = False print(a and b) # False print(a or b) # True print(not a) # False Ces opérateurs sont super pratiques pour effectuer des tests plus complexes. Par exemple, dans un jeu vidéo, tu pourrais vérifier si le personnage a atteint un certain niveau et possède un objet particulier avant de débloquer une nouvelle zone.\n4. Les Opérateurs d\u0026rsquo;Affectation : L\u0026rsquo;Art de Modifier une Valeur # Les opérateurs d\u0026rsquo;affectation sont utilisés pour attribuer des valeurs à des variables. Mais ils ne se contentent pas de l\u0026rsquo;affectation simple. Certains permettent de modifier la variable en fonction de sa valeur actuelle.\n= : Affectation simple += : Addition et affectation (équivalent à a = a + b) -= : Soustraction et affectation (équivalent à a = a - b) *= : Multiplication et affectation (équivalent à a = a * b) /= : Division et affectation (équivalent à a = a / b) //= : Division entière et affectation (équivalent à a = a // b) %= : Modulo et affectation (équivalent à a = a % b) **= : Exponentiation et affectation (équivalent à a = a ** b) Exemple :\nx = 5 x += 3 # x devient 8 x *= 2 # x devient 16 x -= 4 # x devient 12 Ces opérateurs sont un moyen pratique d’écrire des opérations tout en mettant à jour une variable sans redéfinir sa valeur complète.\n5. Les Opérateurs d\u0026rsquo;Identité : Pour Tester l\u0026rsquo;Identité des Objets # Les opérateurs d\u0026rsquo;identité te permettent de tester si deux variables font référence au même objet en mémoire, pas seulement si elles ont la même valeur.\nis : Retourne True si les deux variables sont le même objet. is not : Retourne True si les deux variables ne sont pas le même objet. Exemple :\na = [1, 2, 3] b = [1, 2, 3] c = a print(a is b) # False, ce sont deux objets différents print(a is c) # True, c est une référence à a Les opérateurs d\u0026rsquo;identité sont surtout utiles lorsque tu travailles avec des objets mutables, comme des listes.\n6. Les Opérateurs d\u0026rsquo;Appartenance : Pour Tester la Présence # Les opérateurs d\u0026rsquo;appartenance sont utilisés pour tester si une valeur est présente dans une séquence (comme une liste, une chaîne de caractères, etc.).\nin : Retourne True si l’élément est présent dans la séquence. not in : Retourne True si l’élément n’est pas présent dans la séquence. Exemple :\nfruits = [\u0026#39;pomme\u0026#39;, \u0026#39;banane\u0026#39;, \u0026#39;cerise\u0026#39;] print(\u0026#39;pomme\u0026#39; in fruits) # True print(\u0026#39;orange\u0026#39; not in fruits) # True Ces opérateurs sont parfaits quand tu veux vérifier rapidement si un élément se trouve dans une liste ou une chaîne de caractères.\nConclusion # Voilà, tu as maintenant un aperçu complet des opérateurs en Python. Que ce soit pour effectuer des calculs, comparer des valeurs, manipuler des objets ou tester des conditions, Python te fournit une gamme d’opérateurs puissants et simples à utiliser.\nLes maîtriser, c\u0026rsquo;est te donner les outils pour écrire du code efficace, lisible et performant. Alors n\u0026rsquo;hésite pas à les utiliser à bon escient dans ton prochain projet !\n","date":"27 février 2025","externalUrl":null,"permalink":"/fr/courses/python/operateurs/","section":"Cours","summary":"","title":"Les operateurs en Python","type":"courses"},{"content":"","date":"27 février 2025","externalUrl":null,"permalink":"/fr/tags/op%C3%A9rateurs/","section":"Tags","summary":"","title":"Opérateurs","type":"tags"},{"content":"","date":"27 février 2025","externalUrl":null,"permalink":"/fr/tags/bool%C3%A9en/","section":"Tags","summary":"","title":"Booléen","type":"tags"},{"content":"Les Booléens en Python : La Vérité est Toute Simple\nLes booléens, c’est un peu comme la lumière au bout du tunnel dans le monde de la programmation. Ils ne sont pas nombreux, mais ils sont cruciaux. En Python, tu vas souvent tomber sur ces petites valeurs qui, au fond, ne peuvent être que Vrai (True) ou Faux (False). Et pourtant, ils sont derrière des décisions importantes dans ton code. C’est grâce à eux qu\u0026rsquo;on peut contrôler le flux du programme, tester des conditions, et prendre des décisions stratégiques dans le code.\nDans cet article, on va te guider à travers les bases des booléens en Python et t\u0026rsquo;expliquer pourquoi ils sont plus puissants qu\u0026rsquo;ils n\u0026rsquo;y paraissent.\n1. Qu’est-ce qu’un Booléen ? # Un booléen est un type de donnée qui peut prendre une seule de deux valeurs possibles :\nTrue : vrai, ou la valeur positive. False : faux, ou la valeur négative. En Python, ces valeurs sont écrites en majuscule (pas de true ou false, hein, juste du True et du False). Les booléens sont principalement utilisés dans les conditions pour guider l\u0026rsquo;exécution du programme.\n2. Les Booléens dans les Conditions # Le but premier d’un booléen est de prendre des décisions dans le programme. Par exemple, si tu veux que quelque chose se produise uniquement si une condition est vraie, tu vas utiliser un booléen.\nis_even = True if is_even: print(\u0026#34;Le nombre est pair.\u0026#34;) else: print(\u0026#34;Le nombre est impair.\u0026#34;) Ici, is_even est un booléen qui décide si on va afficher \u0026ldquo;pair\u0026rdquo; ou \u0026ldquo;impair\u0026rdquo;. Tu vois, tout tourne autour de cette idée de vrai ou faux.\n3. Les Opérateurs Logiques : Combine les Booléens # Les booléens ne sont pas limités à un seul état. Python te permet de les combiner à l’aide des opérateurs logiques comme and, or, et not. Ces opérateurs sont là pour permettre des comparaisons plus complexes.\nand : Les deux doivent être vrais. # a = True b = False if a and b: print(\u0026#34;Les deux sont vrais.\u0026#34;) else: print(\u0026#34;Au moins un est faux.\u0026#34;) Dans cet exemple, a and b va retourner False, car l’une des deux conditions est fausse.\nor : Si l’un est vrai, ça passe. # a = True b = False if a or b: print(\u0026#34;Au moins un est vrai.\u0026#34;) else: print(\u0026#34;Les deux sont faux.\u0026#34;) Ici, le or retourne True même si seulement l’une des deux variables est vraie. Très utile pour vérifier plusieurs conditions indépendantes.\nnot : Inverse la valeur du booléen. # a = True if not a: print(\u0026#34;C\u0026#39;est faux.\u0026#34;) else: print(\u0026#34;C\u0026#39;est vrai.\u0026#34;) Le not inverse la valeur de a. Si a est vrai, alors not a devient faux, et vice versa.\n4. Les Comparaisons et les Booléens # Souvent, les booléens sont générés à partir de comparaisons. Par exemple, si tu veux tester si deux nombres sont égaux, tu vas obtenir un booléen comme résultat.\nVoici quelques opérateurs de comparaison :\n== : égal à != : différent de \u0026gt; : plus grand que \u0026lt; : plus petit que \u0026gt;= : plus grand ou égal à \u0026lt;= : plus petit ou égal à Exemple de comparaison :\nx = 10 y = 5 if x \u0026gt; y: print(\u0026#34;x est plus grand que y.\u0026#34;) else: print(\u0026#34;x n\u0026#39;est pas plus grand que y.\u0026#34;) Ici, la comparaison x \u0026gt; y retourne True, donc Python exécute la première branche du if.\n5. Les Booléens dans les Structures de Contrôle # Les booléens sont essentiels dans les structures de contrôle comme les boucles while et les conditions if. Voici un exemple pour comprendre comment ça se passe :\nis_running = True count = 0 while is_running: count += 1 print(count) if count == 5: is_running = False Ici, la boucle while continue tant que is_running est vrai. Dès que count atteint 5, on change la valeur de is_running à False, ce qui arrête la boucle.\n6. Les Booléens et les Types de Données # Il y a aussi une subtilité importante en Python : tous les types de données ne sont pas directement égaux à True ou False. Certains types sont déjà associés à un booléen lorsque tu les utilises dans une condition.\nFaux en Python :\nFalse (le booléen) None 0 (tous les zéros : 0, 0.0, 0j) \u0026quot;\u0026quot; (chaîne vide) [] (liste vide) {} (dictionnaire vide) set() (ensemble vide) Tout le reste est vrai.\nExemple :\na = \u0026#34;\u0026#34; if a: print(\u0026#34;La chaîne n\u0026#39;est pas vide.\u0026#34;) else: print(\u0026#34;La chaîne est vide.\u0026#34;) Comme a est une chaîne vide, Python va la traiter comme False dans le contexte du if.\n7. Le Booléen dans la Pratique : Les Tests # Les tests sont omniprésents dans la programmation. Python te permet de tester des expressions complexes et d’agir en fonction des résultats booléens. En utilisant des fonctions comme all() ou any(), tu peux facilement gérer des collections de valeurs booléennes.\nliste = [True, False, True] # Tous les éléments doivent être vrais print(all(liste)) # False # Au moins un élément doit être vrai print(any(liste)) # True Conclusion # Les booléens en Python, c\u0026rsquo;est vraiment la base de la logique conditionnelle. Avec eux, tu peux tester des conditions, faire des choix dans ton code, et même jongler avec des expressions logiques pour créer des structures plus complexes. L’essentiel à retenir : les booléens ne sont jamais à sous-estimer, car ce sont eux qui rendent ton code interactif et dynamique.\nTu sais maintenant pourquoi True et False sont deux des plus puissants outils que tu as sous la main. Il est temps de les utiliser à bon escient dans tes projets Python.\n","date":"27 février 2025","externalUrl":null,"permalink":"/fr/courses/python/booleen/","section":"Cours","summary":"","title":"Les booleen en Python","type":"courses"},{"content":"","date":"27 février 2025","externalUrl":null,"permalink":"/fr/tags/cha%C3%AEnes/","section":"Tags","summary":"","title":"Chaînes","type":"tags"},{"content":"Les strings, ou chaînes de caractères, sont l\u0026rsquo;un des types de données les plus utilisés en Python. Que ce soit pour manipuler des données d\u0026rsquo;entrée utilisateur, traiter des fichiers texte ou encore générer du contenu dynamique, les chaînes de caractères sont partout. Mais comment les utiliser efficacement et tirer le meilleur parti de leurs fonctionnalités ? C’est ce qu\u0026rsquo;on va explorer ici, avec un petit détour par les bonnes pratiques.\n1. Qu\u0026rsquo;est-ce qu\u0026rsquo;un String en Python ? # Un string en Python est une séquence immuable de caractères. Autrement dit, une fois que tu crées un string, tu ne peux plus le modifier directement. Les chaînes peuvent contenir des lettres, des chiffres, des symboles ou tout autre caractère Unicode.\nEn Python, les strings sont délimités par des guillemets simples (') ou doubles (\u0026quot;), et tu peux aussi utiliser des triples guillemets (''' ou \u0026quot;\u0026quot;\u0026quot;) pour des chaînes multi-lignes.\n# Exemples de strings mon_string = \u0026#34;Hello, Python!\u0026#34; un_autre_string = \u0026#39;String avec des guillemets simples\u0026#39; chaine_multilignes = \u0026#34;\u0026#34;\u0026#34;Ceci est une chaîne multi-lignes\u0026#34;\u0026#34;\u0026#34; 2. Accéder aux Caractères d\u0026rsquo;une Chaîne # Tout comme en C++, les chaînes de caractères en Python sont indexées. Cela signifie que tu peux accéder à un caractère spécifique d\u0026rsquo;une chaîne en utilisant des indices, et les indices commencent à 0.\nmon_string = \u0026#34;Hello\u0026#34; print(mon_string[0]) # \u0026#39;H\u0026#39; print(mon_string[1]) # \u0026#39;e\u0026#39; Tu peux aussi accéder à des sous-chaînes avec la technique du \u0026ldquo;slicing\u0026rdquo; :\nprint(mon_string[1:4]) # \u0026#39;ell\u0026#39; L’indice -1 te donne le dernier caractère de la chaîne, ce qui peut être bien pratique :\nprint(mon_string[-1]) # \u0026#39;o\u0026#39; 3. Manipuler les Strings : Quelques Méthodes Utiles # Python offre un large éventail de méthodes pour travailler avec les strings. En voici quelques-unes essentielles :\n.lower() et .upper() : Pour mettre tous les caractères en minuscules ou majuscules.\nprint(\u0026#34;hello\u0026#34;.upper()) # \u0026#39;HELLO\u0026#39; print(\u0026#34;HELLO\u0026#34;.lower()) # \u0026#39;hello\u0026#39; .strip() : Pour supprimer les espaces au début et à la fin d\u0026rsquo;une chaîne.\nprint(\u0026#34; hello \u0026#34;.strip()) # \u0026#39;hello\u0026#39; .replace(old, new) : Pour remplacer une sous-chaîne par une autre.\nprint(\u0026#34;hello world\u0026#34;.replace(\u0026#34;world\u0026#34;, \u0026#34;Python\u0026#34;)) # \u0026#39;hello Python\u0026#39; .split(delim) : Pour diviser une chaîne en une liste de sous-chaînes selon un délimiteur.\nprint(\u0026#34;apple,orange,banana\u0026#34;.split(\u0026#34;,\u0026#34;)) # [\u0026#39;apple\u0026#39;, \u0026#39;orange\u0026#39;, \u0026#39;banana\u0026#39;] .join(iterable) : Pour joindre une liste de chaînes avec un séparateur.\nfruits = [\u0026#39;apple\u0026#39;, \u0026#39;orange\u0026#39;, \u0026#39;banana\u0026#39;] print(\u0026#34;, \u0026#34;.join(fruits)) # \u0026#39;apple, orange, banana\u0026#39; 4. String Formatting : Gérer l\u0026rsquo;Affichage Dynamique # Le formatage des chaînes est crucial, surtout lorsque tu veux insérer des variables dans des chaînes de caractères. Python propose plusieurs méthodes pour cela :\nF-strings (Format String) : Introduites dans Python 3.6, elles sont simples, lisibles et efficaces.\nnom = \u0026#34;John\u0026#34; age = 25 print(f\u0026#34;Nom : {nom}, Âge : {age}\u0026#34;) # \u0026#39;Nom : John, Âge : 25\u0026#39; str.format() : Une autre méthode de formatage, souvent utilisée avant l\u0026rsquo;arrivée des f-strings.\nprint(\u0026#34;Nom : {}, Âge : {}\u0026#34;.format(nom, age)) # \u0026#39;Nom : John, Âge : 25\u0026#39; 5. Les String Multilignes : Quand ça Devient Intéressant # Les strings multilignes en Python, grâce aux triples guillemets, sont parfaits pour inclure des textes longs, des paragraphes ou même du code dans un format lisible.\ntexte = \u0026#34;\u0026#34;\u0026#34;C\u0026#39;est un exemple de chaîne de caractères qui s\u0026#39;étend sur plusieurs lignes.\u0026#34;\u0026#34;\u0026#34; print(texte) Cela peut être utile pour des blocs de texte comme des messages d\u0026rsquo;erreur, des rapports ou même pour travailler avec des templates HTML.\n6. L\u0026rsquo;Immutabilité des Strings : Pourquoi c\u0026rsquo;est Important ? # Un point fondamental à comprendre en Python, c’est que les strings sont immutables. Cela signifie que chaque fois que tu modifie un string, un nouveau string est créé, et l\u0026rsquo;ancien est laissé de côté. Ce comportement peut avoir un impact sur les performances si tu fais beaucoup de modifications de chaînes dans une boucle, par exemple. Dans ce cas, tu pourrais préférer utiliser des list de caractères, puis les convertir en string à la fin.\n7. Strings et Encodage : L\u0026rsquo;Aspect Unicode # En Python 3, les chaînes sont gérées en Unicode par défaut, ce qui signifie que tu peux manipuler n\u0026rsquo;importe quel caractère d’une langue, ce qui est particulièrement pratique quand tu travailles avec des textes multilingues.\nunicode_string = \u0026#34;你好，Python！\u0026#34; print(unicode_string) # \u0026#39;你好，Python！\u0026#39; Conclusion # Les strings en Python sont plus puissantes qu\u0026rsquo;il n\u0026rsquo;y paraît au premier abord. Avec leur grande variété de méthodes et leur simplicité d\u0026rsquo;utilisation, elles permettent de manipuler du texte de manière élégante et efficace. Bien maîtriser les chaînes de caractères, c’est aussi bien maîtriser un aspect clé du développement Python. Si tu veux vraiment pousser ton code à un autre niveau, prends le temps d\u0026rsquo;explorer toutes les possibilités qu\u0026rsquo;offrent les strings. Vous pourriez être surpris de ce qu’elles peuvent accomplir.\nVoilà, j’espère que ce tour d’horizon des chaînes de caractères en Python t’a donné une meilleure vision de leur utilité. Si tu as des questions ou si tu veux creuser un aspect en particulier, n’hésite pas à laisser un commentaire ou à me pinguer sur ton blog !\n","date":"27 février 2025","externalUrl":null,"permalink":"/fr/courses/python/strings/","section":"Cours","summary":"","title":"Les Strings en Python","type":"courses"},{"content":"","date":"27 février 2025","externalUrl":null,"permalink":"/fr/tags/casting/","section":"Tags","summary":"","title":"Casting","type":"tags"},{"content":"Le casting, ou la conversion de types, en Python, c’est comme jouer au magicien des données. T\u0026rsquo;as des types différents dans tes variables, et parfois, tu veux les transformer pour qu\u0026rsquo;ils collent mieux à tes besoins. Pas de souci, Python te permet de faire tout ça de manière ultra simple. Et comme c’est un langage qui aime la flexibilité, le casting devient une des compétences de base pour rendre ton code encore plus fluide et efficace.\n1. Le Casting de Base : Convertir entre Types Simples # L’idée du casting, c’est de transformer une variable d’un type à un autre. Par exemple, tu pourrais avoir un entier et vouloir le convertir en chaîne de caractères pour l’afficher ou l’inclure dans un message. C’est un peu comme un changement de costume pour ta variable.\nPython te permet de faire ça avec des fonctions intégrées.\nExemples de base :\n# De int à str a = 42 b = str(a) # On cast l\u0026#39;entier en chaîne de caractères print(type(b)) # \u0026lt;class \u0026#39;str\u0026#39;\u0026gt; # De float à int x = 3.14159 y = int(x) # On cast le flottant en entier (partie entière seulement) print(y) # 3 # De str à float s = \u0026#34;3.14\u0026#34; f = float(s) # Convertit la chaîne de caractères en flottant print(f) # 3.14 Tu vois que ça peut être super pratique quand tu veux gérer plusieurs types de données en même temps. Mais faut aussi garder en tête quelques subtilités.\n2. Le Casting Implicite vs. Explicite # Implicite : La Magie de Python # Le casting implicite, c’est Python qui le fait pour toi sans que tu n’aies à lever le petit doigt. En gros, si tu réalises une opération avec des types compatibles, Python va faire le casting automatiquement pour que tout fonctionne.\nPar exemple :\na = 5 # int b = 2.5 # float # Python va automatiquement faire le casting de \u0026#39;a\u0026#39; en float pour l\u0026#39;addition result = a + b print(result) # 7.5 Ici, Python fait le casting de l’entier a en flottant pour que l’addition puisse se faire. Ça se fait sans que tu aies à intervenir. C\u0026rsquo;est propre, rapide et ça te simplifie la vie.\nExplicite : Le Pouvoir du Programmeur # Parfois, tu as besoin d’être plus précis. Par exemple, tu veux forcer un entier à devenir un flottant, ou une chaîne de caractères à devenir un entier. C’est là que le casting explicite entre en scène.\na = \u0026#34;123\u0026#34; b = int(a) # On cast la chaîne de caractères en entier print(b) # 123 x = 10 y = str(x) # On cast l\u0026#39;entier en chaîne print(y) # \u0026#34;10\u0026#34; Le casting explicite est aussi utile lorsque tu veux éviter des erreurs de conversion ou garantir un format particulier.\n3. Les Casts à Eviter et leurs Limites # Tu pourrais être tenté de caster n’importe quoi, mais attention, ce n’est pas toujours aussi simple. Parfois, une conversion va échouer, surtout si les données ne sont pas compatibles avec le type de destination. Exemple classique :\na = \u0026#34;hello\u0026#34; b = int(a) # Ça va planter, car \u0026#34;hello\u0026#34; n\u0026#39;est pas convertible en entier Ici, Python va te sortir une erreur du genre ValueError: invalid literal for int(). Tu veux éviter ça à tout prix. Pour ça, il vaut mieux vérifier les données avant de les caster.\nSi tu ne sais pas si une chaîne de caractères est convertible en nombre, tu peux utiliser une fonction comme try/except pour attraper l’erreur et gérer ça proprement.\na = \u0026#34;abc\u0026#34; try: b = int(a) except ValueError: print(\u0026#34;Impossible de convertir cette chaîne en entier.\u0026#34;) 4. Les Casts Compliqués : Quand la Conversion est Plus Subtile # Il existe des types plus complexes que tu pourrais avoir besoin de caster. Par exemple, les listes, dictionnaires, ou tuples. Et Python te permet aussi de gérer ces types avec des castings explicites.\nCaster en liste :\nt = (1, 2, 3) # Un tuple l = list(t) # On le convertit en liste print(l) # [1, 2, 3] Caster en tuple :\nl = [1, 2, 3] # Une liste t = tuple(l) # On la convertit en tuple print(t) # (1, 2, 3) Caster en dictionnaire :\nl = [(\u0026#34;a\u0026#34;, 1), (\u0026#34;b\u0026#34;, 2)] d = dict(l) # Convertir la liste de tuples en dictionnaire print(d) # {\u0026#39;a\u0026#39;: 1, \u0026#39;b\u0026#39;: 2} 5. Pourquoi C’est Important de Maîtriser le Casting # Le casting, c’est l’une de ces petites compétences qui peut faire une énorme différence dans ton code. Il te permet de :\nManipuler des données provenant de différentes sources, comme des fichiers, des entrées utilisateur, des API, etc. Éviter des erreurs de type qui, sans un bon casting, pourraient entraîner des bugs en chaîne. Faciliter la compatibilité avec des bibliothèques externes ou des systèmes externes, où les types peuvent ne pas correspondre directement à ce que tu as dans ton code. Conclusion # Le casting en Python est une opération simple mais puissante. Que tu sois en train de manipuler des entiers, des chaînes de caractères, des listes ou des tuples, savoir convertir entre les types est essentiel pour écrire un code robuste et flexible. Et en combinant le casting explicite et implicite, tu peux créer un programme propre, fonctionnel et fluide.\nMaintenant que tu connais les bases, tu peux intégrer ça dans tes projets pour simplifier ta gestion des types de données. À toi de jouer !\n","date":"27 février 2025","externalUrl":null,"permalink":"/fr/courses/python/casting/","section":"Cours","summary":"","title":"Le casting en Python","type":"courses"},{"content":"Les Nombres en Python : De l\u0026rsquo;Intégrale à la Décimale\nLes nombres sont, sans surprise, l\u0026rsquo;une des pierres angulaires de la programmation. Et en Python, c\u0026rsquo;est un terrain de jeu assez large que tu vas découvrir. Que tu manipules des entiers pour compter des objets ou des flottants pour des calculs de précision, Python te fournit tout un arsenal pour travailler avec des chiffres de manière fluide et intuitive. Dans cet article, on plonge dans les différentes facettes des nombres en Python, avec des exemples concrets et quelques astuces qui te faciliteront la vie.\n1. Les Entiers (int) : La Base de Tout # Les entiers, c’est la base. Ce sont des nombres sans virgule, que ce soit des nombres positifs, négatifs, ou nuls. En Python, tu n’as même pas à t\u0026rsquo;inquiéter de la taille maximale d’un entier. Python gère des entiers de tailles presque infinies, un vrai plus quand tu travailles avec de gros calculs.\na = 100 b = -42 c = 0 Pas de souci ici. Python va gérer ça sans broncher. Et si tu as besoin d’un nombre particulièrement grand ou petit, tu n’as qu’à taper directement le nombre. Tu n’auras pas à te soucier des limites de stockage comme dans certains autres langages.\n2. Les Nombres à Virgule Flottante (float) : La Précision au Détail # Les flottants, ce sont les nombres qui ont des décimales. Si tu veux effectuer des calculs qui nécessitent de la précision, comme en science ou en économie, tu feras forcément appel à eux. Python te permet de manipuler des flottants avec une simplicité déconcertante.\npi = 3.14159 temperature = -5.67 Les flottants sont utiles pour des calculs comme des moyennes, des pourcentages, ou des calculs trigonométriques. Mais garde en tête qu’ils ne sont pas toujours parfaitement précis à cause de la manière dont ils sont représentés en mémoire. Si tu as besoin d\u0026rsquo;une précision de dingue, tu peux aussi utiliser le module decimal qui te permet de travailler avec des flottants à précision arbitraire.\n3. Les Opérations Mathématiques : Les Fondamentaux # Que tu sois en train de coder une simple calculatrice ou de résoudre des équations complexes, Python te permet d\u0026rsquo;effectuer une large gamme d\u0026rsquo;opérations sur tes nombres. Voici les plus basiques :\nAddition : + Soustraction : - Multiplication : * Division (flottante) : / Division entière : // Modulo (reste de la division) : % Exponentiation : ** Voici un petit exemple pour voir comment ça marche :\na = 10 b = 3 # Opérations addition = a + b soustraction = a - b multiplication = a * b division = a / b division_entière = a // b modulo = a % b puissance = a ** b print(f\u0026#34;Addition: {addition}, Soustraction: {soustraction}, Multiplication: {multiplication}\u0026#34;) print(f\u0026#34;Division: {division}, Division entière: {division_entière}, Modulo: {modulo}\u0026#34;) print(f\u0026#34;Puissance: {puissance}\u0026#34;) 4. Les Nombres Complexes (complex) : Quand les Réels ne Suffisent Pas # Python permet aussi de travailler avec des nombres complexes, ce qui est parfait si tu touches à l\u0026rsquo;algèbre complexe ou à des calculs nécessitant une composante imaginaire.\nUn nombre complexe se compose de deux parties : une réelle et une imaginaire. La syntaxe de base est la suivante :\nz = 3 + 4j # 3 est la partie réelle et 4j la partie imaginaire Tu peux effectuer des opérations sur ces nombres complexes comme sur des nombres réels. Python gère ça tout seul, et tu peux extraire la partie réelle et imaginaire avec les attributs real et imag.\nprint(z.real) # 3.0 print(z.imag) # 4.0 5. La Précision des Flottants : Les Pièges à Éviter # Petite remarque importante. Les flottants, comme mentionné plus tôt, peuvent parfois entraîner des imprécisions en raison de la façon dont ils sont stockés en mémoire. Par exemple, si tu fais une opération simple comme :\na = 0.1 + 0.2 print(a) Tu pourrais t\u0026rsquo;attendre à voir 0.3, mais Python pourrait afficher quelque chose comme 0.30000000000000004. Pour éviter ces erreurs d’arrondi, tu peux utiliser des outils comme le module decimal ou arrondir les résultats avec la fonction round().\na = round(0.1 + 0.2, 2) print(a) # Affiche 0.3 6. Conversion entre Types Numériques # Parfois, tu voudras peut-être convertir des nombres d’un type à l’autre. Par exemple, passer d’un flottant à un entier, ou inversement. Python propose plusieurs fonctions de conversion intégrées :\nint() : Convertit en entier. float() : Convertit en flottant. x = 3.14 y = int(x) # Convertit 3.14 en 3 z = float(5) # Convertit 5 en 5.0 print(y, z) 7. Les Fonctions Utiles pour les Nombres # Python t’offre une boîte à outils pleine de fonctions pour manipuler les nombres, comme :\nabs(x) : Retourne la valeur absolue de x. pow(x, y) : Retourne x élevé à la puissance y. min(x, y) et max(x, y) : Retourne respectivement le plus petit et le plus grand des deux nombres. Conclusion # Les nombres sont l’un des éléments les plus simples, mais aussi les plus puissants en Python. Que tu travailles avec des entiers pour des indices de liste ou des flottants pour des calculs scientifiques, Python te fournit tout ce dont tu as besoin pour jongler avec les chiffres sans te prendre la tête.\nMaintenant que tu maîtrises les bases des nombres en Python, tu es prêt à t\u0026rsquo;attaquer à des projets plus ambitieux, que ce soit pour créer des applications, résoudre des problèmes mathématiques complexes ou même explorer l\u0026rsquo;algorithmique. Rappelle-toi que la pratique est la clé : expérimente, joue avec les nombres et tu deviendras rapidement plus à l\u0026rsquo;aise.\n","date":"27 février 2025","externalUrl":null,"permalink":"/fr/courses/python/nombres/","section":"Cours","summary":"","title":"Les nombres en Python","type":"courses"},{"content":"","date":"27 février 2025","externalUrl":null,"permalink":"/fr/tags/nombres/","section":"Tags","summary":"","title":"Nombres","type":"tags"},{"content":"Quand tu débutes en Python, l\u0026rsquo;un des concepts essentiels à comprendre, c\u0026rsquo;est celui des types de données. Chaque valeur que tu manipules en Python appartient à un type spécifique. Ces types déterminent non seulement ce que tu peux faire avec les données, mais aussi la manière dont elles sont stockées et manipulées en mémoire. Dans cet article, on va explorer les types de données les plus utilisés en Python, en décryptant leur fonctionnement et leurs applications avec des exemples concrets.\n1. Les Types Numériques : Entiers et Flottants # Les nombres sont la base de toute opération mathématique en programmation. En Python, tu as deux types principaux pour les nombres : les entiers (int) et les flottants (float).\nEntiers (int) # Les entiers représentent des nombres sans décimales. Que ce soit un nombre positif, négatif, ou zéro, Python gère tout ça de manière fluide.\nx = 10 y = -5 z = 0 Les entiers sont très pratiques pour les comptages, les indices de listes, et toute situation où tu n’as pas besoin de décimales.\nFlottants (float) # Les flottants, comme leur nom l’indique, sont des nombres qui possèdent une partie décimale. Par exemple, 3.14, -0.001, ou 2.718 sont tous des flottants.\npi = 3.14159 temperature = -7.5 Les flottants sont cruciaux pour les calculs de précision, comme ceux qu\u0026rsquo;on trouve en physique, en économie, ou dans les statistiques.\n2. Les Chaînes de Caractères : Manipuler du Texte # Les chaînes de caractères (str) sont des séquences de caractères, et c’est probablement l’un des types de données les plus utilisés en Python, surtout quand tu travailles avec des utilisateurs, des fichiers ou des API.\nnom = \u0026#34;Alice\u0026#34; message = \u0026#34;Bienvenue sur le blog!\u0026#34; Les chaînes sont entre guillemets (simples ou doubles) et tu peux les manipuler de nombreuses manières : concatenation, slicing, ou même utiliser des méthodes pour les transformer (mettre en majuscules, supprimer des espaces, etc.).\n3. Les Listes : La Structure Dynamique # Les listes (list) sont des collections ordonnées et modifiables qui peuvent contenir des éléments de types différents (entiers, chaînes, objets, etc.). Elles sont super flexibles et essentielles en Python.\nnombres = [1, 2, 3, 4] fruits = [\u0026#34;pomme\u0026#34;, \u0026#34;banane\u0026#34;, \u0026#34;cerise\u0026#34;] Tu peux ajouter, supprimer, ou modifier des éléments à volonté. Par exemple :\nfruits.append(\u0026#34;orange\u0026#34;) # Ajoute \u0026#39;orange\u0026#39; à la fin de la liste fruits[0] = \u0026#34;poire\u0026#34; # Remplace \u0026#34;pomme\u0026#34; par \u0026#34;poire\u0026#34; Les listes sont idéales pour les situations où tu dois manipuler un ensemble d\u0026rsquo;éléments et où l\u0026rsquo;ordre est important.\n4. Les Tuples : Collection Immuable # Les tuples (tuple) ressemblent à des listes, mais contrairement à celles-ci, elles sont immuables. Une fois créés, tu ne peux plus modifier les éléments à l\u0026rsquo;intérieur.\ncoordonnees = (10.5, 20.3) Les tuples sont utilisés lorsqu’on veut garantir que les données ne changeront pas, et souvent pour des ensembles de données qui sont fixés. Par exemple, les coordonnées géographiques (latitude, longitude) sont souvent représentées sous forme de tuple.\n5. Les Dictionnaires : Paires Clé-Valeur # Les dictionnaires (dict) sont des collections non ordonnées qui stockent des paires clé-valeur. Si tu veux associer des informations entre elles, comme un nom à un numéro de téléphone, les dictionnaires sont parfaits pour ça.\npersonne = {\u0026#34;nom\u0026#34;: \u0026#34;Alice\u0026#34;, \u0026#34;age\u0026#34;: 25, \u0026#34;ville\u0026#34;: \u0026#34;Paris\u0026#34;} Tu accèdes aux éléments via leur clé :\nprint(personne[\u0026#34;nom\u0026#34;]) # Résultat : Alice Les dictionnaires sont essentiels pour tout travail nécessitant un accès rapide aux données par des clés uniques.\n6. Les Ensembles : Collections Uniques et Non Ordonnées # Les ensembles (set) sont des collections non ordonnées de valeurs uniques. Si tu veux garantir qu’il n’y a pas de doublons dans ta collection, les ensembles sont ce qu’il te faut.\nnombres = {1, 2, 3, 4, 5} Les ensembles sont très utiles lorsqu’on veut effectuer des opérations ensemblistes comme les unions, intersections, et différences.\n7. Les Booléens : Le Type de la Vérité # Les booléens (bool) sont le type de données qui permet de représenter la logique de vérité. Un booléen peut être soit True, soit False.\nest_majeur = True est_mineur = False Les booléens sont largement utilisés dans les structures conditionnelles (if, while) pour contrôler le flux du programme.\n8. Les Types Spéciaux : None et Autres # None : Le type None représente l\u0026rsquo;absence de valeur. C\u0026rsquo;est une sorte de \u0026ldquo;valeur nulle\u0026rdquo; qu\u0026rsquo;on utilise pour indiquer qu\u0026rsquo;une variable n’a pas encore été initialisée ou qu’un retour de fonction n’a rien donné. valeur = None Les types personnalisés : En plus des types de base, tu peux aussi définir tes propres types de données en Python grâce aux classes. Cela te permet de créer des objets complexes avec leurs propres attributs et méthodes. 9. La Conversion de Types # Il arrive souvent qu\u0026rsquo;on ait besoin de convertir des données d’un type à un autre. Python te permet de le faire facilement grâce à des fonctions intégrées comme int(), float(), str(), etc.\n# Conversion d\u0026#39;un nombre flottant en entier x = 3.14 y = int(x) # y devient 3 Cela peut être particulièrement utile quand tu manipules des données externes ou que tu as besoin de formater des valeurs avant de les afficher.\nConclusion # Comprendre les types de données en Python, c’est comprendre comment gérer et manipuler les informations dans ton code. Que tu sois en train de faire des calculs avec des entiers et flottants, de gérer des informations textuelles avec des chaînes de caractères, ou de structurer des données complexes avec des dictionnaires et des listes, chaque type de données en Python a son utilité spécifique.\nPrends le temps de maîtriser ces types, et tu verras que ton code sera non seulement plus efficace, mais aussi plus élégant. Comme toujours, la pratique est la clé : expérimente avec ces types dans tes projets, et tu seras rapidement à l’aise pour jongler avec eux sans effort.\n","date":"27 février 2025","externalUrl":null,"permalink":"/fr/courses/python/type-donnee/","section":"Cours","summary":"","title":"Les type de donnée en python","type":"courses"},{"content":"","date":"27 février 2025","externalUrl":null,"permalink":"/fr/tags/type-de-donn%C3%A9e/","section":"Tags","summary":"","title":"Type De Donnée","type":"tags"},{"content":"","date":"27 février 2025","externalUrl":null,"permalink":"/categories/python-course/","section":"Categories","summary":"","title":"Python Course","type":"categories"},{"content":"","date":"27 février 2025","externalUrl":null,"permalink":"/tags/syntax/","section":"Tags","summary":"","title":"Syntax","type":"tags"},{"content":"","date":"26 février 2025","externalUrl":null,"permalink":"/fr/tags/syntaxe/","section":"Tags","summary":"","title":"Syntaxe","type":"tags"},{"content":"Lorsque tu te lances dans la programmation Python, l\u0026rsquo;une des premières choses que tu remarqueras, c’est à quel point la syntaxe du langage est simple et épurée. C’est un peu comme une respiration dans un océan de langages parfois trop verbeux. Dans cet article, on va décortiquer ensemble les bases de la syntaxe Python, en te donnant des clés pour écrire du code propre, lisible, et qui roule sans accroc.\n1. Les Bases de la Syntaxe Python : L’Indentation # En Python, l\u0026rsquo;indentation n’est pas juste une question de style : c’est une règle de base. Contrairement à d’autres langages comme C ou Java, où les blocs de code sont délimités par des accolades {}, en Python, c’est l’indentation qui détermine où commence et où finit un bloc de code.\nPrenons un exemple simple avec une fonction :\ndef saluer(): print(\u0026#34;Bonjour\u0026#34;) print(\u0026#34;Comment ça va ?\u0026#34;) Ici, les deux print() sont indentés pour indiquer qu\u0026rsquo;ils font partie du bloc de la fonction saluer(). Si tu oublies de les indenter, tu vas avoir une erreur.\n2. Les Variables et l’Assignation # En Python, l\u0026rsquo;assignation de variables est simple comme bonjour. Tu utilises l\u0026rsquo;opérateur = pour donner une valeur à une variable :\nage = 25 nom = \u0026#34;Alice\u0026#34; Tu remarqueras que pas besoin de spécifier le type de la variable (int, str, etc.). Python devine tout ça tout seul. Si tu as une idée de ce qu’est un type dynamique, voilà l\u0026rsquo;exemple parfait.\n3. Les Structures de Contrôle : If, Elif et Else # Les structures de contrôle en Python sont classiques. Prenons l\u0026rsquo;exemple du célèbre if :\nage = 18 if age \u0026gt;= 18: print(\u0026#34;Tu es majeur.\u0026#34;) else: print(\u0026#34;Tu es mineur.\u0026#34;) Note bien l\u0026rsquo;indentation à l\u0026rsquo;intérieur des blocs if et else. Cela montre qu’en Python, la clarté prime. Pas besoin d’accolades : tout est dans l’alignement des lignes.\nTu peux aussi enchaîner plusieurs conditions avec elif (else if) :\njour = \u0026#34;lundi\u0026#34; if jour == \u0026#34;lundi\u0026#34;: print(\u0026#34;C\u0026#39;est le début de la semaine !\u0026#34;) elif jour == \u0026#34;vendredi\u0026#34;: print(\u0026#34;C\u0026#39;est bientôt le week-end !\u0026#34;) else: print(\u0026#34;C\u0026#39;est une journée normale.\u0026#34;) 4. Les Boucles : For et While # Les boucles en Python sont puissantes et faciles à utiliser. La boucle for est idéale pour itérer sur des objets comme des listes, des chaînes, ou des ranges.\nExemple avec une liste :\nfruits = [\u0026#34;pomme\u0026#34;, \u0026#34;banane\u0026#34;, \u0026#34;cerise\u0026#34;] for fruit in fruits: print(fruit) Python permet aussi d’itérer facilement sur une plage de nombres avec la fonction range() :\nfor i in range(5): # Cela va afficher 0, 1, 2, 3, 4 print(i) Quant à la boucle while, elle continue à s\u0026rsquo;exécuter tant qu\u0026rsquo;une condition est vraie. Fais attention à bien gérer la condition de sortie pour éviter les boucles infinies.\ncompteur = 0 while compteur \u0026lt; 5: print(compteur) compteur += 1 5. Les Fonctions : Comment Ça Marche # Les fonctions en Python sont super simples à définir. Tu utilises le mot-clé def, suivi du nom de la fonction et des paramètres entre parenthèses. Voici un exemple avec une fonction qui additionne deux nombres :\ndef addition(a, b): return a + b resultat = addition(5, 3) print(resultat) # Résultat : 8 Les fonctions en Python sont également flexibles : tu peux passer des arguments par défaut, des arguments variadiques, et même renvoyer plusieurs valeurs.\n6. **Les Listes ** # Les listes en Python sont super puissantes. Tu peux les créer en utilisant des crochets [] et y ajouter des éléments de manière dynamique. Exemple :\nnombres = [1, 2, 3] nombres.append(4) # Ajoute un élément à la fin print(nombres) # Résultat : [1, 2, 3, 4] Tu peux aussi manipuler les listes avec facilité.\ncarres = [x**2 for x in range(5)] print(carres) # Résultat : [0, 1, 4, 9, 16] 7. Les Dictionnaires : Manipuler des Paires Clé/Valeur # Les dictionnaires en Python sont parfaits pour stocker des données sous forme de paires clé-valeur. Voici comment tu peux les utiliser :\npersonne = {\u0026#34;nom\u0026#34;: \u0026#34;Alice\u0026#34;, \u0026#34;âge\u0026#34;: 25} print(personne[\u0026#34;nom\u0026#34;]) # Résultat : Alice Tu peux ajouter, modifier ou supprimer des paires clé-valeur de manière simple :\npersonne[\u0026#34;ville\u0026#34;] = \u0026#34;Paris\u0026#34; # Ajoute une nouvelle paire clé-valeur print(personne) # Résultat : {\u0026#39;nom\u0026#39;: \u0026#39;Alice\u0026#39;, \u0026#39;âge\u0026#39;: 25, \u0026#39;ville\u0026#39;: \u0026#39;Paris\u0026#39;} 8. Les Classes et Objets : Un Petit Voyage en POO # La programmation orientée objet (POO) est un élément clé en Python. Tu peux définir des classes et créer des objets à partir de celles-ci. Voici un exemple simple d’une classe Personne :\nclass Personne: def __init__(self, nom, age): self.nom = nom self.age = age def se_presenter(self): print(f\u0026#34;Bonjour, je suis {self.nom} et j\u0026#39;ai {self.age} ans.\u0026#34;) alice = Personne(\u0026#34;Alice\u0026#34;, 25) alice.se_presenter() # Résultat : Bonjour, je suis Alice et j\u0026#39;ai 25 ans. 9. Gestion des Exceptions : Try/Except # En Python, les erreurs ne sont pas vues comme des échecs, mais comme des opportunités d\u0026rsquo;améliorer ton code. Avec try et except, tu peux gérer des exceptions de manière élégante :\ntry: resultat = 10 / 0 except ZeroDivisionError: print(\u0026#34;Erreur : Division par zéro.\u0026#34;) Conclusion # La syntaxe Python, c’est vraiment un mélange d’élégance et de simplicité. Tu vois, tout est conçu pour que tu passes plus de temps à résoudre des problèmes qu’à te casser la tête sur des syntaxes compliquées. Avec les concepts qu’on a vus, tu es maintenant armé pour attaquer n\u0026rsquo;importe quel projet Python. Alors, n\u0026rsquo;hésite pas à expérimenter, à coder, et surtout, à t’amuser avec ton code !\n","date":"26 février 2025","externalUrl":null,"permalink":"/fr/courses/python/syntaxe/","section":"Cours","summary":"","title":"Syntaxe du langage Python","type":"courses"},{"content":"","date":"26 février 2025","externalUrl":null,"permalink":"/fr/tags/variables/","section":"Tags","summary":"","title":"Variables","type":"tags"},{"content":" Les Variables en Python : Le cœur de ton code # Les variables sont comme des boîtes magiques qui servent à stocker et manipuler des données dans ton programme. En Python, elles sont particulièrement souples et intuitives !\n🧠 Qu\u0026rsquo;est-ce qu\u0026rsquo;une variable ? # Une variable en Python est comme un conteneur étiqueté qui peut stocker différents types de données :\n📦 Stocke des valeurs (nombres, texte, listes\u0026hellip;) 🏷️ Possède un nom qui permet d\u0026rsquo;y accéder 🔄 Peut changer de contenu au cours du programme 🎯 Mission #1 : Explorer les variables # Testez ce code dans l\u0026rsquo;interpréteur Python et observez :\nage = 25 nom = \u0026#34;Alice\u0026#34; print(f\u0026#34;Bonjour, je m\u0026#39;appelle {nom} et j\u0026#39;ai {age} ans.\u0026#34;) age = 26 print(f\u0026#34;C\u0026#39;est mon anniversaire ! Maintenant j\u0026#39;ai {age} ans.\u0026#34;) 📝 Explication du code On crée une variable age contenant le nombre 25 On crée une variable nom contenant le texte \u0026ldquo;Alice\u0026rdquo; On affiche un message utilisant ces deux variables On change la valeur de age à 26 Le message suivant reflète cette nouvelle valeur 🧩 Types de variables en Python # Python est intelligent et détermine automatiquement le type de variable selon la valeur qu\u0026rsquo;on lui assigne.\n📊 Les types fondamentaux # Type Exemple Description str (chaîne) \u0026quot;Hello\u0026quot; Texte int (entier) 42 Nombre entier float (flottant) 3.14 Nombre décimal bool (booléen) True, False Vrai ou faux 🔢 Les types de collections # Type Exemple Description list (liste) [1, 2, 3] Collection ordonnée modifiable tuple (tuple) (1, 2, 3) Collection ordonnée non modifiable dict (dictionnaire) {\u0026quot;nom\u0026quot;: \u0026quot;Alice\u0026quot;, \u0026quot;age\u0026quot;: 25} Paires clé-valeur set (ensemble) {\u0026quot;pomme\u0026quot;, \u0026quot;banane\u0026quot;} Collection non ordonnée d\u0026rsquo;éléments uniques 🛠️ Manipulation des variables # 📝 Création et modification # # Création de variables score = 0 nom_joueur = \u0026#34;Aventurier\u0026#34; # Modification de variables score = score + 10 # score vaut maintenant 10 score += 5 # score vaut maintenant 15 🪄 Assignation multiple # Python permet d\u0026rsquo;assigner plusieurs variables en une seule ligne :\nx, y, z = 10, 20, 30 print(x, y, z) # Affiche: 10 20 30 # Échange de valeurs en une ligne ! a, b = 5, 10 a, b = b, a # a vaut 10, b vaut 5 📏 Règles de nommage # Pour nommer tes variables, respecte ces règles :\n✅ Autorisé :\nLettres (a-z, A-Z) Chiffres (sauf en première position) Underscore (_) ❌ Interdit :\nCommencer par un chiffre Utiliser des espaces Utiliser des caractères spéciaux (@, #, %, etc.) Utiliser des mots réservés Python (if, for, while, etc.) 🌟 Bonnes pratiques # # 👍 Bon nommage age_joueur = 25 prix_total = 49.99 est_actif = True # 👎 Mauvais nommage a = 25 # Nom pas clair pT = 49.99 # Abréviation peu lisible variable1 = True # Nom générique 🧪 Variables mutables vs immuables # 🔒 Types immuables (non modifiables après création) # int, float, str, bool, tuple texte = \u0026#34;Hello\u0026#34; # texte[0] = \u0026#34;h\u0026#34; # ❌ Erreur ! Les strings sont immuables 🔓 Types mutables (modifiables après création) # list, dict, set fruits = [\u0026#34;pomme\u0026#34;, \u0026#34;banane\u0026#34;, \u0026#34;cerise\u0026#34;] fruits[0] = \u0026#34;fraise\u0026#34; # ✅ Fonctionne ! Les listes sont mutables print(fruits) # [\u0026#39;fraise\u0026#39;, \u0026#39;banane\u0026#39;, \u0026#39;cerise\u0026#39;] 🔍 Portée des variables # 🌍 Variables globales # Accessibles partout dans le programme\nscore_total = 0 # Variable globale def ajouter_points(points): global score_total # Indique qu\u0026#39;on utilise la variable globale score_total += points ajouter_points(10) print(score_total) # Affiche 10 🏠 Variables locales # Existent uniquement dans une fonction\ndef calculer_aire(): longueur = 5 # Variable locale largeur = 3 # Variable locale return longueur * largeur print(calculer_aire()) # Affiche 15 # print(longueur) # ❌ Erreur ! Variable non définie ici 🎮 Défis pratiques # 🏆 Défi #1 : Convertisseur de température # Créez un fichier convertisseur.py :\nIl demande à l\u0026rsquo;utilisateur d\u0026rsquo;entrer une température en Celsius. Il convertit cette température en Fahrenheit en utilisant la formule : ( \\text{Fahrenheit} = (\\text{Celsius} \\times \\frac{9}{5}) + 32 ). Il affiche le résultat de la conversion. Ensuite, il demande à l\u0026rsquo;utilisateur d\u0026rsquo;entrer une température en Fahrenheit. Il convertit cette température en Celsius en utilisant la formule : ( \\text{Celsius} = (\\text{Fahrenheit} - 32) \\times \\frac{5}{9} ). Il affiche le résultat de cette conversion. Exemple d\u0026rsquo;output # Si l\u0026rsquo;utilisateur entre 25 pour la température en Celsius et 77 pour la température en Fahrenheit, l\u0026rsquo;output sera :\nTempérature en Celsius : 25 25.0°C = 77.0°F Température en Fahrenheit : 77 77.0°F = 25.0°C Les valeurs affichées peuvent varier en fonction des entrées de l\u0026rsquo;utilisateur.\n# Convertisseur Celsius ↔ Fahrenheit celsius = float(input(\u0026#34;Température en Celsius : \u0026#34;)) # Conversion en Fahrenheit fahrenheit = (celsius * 9/5) + 32 # Affichage du résultat print(f\u0026#34;{celsius}°C = {fahrenheit}°F\u0026#34;) # Bonus : conversion inverse temp_f = float(input(\u0026#34;Température en Fahrenheit : \u0026#34;)) temp_c = (temp_f - 32) * 5/9 print(f\u0026#34;{temp_f}°F = {temp_c}°C\u0026#34;) 🏆 Défi #2 : Générateur de profil # Créez un fichier profil.py :\n# Collecte d\u0026#39;informations nom = input(\u0026#34;Ton nom : \u0026#34;) age = int(input(\u0026#34;Ton âge : \u0026#34;)) ville = input(\u0026#34;Ta ville : \u0026#34;) hobby = input(\u0026#34;Ton hobby préféré : \u0026#34;) # Calculs dérivés annee_naissance = 2025 - age est_majeur = age \u0026gt;= 18 # Génération du profil print(\u0026#34;\\n===== PROFIL AVENTURIER =====\u0026#34;) print(f\u0026#34;Nom: {nom}\u0026#34;) print(f\u0026#34;Âge: {age} ans (né(e) vers {annee_naissance})\u0026#34;) print(f\u0026#34;Localisation: {ville}\u0026#34;) print(f\u0026#34;Passion: {hobby}\u0026#34;) print(f\u0026#34;Statut: {\u0026#39;Majeur\u0026#39; if est_majeur else \u0026#39;Mineur\u0026#39;}\u0026#34;) print(\u0026#34;============================\u0026#34;) 💡 Astuces avancées # 🔍 Vérifier le type d\u0026rsquo;une variable # x = 42 print(type(x)) # \u0026lt;class \u0026#39;int\u0026#39;\u0026gt; y = \u0026#34;Bonjour\u0026#34; print(type(y)) # \u0026lt;class \u0026#39;str\u0026#39;\u0026gt; 🧮 Opérations sur les variables # a = 5 b = 2 print(a + b) # Addition: 7 print(a - b) # Soustraction: 3 print(a * b) # Multiplication: 10 print(a / b) # Division: 2.5 print(a // b) # Division entière: 2 print(a % b) # Modulo (reste): 1 print(a ** b) # Puissance: 25 📚 Pour aller plus loin # Explore les f-strings pour des affichages plus élégants Découvre les listes, dictionnaires et tuples pour stocker des collections Apprends à combiner des variables avec des conditions et des boucles 🎯 Mémo pratique # ✅ Les variables sont des \u0026ldquo;boîtes\u0026rdquo; pour stocker des données\n✅ Python détermine automatiquement leur type\n✅ Elles peuvent changer de valeur au cours du programme\n✅ Choisis des noms significatifs pour tes variables\n✅ Certains types sont modifiables, d\u0026rsquo;autres non\nPrêt à expérimenter avec les variables ? Essaye les défis ci-dessus et vois comment ces \u0026ldquo;boîtes magiques\u0026rdquo; peuvent rendre ton code plus dynamique et puissant !\n","date":"26 février 2025","externalUrl":null,"permalink":"/fr/courses/python/variables/","section":"Cours","summary":"","title":"Variables et commentaires en python","type":"courses"},{"content":"","date":"25 février 2025","externalUrl":null,"permalink":"/tags/beginner/","section":"Tags","summary":"","title":"Beginner","type":"tags"},{"content":"","date":"25 février 2025","externalUrl":null,"permalink":"/fr/tags/introduction/","section":"Tags","summary":"","title":"Introduction","type":"tags"},{"content":" Python : Introduction et premiers pas # Python est un langage de programmation de haut niveau qui se distingue par sa simplicité et sa lisibilité.\n🐍 Qu\u0026rsquo;est-ce que Python ? # Python est un langage polyvalent utilisé dans de nombreux domaines :\n🌐 Développement web 📊 Data Science et Machine Learning 🤖 Automatisation et scripting 🔒 Cybersécurité 🎮 Développement de jeux 🎯 Mission #1 : Déchiffrer le code # Avant d\u0026rsquo;aller plus loin, examinez ce bout de code et essayez de deviner ce qu\u0026rsquo;il fait :\nnom = input(\u0026#34;Quel est ton nom ? \u0026#34;) print(f\u0026#34;Enchanté, {nom} !\u0026#34;) Réfléchissez quelques instants\u0026hellip;\n📝 Révéler l'explication Ce code demande votre nom via la console et vous salue personnellement. Il illustre parfaitement la simplicité et la lisibilité de Python !\n🔍 Les caractéristiques qui rendent Python spécial # Interprété : Exécution ligne par ligne, sans compilation préalable Indentation significative : L\u0026rsquo;espacement structure le code (pas de { } comme en Java/C++) Multi-paradigme : Supporte la programmation procédurale, orientée objet et fonctionnelle Batteries included : Riche bibliothèque standard prête à l\u0026rsquo;emploi Communauté active : Écosystème vaste de bibliothèques tierces (Django, NumPy, Pygame, etc.) 🛠️ Installation de Python # 🔄 Vérification préalable # Ouvrez un terminal et tapez l\u0026rsquo;une des commandes suivantes :\npython --version ou\npython3 --version 📥 Installation selon votre système # 🪟 Windows Téléchargez l\u0026rsquo;installateur sur python.org Lancez l\u0026rsquo;installation Important : Cochez la case \u0026ldquo;Add Python to PATH\u0026rdquo; Suivez les instructions d\u0026rsquo;installation 🍎 macOS Téléchargez l\u0026rsquo;installateur sur python.org Lancez l\u0026rsquo;installation Suivez les instructions d\u0026rsquo;installation 🐧 Linux (Debian/Ubuntu) sudo apt update \u0026amp;\u0026amp; sudo apt install python3 ⚡ Linux (Void Linux) sudo xbps-install -S python3 ⚡ Linux (Arch Linux) sudo pacman -S python3 🚀 Premier contact avec Python # 🔮 L\u0026rsquo;interpréteur interactif # Lancez Python en mode interactif :\npython3 # Ou python selon le système et vous appuyez sur Entrer Vous verrez apparaître l\u0026rsquo;invite de commande Python \u0026gt;\u0026gt;\u0026gt;. C\u0026rsquo;est votre laboratoire d\u0026rsquo;expérimentation !\n\u0026gt;\u0026gt;\u0026gt; print(\u0026#34;Hello, World!\u0026#34;) Hello, World! \u0026gt;\u0026gt;\u0026gt; 2 + 3 5 \u0026gt;\u0026gt;\u0026gt; \u0026#34;Python\u0026#34; * 3 \u0026#39;PythonPythonPython\u0026#39; Pour quitter l\u0026rsquo;interpréteur, tapez exit() ou utilisez Ctrl+D (Unix) ou Ctrl+Z puis Enter (Windows).\n📝 Créer et exécuter un fichier Python # Créez un fichier nommé premier_script.py : # Mon premier script Python print(\u0026#34;Bienvenue dans l\u0026#39;aventure Python !\u0026#34;) # Un calcul simple resultat = 7 * 6 print(f\u0026#34;7 × 6 = {resultat}\u0026#34;) # Interaction avec l\u0026#39;utilisateur nom = input(\u0026#34;Comment t\u0026#39;appelles-tu, aventurier ? \u0026#34;) print(f\u0026#34;Ravi de te rencontrer, {nom} ! Ton voyage Python commence !\u0026#34;) Exécutez-le depuis le terminal : python3 premier_script.py 🎮 Défis pratiques # 🏆 Défi #1 : Personnalisation # Dans l\u0026rsquo;interpréteur Python, créez une phrase de bienvenue personnalisée :\nnom = \u0026#34;Alice\u0026#34; # Remplacez par votre prénom age = 25 # Remplacez par votre âge passion = \u0026#34;la programmation\u0026#34; # Remplacez par votre passion message = f\u0026#34;Je m\u0026#39;appelle {nom}, j\u0026#39;ai {age} ans et j\u0026#39;adore {passion}.\u0026#34; print(message) 🏆 Défi #2 : Calculatrice simple # Créez un fichier calculatrice.py :\n# Mini calculatrice Python print(\u0026#34;🧮 Calculatrice Python 🧮\u0026#34;) premier_nombre = float(input(\u0026#34;Premier nombre : \u0026#34;)) deuxieme_nombre = float(input(\u0026#34;Deuxième nombre : \u0026#34;)) print(f\u0026#34;Addition : {premier_nombre + deuxieme_nombre}\u0026#34;) print(f\u0026#34;Soustraction : {premier_nombre - deuxieme_nombre}\u0026#34;) print(f\u0026#34;Multiplication : {premier_nombre * deuxieme_nombre}\u0026#34;) # Éviter la division par zéro if deuxieme_nombre != 0: print(f\u0026#34;Division : {premier_nombre / deuxieme_nombre}\u0026#34;) else: print(\u0026#34;Division par zéro impossible !\u0026#34;) 📚 Pour progresser # 🎓 Ressources incontournables # The Zen of Python - La philosophie Python Documentation officielle - Le guide de référence Exercism - Défis pratiques pour tous niveaux 🧩 Prochaines étapes # Configurer votre environnement de développement Comprendre la différence entre fichier et shell 💡 Le saviez-vous ? # Python tire son nom de\u0026hellip; la troupe comique Monty Python ! Son créateur, Guido van Rossum, était fan de \u0026ldquo;Monty Python\u0026rsquo;s Flying Circus\u0026rdquo; et a choisi ce nom pour rendre son langage amusant et accessible.\nPrêt à continuer l\u0026rsquo;aventure ? Utilisez les défis ci-dessus comme point de départ et explorez le vaste monde de Python !\n","date":"25 février 2025","externalUrl":null,"permalink":"/fr/courses/python/introduction/","section":"Cours","summary":"","title":"Introduction à Python","type":"courses"},{"content":" Qu\u0026rsquo;est-ce qu\u0026rsquo;un langage de programmation ? (Définition simple) # Un langage de programmation est un moyen de communication entre un humain et un ordinateur. Il permet de donner des instructions à un ordinateur pour lui dire quoi faire et comment le faire.\nExemple simple # Imaginons que tu veuilles dire à ton ordinateur :\n👉 \u0026ldquo;Affiche le texte Bonjour !\u0026rdquo;\nEn français, tu écrirais :\nAffiche le texte \u0026#34;Bonjour !\u0026#34; En Python, ça devient :\nprint(\u0026#34;Bonjour !\u0026#34;) Le langage de programmation est donc une façon structurée et logique d’exprimer une idée, que l’ordinateur peut comprendre et exécuter.\nPourquoi en a-t-on besoin ? # Les ordinateurs ne comprennent que des instructions en binaire (des suites de 0 et 1). Or, il est impossible pour un humain de programmer directement en binaire. Un langage de programmation sert donc d’intermédiaire entre l’humain et la machine.\nDifférents types de langages de programmation # Langages de bas niveau (proches de la machine, ex : Assembleur, C) Langages de haut niveau (proches du langage humain, ex : Python, JavaScript) Python est un langage de haut niveau : il est conçu pour être simple à lire et à écrire.\n💡 Conclusion\nUn langage de programmation est une façon d’écrire des instructions pour qu’un ordinateur les exécute. Il permet de créer des logiciels, des jeux, des sites web, des robots et bien plus encore !\n🔥 Python est l\u0026rsquo;un des langages les plus simples pour débuter car il est très proche du langage naturel.\n","date":"16 février 2025","externalUrl":null,"permalink":"/fr/blog/python/","section":"Langage","summary":"","title":"Blog Python","type":"blog"},{"content":" Pourquoi Python est un excellent premier langage ? # Je me souviens encore de mes premiers pas en programmation. J\u0026rsquo;avais ouvert un éditeur de code, prêt à écrire mes premières lignes\u0026hellip; et BAM ! Je suis tombé sur un bout de code en C plein d’accolades, de points-virgules et de trucs incompréhensibles. J\u0026rsquo;ai essayé de comprendre, mais j\u0026rsquo;avais l\u0026rsquo;impression de déchiffrer un langage alien.\nPuis, j’ai découvert Python.\nC’était simple, lisible, et surtout, ça fonctionnait direct sans prise de tête. Un vrai game-changer. Si t’es en train de chercher ton premier langage de programmation, laisse-moi t’expliquer pourquoi Python est LE meilleur choix.\n1. Une syntaxe qui ne te prend pas la tête # Quand tu débutes, t’as pas envie de te battre avec des syntaxes compliquées. Python, c\u0026rsquo;est littéralement du pseudo-code que même un humain normal peut lire. Pas besoin de gérer les accolades ou les déclarations de types à rallonge.\nRegarde ce bout de code en Python :\ndef dire_bonjour(nom): print(f\u0026#34;Salut, {nom}!\u0026#34;) dire_bonjour(\u0026#34;Toi\u0026#34;) C’est propre, net et sans fioritures. Maintenant, fais la même chose en Java ou C et prépare-toi à pleurer.\n2. Un couteau suisse pour tout faire # Quand t’apprends un langage, autant qu’il serve à quelque chose, non ? Python, tu peux l’utiliser pour tout :\nDéveloppement web (Django, Flask) Automatisation de tâches (scripts pour gagner du temps) Data science et machine learning (Pandas, TensorFlow) Cybersécurité (Pentesting, analyse de logs) Bref, c’est pas juste un langage \u0026ldquo;pour apprendre\u0026rdquo;, c’est un vrai outil que tu pourras utiliser longtemps.\n3. Une commu qui assure tes arrières # Un autre gros point fort de Python, c’est sa communauté. T’es bloqué ? Y’a forcément un mec qui a eu le même problème avant toi et qui a posté la réponse sur Stack Overflow.\nEt justement, sur memlenz, j’ai mis en place une section Cours où tu peux apprendre Python tranquillement, sans partir dans tous les sens.\n4. T’apprends les bases sans galérer # Quand tu commences à coder, t’as besoin d’un langage qui te laisse apprendre la logique avant de t’embrouiller avec les détails techniques.\nAvec Python, tu peux te concentrer sur l’essentiel :\n✅ Les variables, conditions, boucles\n✅ Les fonctions, la programmation orientée objet\n✅ La gestion des fichiers et des exceptions\nEt comme c’est un langage interprété, pas besoin de compiler à chaque test. Tu lances ton code et tu vois direct ce qui marche (ou ce qui casse).\n5. Python, c’est pas juste pour débuter # Certains pensent que Python, c’est juste pour les débutants. Faux ! Des boîtes comme Google, Netflix ou Tesla l’utilisent pour du dev sérieux. Ça veut dire que si tu deviens bon en Python, y’a moyen de l’utiliser dans des jobs hyper variés :\n🚀 Développeur Web\n📊 Data Scientist\n🔐 Expert en cybersécurité\n🤖 Ingénieur en intelligence artificielle\nDonc ouais, apprendre Python, c’est pas juste \u0026ldquo;pour commencer\u0026rdquo;, c’est aussi un investissement pour l’avenir.\nConclusion : Aller, il faut apprendre Python # Si j’avais dû commencer avec un autre langage, j’aurais peut-être abandonné en cours de route. Heureusement, Python m’a montré que coder pouvait être simple et fun.\nEt toi, si tu veux apprendre Python avec un cours structuré et bien expliqué, je t’ai préparé tout ça dans la section Cours du blog :\n👉 Accédez au cours Python ici\nAllez, à toi de jouer ! 🚀\n","date":"15 février 2025","externalUrl":null,"permalink":"/fr/blog/python/pourquoi-python/","section":"Langage","summary":"","title":"Pourquoi Python est un excellent premier langage ?","type":"blog"},{"content":"","date":"15 février 2025","externalUrl":null,"permalink":"/fr/tags/c++/","section":"Tags","summary":"","title":"C++","type":"tags"},{"content":"","date":"15 février 2025","externalUrl":null,"permalink":"/fr/tags/java/","section":"Tags","summary":"","title":"Java","type":"tags"},{"content":"In this corner of the blog, we\u0026rsquo;ll dive into the fascinating world of programming languages. Discover the latest trends, best practices, and secrets of languages such as Python, Java, JavaScript, and many more. Whether you\u0026rsquo;re a beginner or an expert, this section is designed to help you improve your programming skills and stay up-to-date with the latest developments in the tech world.\n","date":"15 février 2025","externalUrl":null,"permalink":"/fr/blog/","section":"Langage","summary":"","title":"Langage","type":"blog"},{"content":"","date":"15 février 2025","externalUrl":null,"permalink":"/fr/tags/d%C3%A9veloppement/","section":"Tags","summary":"","title":"Développement","type":"tags"},{"content":"","date":"15 février 2025","externalUrl":null,"permalink":"/fr/categories/exp%C3%A9rience-personnelle/","section":"Categories","summary":"","title":"Expérience Personnelle","type":"categories"},{"content":"","date":"15 février 2025","externalUrl":null,"permalink":"/fr/categories/informatique/","section":"Categories","summary":"","title":"Informatique","type":"categories"},{"content":"","date":"15 février 2025","externalUrl":null,"permalink":"/fr/categories/linux--open-source/","section":"Categories","summary":"","title":"Linux \u0026 Open Source","type":"categories"},{"content":"","date":"15 février 2025","externalUrl":null,"permalink":"/fr/tags/open-source/","section":"Tags","summary":"","title":"Open Source","type":"tags"},{"content":"","date":"15 février 2025","externalUrl":null,"permalink":"/fr/tags/productivit%C3%A9/","section":"Tags","summary":"","title":"Productivité","type":"tags"},{"content":" 1. Le Déclic : Pourquoi Linux M’a Fait Gagner 🚀 # Je ne suis pas passé à Linux parce que c\u0026rsquo;était à la mode. J’y suis passé parce que j’en avais marre des limitations.\nTout a commencé en première année d’informatique à l’IUT de Parakou. Un camarade avait un setup de bureau hallucinant, digne d’un vrai hacker. Intrigué, je lui ai demandé ce que c’était. Il a simplement répondu :\n💬 « Oh, c’est juste Kali Linux. »\nC’était la première fois que je voyais un OS autre que Windows. En 2023, Windows 10 était la norme, et je ne m’étais jamais posé de questions. Mais après cette rencontre, ma curiosité s’est réveillée.\nJ’ai installé Kali Linux sur VirtualBox et commencé à bidouiller. La ligne de commande m’a immédiatement captivé c’était puissant, direct, efficace. J’ai même évité l’interface graphique, préférant tout faire en CLI. J’avais l’impression de pirater le système, pour de vrai.\nMais j’avais un problème :\n🛑 J’étais encore coincé sous Windows pour coder, tester et étudier.\nPuis, un jour, Windows m’a fait péter un câble.\nJe travaillais sur un projet en C, mais impossible de taper \u0026lt; et \u0026gt; facilement. Plutôt que d’appuyer sur deux touches, je devais soit ouvrir le clavier virtuel, soit mémoriser des combinaisons absurdes (Alt+60, Alt+62). Insensé.\nFrustré, j’ai cherché des solutions et je suis tombé sur le tuto d’un dev sous Linux. Curieux, j’ai testé son setup et j’ai découvert :\nShift + Alt + W pour \u0026lt; et Shift + Alt + X pour \u0026gt;.\nC’était fini.\n💥 À ce moment-là, j’ai décidé que je ne coderais plus jamais sous Windows.\nJ’ai commencé avec WSL (Windows Subsystem for Linux), puis le dual-boot, jusqu’à ce que je finisse par effacer Windows complètement. Et je ne suis jamais revenu en arrière.\n2. Les Frustrations Que J’ai Laissées Derrière ❌ # ❌ Aucune liberté – Windows et macOS imposent leur façon d’utiliser le système. Je voulais le contrôle total.\n❌ Problèmes de performance – Windows ralentit à chaque mise à jour. Linux reste fluide et rapide.\n❌ Bloatware \u0026amp; processus inutiles – Trop de logiciels inutiles qui bouffent les ressources.\n❌ Mises à jour forcées – Windows décide quand redémarrer. Linux me laisse choisir.\nPasser à Linux, ce n’était pas juste changer d’OS. C’était reprendre possession de mon expérience informatique.\n3. Ce Que J’ai Gagné Avec Linux 🏆 # ✅ Vitesse \u0026amp; efficacité – Mon système tourne comme une fusée. Plus de lenteurs absurdes.\n✅ Personnalisation totale – Tout est configuré pour mon workflow.\n✅ Sécurité \u0026amp; confidentialité – Pas de télémétrie forcée, pas de collecte cachée de données.\n✅ Un vrai état d’esprit hacker – Linux m’a appris comment fonctionnent vraiment les ordinateurs.\nLinux n’a pas juste changé mon OS. Il a changé ma façon de penser la tech.\n4. Mon Parcours Linux : Du Chaos à la Maîtrise 🛤️ # Je n’ai pas maîtrisé Linux en un jour. J’ai cassé mon système des dizaines de fois, réinstallé à répétition, et testé plein de choses.\nVoici mon évolution Linux :\nKali Linux – Premier contact, mais trop orienté cybersécurité. Ubuntu WSL \u0026amp; MX Linux – Mes premiers pas vers un vrai environnement Linux. Linux Mint – Accessible, mais trop chargé pour moi. Arch Linux – J’ai adoré le contrôle total, mais l’installation était rude. Void Linux – Mon choix final : rapide, minimaliste et puissant. Chaque erreur m’a appris quelque chose de nouveau.\n5. Les Découvertes Qui Ont Tout Changé 💡 # 💡 Tiling Window Managers (i3, bspwm) → Mon workflow est devenu ultra-rapide.\n💡 Gestionnaires de paquets – Pacman (Arch), APT (Debian), XBPS (Void).\n💡 Dotfiles \u0026amp; configs minimalistes – Un environnement taillé sur mesure.\nToutes ces découvertes ont boosté ma productivité bien au-delà de ce que j’imaginais.\n6. Pourquoi Void Linux Est Mon OS Ultime 🏆 # 💨 Ultra léger – Pas de services inutiles qui tournent en arrière-plan.\n⚡ Gestionnaire de paquets XBPS – Plus rapide et plus simple qu’APT ou Pacman.\n🚀 Pas de systemd – Plus de contrôle sur le système d’initialisation.\n🔄 Rolling release – Toujours à jour sans casser mon setup.\nVoid Linux n’est pas pour tout le monde. Mais pour les power users qui veulent simplicité et rapidité, c’est imbattable.\n7. Pourquoi Linux en 2025 ? 📅 # 💡 Ne dépendez plus des grandes entreprises qui dictent comment vous utilisez votre PC.\n💡 Des performances réelles – Pas d’obsolescence programmée.\n💡 Un contrôle total sur vos données – Pas de tracking caché, pas de cloud imposé.\n💡 Une communauté open-source – Un écosystème basé sur la collaboration.\nWindows et macOS sont des produits.\nLinux est une philosophie.\n8. Mes Conseils Pour Les Débutants Sous Linux 🎯 # 🟢 Choisissez la bonne distro – Ubuntu/Mint si vous débutez, Arch/Void si vous aimez bidouiller.\n🟢 Apprenez le terminal – cd, ls, mv, grep, ça change la vie.\n🟢 Expérimentez sans peur – Vous apprendrez en cassant des trucs.\n🟢 Rejoignez une communauté – Reddit, Discord, forums Linux = mines d’or d’infos.\n🟢 Optimisez votre workflow – Neovim, Tmux, Fish/Zsh, dotfiles… ça fait toute la différence.\n9. Conclusion : Plus Qu’un OS, Une Révolution 🔥 # Linux n’est pas juste un logiciel c’est une nouvelle manière de penser. Il pousse à comprendre son système, à l’adapter et à l’exploiter à fond.\n💡 Si vous en avez marre des éco-systèmes fermés, des performances en déclin et des restrictions, Linux est votre porte de sortie.\n🔥 Suivez mon parcours, je partagerai mes configs, tutos et explorations du monde Linux.\n🚀 Prêt à vous libérer ? Hackons le système ! 🚀\n","date":"15 février 2025","externalUrl":null,"permalink":"/fr/blog/why-linux/pourquoi-linux-m-a-fait-gagner/","section":"Langage","summary":"","title":"Why Linux","type":"blog"},{"content":"","date":"15 février 2025","externalUrl":null,"permalink":"/categories/computer-science/","section":"Categories","summary":"","title":"Computer Science","type":"categories"},{"content":"","date":"15 février 2025","externalUrl":null,"permalink":"/tags/development/","section":"Tags","summary":"","title":"Development","type":"tags"},{"content":"","date":"15 février 2025","externalUrl":null,"permalink":"/categories/personal-experience/","section":"Categories","summary":"","title":"Personal Experience","type":"categories"},{"content":"","date":"15 février 2025","externalUrl":null,"permalink":"/tags/productivity/","section":"Tags","summary":"","title":"Productivity","type":"tags"},{"content":"","date":"15 février 2025","externalUrl":null,"permalink":"/fr/portfolio/project2/","section":"Portfolio","summary":"","title":"Project2","type":"portfolio"},{"content":"","date":"15 février 2025","externalUrl":null,"permalink":"/fr/portfolio/project1/","section":"Portfolio","summary":"","title":"Project1","type":"portfolio"},{"content":"","date":"15 février 2025","externalUrl":null,"permalink":"/fr/tags/portfolio/","section":"Tags","summary":"","title":"Portfolio","type":"tags"},{"content":" Châ-Fine Ayédoun ADEBI # Analyste Informatique\nPortfolio | GitHub | Email\nÀ propos de moi # Salut ! Je suis Châ-Fine Ayédoun, un passionné de technologie avec une forte passion pour le développement logiciel, l\u0026rsquo;optimisation des performances et la scalabilité. Actuellement en train de poursuivre un bachelor en informatique, je suis constamment à la recherche de nouveaux défis et opportunités pour développer mes compétences et travailler sur des projets innovants.\nMon objectif est de devenir un développeur polyvalent, capable de contribuer à des projets back-end complexes, d\u0026rsquo;améliorer les performances des systèmes et d\u0026rsquo;assurer leur scalabilité. Je m\u0026rsquo;intéresse également profondément à l\u0026rsquo;open source et à l\u0026rsquo;intelligence artificielle.\nCompétences # Langages de programmation # Python, Java, C++, HTML/CSS Frameworks et outils # Django, Hugo, Qt Creator Environnements de développement # Linux (Void Linux), Git, Wireshark, LazyVim, i3wm, Alacritty, Rofi, Picom Domaines d\u0026rsquo;intérêt # Scalabilité des applications Optimisation des performances Développement IA DevOps \u0026amp; Automatisation du déploiement Langues # Français (natif) Anglais (intermédiaire) Projets # Système de gestion de bibliothèque # Technologies : Java, C++, Qt Creator\nDescription :\nJ\u0026rsquo;ai conçu et développé un système complet de gestion de bibliothèque, en me concentrant sur l\u0026rsquo;optimisation de la structure et des performances par rapport aux solutions existantes. Ce projet m\u0026rsquo;a permis d\u0026rsquo;approfondir mes connaissances en gestion de bases de données, algorithmes de recherche et développement multiplateforme.\nVoir le projet sur GitHub\nBlog avec Hugo \u0026amp; GitHub Pages # Technologies : Hugo, GitHub Pages\nDescription :\nCe blog a été créé pour partager des ressources, des tutoriels et mes réflexions sur la technologie. À travers ce projet, j\u0026rsquo;ai exploré les générateurs de sites statiques, la modularité du code et l\u0026rsquo;optimisation des performances web. Il sert également de projet personnel où j\u0026rsquo;ai renforcé mes compétences en développement web.\nVisiter le blog\nIntelligence artificielle avec AIMA Python # Technologies : Python, AIMA Python\nDescription :\nCe projet m\u0026rsquo;a permis d\u0026rsquo;explorer divers algorithmes d\u0026rsquo;intelligence artificielle en utilisant la bibliothèque AIMA Python, en me concentrant sur des techniques comme la recherche informée, les réseaux de neurones et la planification automatisée. J\u0026rsquo;ai approfondi mes compétences en algorithmes et résolution de problèmes complexes grâce à ce projet.\nVoir le projet sur GitHub\nExpérience # Bien que je sois encore étudiant, j\u0026rsquo;ai participé à divers projets académiques et personnels qui m\u0026rsquo;ont donné une solide compréhension des fondamentaux du développement logiciel. Je suis toujours à la recherche d\u0026rsquo;opportunités pour appliquer ces compétences dans des contextes professionnels réels.\nTémoignages # \u0026ldquo;Châ-Fine est un développeur extrêmement compétent et autonome. Son travail sur le projet de gestion de bibliothèque a dépassé nos attentes en termes de performance et de modularité.\u0026rdquo;\n– Responsable de projet, Département Informatique\n\u0026ldquo;Sa rigueur et sa passion pour l\u0026rsquo;open source font de lui un atout précieux pour toute équipe de développement. Il résout les problèmes de manière innovante et efficace.\u0026rdquo;\n– Camarade de projet, Développement Web\nContact # Si vous souhaitez discuter de mes projets, poser des questions ou collaborer sur de nouveaux défis, n\u0026rsquo;hésitez pas à me contacter.\nEmail : achafine@gmail.com\nGitHub : memlenz\nPortfolio : https://memlenz.github.io/\n","date":"15 février 2025","externalUrl":null,"permalink":"/fr/portfolio/","section":"Portfolio","summary":"","title":"Portfolio","type":"portfolio"},{"content":"","date":"15 février 2025","externalUrl":null,"permalink":"/fr/tutorials/hugo-setup/","section":"Tutorials","summary":"","title":"Hugo Setup","type":"tutorials"},{"content":"","date":"15 février 2025","externalUrl":null,"permalink":"/fr/tutorials/git-workflows/","section":"Tutorials","summary":"","title":"Git Workflows","type":"tutorials"},{"content":"","date":"15 février 2025","externalUrl":null,"permalink":"/tutorials/git-workflows/git-commands/","section":"Tutorials","summary":"","title":"Git Commands","type":"tutorials"},{"content":"","date":"15 février 2025","externalUrl":null,"permalink":"/fr/tutorials/","section":"Tutorials","summary":"","title":"Tutorials","type":"tutorials"},{"content":" 📚 Cours # Bienvenue dans la section Cours de memlenz ! Ici, tu trouveras des cours détaillés et structurés pour apprendre et approfondir tes connaissances en informatique.\n📌 Objectif # L\u0026rsquo;objectif de cette section est de proposer un apprentissage progressif et rigoureux, couvrant :\nLes bases de la programmation : comprendre les fondamentaux des langages et des paradigmes. Les structures de données et algorithmes : développer des réflexes solides pour résoudre efficacement des problèmes. Le développement web et DevOps : maîtriser les outils modernes et les bonnes pratiques pour construire et déployer des applications. 🏆 À qui s\u0026rsquo;adresse cette section ? # Que tu sois débutant ou développeur expérimenté, ces cours te guideront avec une approche claire et pédagogique, tout en approfondissant les aspects techniques essentiels.\n📖 Contenu # Les cours sont organisés par catégories et niveaux, et comprennent :\nDes explications détaillées et illustrées. Des exemples concrets et du code pratique. Des exercices et défis pour tester tes compétences. 🚀 Commence ton apprentissage # Navigue parmi les différentes catégories et trouve le cours qui correspond à ton niveau et à tes objectifs. Bonne exploration ! 🔥\n","date":"15 février 2025","externalUrl":null,"permalink":"/fr/courses/","section":"Cours","summary":"","title":"Cours","type":"courses"},{"content":"","date":"15 février 2025","externalUrl":null,"permalink":"/fr/blog/dsa-guide/dsa-intro/","section":"Langage","summary":"","title":"DSA","type":"blog"},{"content":"","date":"15 février 2025","externalUrl":null,"permalink":"/parcours/","section":"Parcours","summary":"","title":"Parcours","type":"parcours"},{"content":" 🚀 Plan d’Apprentissage Structuré pour Devenir un Bon Développeur # Ce plan te guidera de zéro à un niveau avancé avec une progression bien définie. L’idée est de comprendre, pratiquer et construire.\n🟢 Phase 1 : Les Fondations (1-3 mois) # 🎯 Objectif : Comprendre les bases du développement et des algorithmes.\n✅ 1. Apprendre un langage de programmation solide (Python, C, JavaScript\u0026hellip;)\nSyntaxe, variables, types, conditions, boucles. Fonctions et structures de données (list, dict, set). Lecture/écriture de fichiers et gestion des erreurs. 📝 Exercice :\nÉcrire un script qui prend une liste de nombres et retourne la somme des nombres pairs. Créer un petit programme qui lit et enregistre des données dans un fichier texte. ✅ 2. Comprendre la logique de programmation et les algorithmes\nStructures de données essentielles : tableaux, piles, files, dictionnaires. Algorithmes de tri et de recherche (Bubble Sort, Binary Search). Notion de complexité (O(n), O(log n)). 📝 Exercice :\nImplémenter un algorithme de tri (ex : Bubble Sort). Résoudre 20 exercices sur LeetCode niveau facile. ✅ 3. Maîtriser Git et le versioning\nCréer un dépôt GitHub. Comprendre commit, branch, merge, pull request. Participer à un projet open-source. 📝 Exercice :\nPublier ton premier projet sur GitHub. Contribuer à un projet open-source avec une PR (Pull Request). 🟠 Phase 2 : Devenir un Développeur Compétent (3-6 mois) # 🎯 Objectif : Construire des projets concrets et structurer son code proprement.\n✅ 4. Programmation Orientée Objet (POO) et Paradigmes de Programmation\nClasses, objets, héritage, polymorphisme. Programmation fonctionnelle vs impérative. Les Design Patterns courants (Singleton, Factory, MVC). 📝 Exercice :\nImplémenter un système de gestion d’utilisateurs en POO. Refactoriser un projet en utilisant un design pattern. ✅ 5. Développer des projets concrets\nUn bot Telegram qui répond aux messages. Un web scraper qui récupère des infos sur un site. Un gestionnaire de tâches stockant les données en base de données. 📝 Exercice :\nDévelopper un mini-projet et le documenter sur GitHub. Utiliser une API externe (requests, FastAPI). ✅ 6. Apprendre les bases du DevOps et des bonnes pratiques\nDocker et les conteneurs. Déploiement d\u0026rsquo;une application avec CI/CD (GitHub Actions). Sécurité : éviter les injections SQL, hashage des mots de passe. 📝 Exercice :\nDockeriser un projet et l’héberger sur un serveur. Automatiser les tests et le déploiement d’un script via CI/CD. 🔵 Phase 3 : Approfondissement et Spécialisation (6-12 mois) # 🎯 Objectif : Devenir autonome et choisir une spécialisation (backend, frontend, DevOps\u0026hellip;).\n✅ 7. Choisir une spécialisation\n🔹 Développement Web\nBackend (Flask, FastAPI, Django, Node.js). Frontend (React, Vue.js, Tailwind). Bases de données (PostgreSQL, MongoDB, Redis). 🔹 Data Science \u0026amp; Machine Learning\nNumPy, Pandas, Matplotlib. Algorithmes d’IA avec Scikit-Learn et TensorFlow. 🔹 Sécurité et Hacking Éthique\nPentesting, cryptographie, cybersécurité. Tests de vulnérabilité sur des serveurs. 🔹 DevOps \u0026amp; Cloud\nCI/CD, Kubernetes, Terraform. Déploiement sur AWS/Digital Ocean. 📝 Exercice :\nChoisir une spécialisation et développer un projet complet avec. Lire la documentation et créer un article de blog expliquant un concept avancé. 🚀 Phase 4 : Devenir un Développeur Avancé (12+ mois) # 🎯 Objectif : Travailler sur des projets réels et devenir un expert dans son domaine.\n✅ 8. Contribuer à des projets open-source et collaborer\nParticiper activement à GitHub. Faire du pair programming et des code reviews. Travailler sur un vrai projet en équipe. ✅ 9. Créer un projet open-source ou un side-project ambitieux\nUne application SaaS complète. Un framework ou une bibliothèque réutilisable. Un outil DevOps utile à la communauté. ✅ 10. Se perfectionner avec des challenges et de la lecture\nRésoudre des problèmes d’algorithmes avancés sur LeetCode. Lire des livres comme \u0026ldquo;Clean Code\u0026rdquo;, \u0026ldquo;Design Patterns\u0026rdquo;, \u0026ldquo;The Pragmatic Programmer\u0026rdquo;. Faire du reverse engineering et explorer des domaines connexes. 🔥 Résumé : Clés pour Réussir # 1️⃣ Comprendre le problème avant de coder.\n2️⃣ Choisir la bonne technologie et structurer son projet.\n3️⃣ Coder proprement et appliquer les bonnes pratiques.\n4️⃣ Construire et documenter des projets concrets.\n5️⃣ Collaborer, apprendre en continu et contribuer à l’open-source.\n💡 Ce plan te motive ? Tu veux qu\u0026rsquo;on creuse un point précis ? 🚀\n","externalUrl":null,"permalink":"/fr/blog/linux-tweaks/java-setup/","section":"Langage","summary":"","title":"","type":"blog"},{"content":"","externalUrl":null,"permalink":"/fr/authors/","section":"Authors","summary":"","title":"Authors","type":"authors"},{"content":"","externalUrl":null,"permalink":"/fr/series/","section":"Series","summary":"","title":"Series","type":"series"}]